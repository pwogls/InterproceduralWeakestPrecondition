>>> MiniBatchSparsePCA  ( transformer )
10 trials: 0 passed, 10 failed.
+-------------------+----------------+-----------------+----------------+-----------------+-----------+--------+
|       name        | true_positives | false_positives | true_negatives | false_negatives | precision | recall |
+-------------------+----------------+-----------------+----------------+-----------------+-----------+--------+
|    handwritten    |       -        |        -        |       -        |        -        |     -     |   -    |
| docstrings_(0/0)  |       0        |       10        |       0        |        0        |    0.0    |  INF   |
| WPanalysis_(5/44) |       0        |        0        |       10       |        0        |    INF    |  INF   |
+-------------------+----------------+-----------------+----------------+-----------------+-----------+--------+
Note:
	handwritten_(A/B) means there are B total constraints, A of which are good constraints (no TODO).
	WP aboved are interesting wp, ie. 2+ hp or 1 + X/y. For overall WP, there are 44 total, 5 are good. All WP constraints are at /output/JSS_all_exceptions/

> Hyperparams: 
 ['alpha', 'batch_size', 'method', 'n_components', 'n_iter', 'shuffle', 'ridge_alpha', 'callback', 'verbose', 'n_jobs', 'random_state']

> relevantToOptimizer:
 None

> handwritten
False Positives (-):
True Negatives (-):

> docstring
False Positives (10):
	(10) A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.
True Negatives (0):

> WPanalysis
False Positives (0):
True Negatives (10):
	(10) A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.

> Failed constraints stats:
handwritten:

docstring:

WPanalysis:
freq = 10
{'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse "
                'matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy '
                "array.'     ) ",
 'type': 'object',
 'not': {}}
