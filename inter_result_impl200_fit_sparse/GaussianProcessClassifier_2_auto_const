{'allOf': [{'type': 'object',
            'required': ['kernel',
                         'optimizer',
                         'n_restarts_optimizer',
                         'max_iter_predict',
                         'warm_start',
                         'copy_X_train',
                         'random_state',
                         'multi_class',
                         'n_jobs'],
            'relevantToOptimizer': ['optimizer', 'n_restarts_optimizer', 'max_iter_predict', 'multi_class'],
            'additionalProperties': False,
            'properties': {'kernel': {'XXX TODO XXX': 'kernel object',
                                      'description': 'The kernel specifying the covariance function of the GP',
                                      'enum': [None],
                                      'default': None},
                           'optimizer': {'anyOf': [{'laleType': 'callable', 'forOptimizer': False},
                                                   {'enum': ['fmin_l_bfgs_b']}],
                                         'default': 'fmin_l_bfgs_b',
                                         'description': 'Can either be one of the internally supported optimizers for '
                                                        "optimizing the kernel's parameters, specified by a string, or "
                                                        'an externally defined optimizer passed as a callable'},
                           'n_restarts_optimizer': {'type': 'integer',
                                                    'minimumForOptimizer': 0,
                                                    'maximumForOptimizer': 1,
                                                    'distribution': 'uniform',
                                                    'default': 0,
                                                    'description': 'The number of restarts of the optimizer for '
                                                                   "finding the kernel's parameters which maximize the "
                                                                   'log-marginal likelihood'},
                           'max_iter_predict': {'type': 'integer',
                                                'minimumForOptimizer': 100,
                                                'maximumForOptimizer': 101,
                                                'distribution': 'uniform',
                                                'default': 100,
                                                'description': "The maximum number of iterations in Newton's method "
                                                               'for approximating the posterior during predict'},
                           'warm_start': {'type': 'boolean',
                                          'default': False,
                                          'description': 'If warm-starts are enabled, the solution of the last Newton '
                                                         'iteration on the Laplace approximation of the posterior mode '
                                                         'is used as initialization for the next call of '
                                                         '_posterior_mode()'},
                           'copy_X_train': {'type': 'boolean',
                                            'default': True,
                                            'description': 'If True, a persistent copy of the training data is stored '
                                                           'in the object'},
                           'random_state': {'anyOf': [{'type': 'integer'},
                                                      {'laleType': 'numpy.random.RandomState'},
                                                      {'enum': [None]}],
                                            'default': None,
                                            'description': 'The generator used to initialize the centers'},
                           'multi_class': {'XXX TODO XXX': 'string, default',
                                           'description': 'Specifies how multi-class classification problems are '
                                                          'handled',
                                           'enum': ['one_vs_one', 'one_vs_rest'],
                                           'default': 'one_vs_rest'},
                           'n_jobs': {'anyOf': [{'type': 'integer'}, {'enum': [None]}],
                                      'default': 1,
                                      'description': 'The number of jobs to use for the computation'}}}]}
