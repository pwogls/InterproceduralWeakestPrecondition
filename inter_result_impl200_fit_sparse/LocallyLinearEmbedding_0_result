>>> LocallyLinearEmbedding  ( transformer )
1000 trials: 0 passed, 1000 failed.
+--------------------+----------------+-----------------+----------------+-----------------+-----------+--------+
|        name        | true_positives | false_positives | true_negatives | false_negatives | precision | recall |
+--------------------+----------------+-----------------+----------------+-----------------+-----------+--------+
|    handwritten     |       -        |        -        |       -        |        -        |     -     |   -    |
|  docstrings_(2/2)  |       0        |      1000       |       0        |        0        |    0.0    |  INF   |
| WPanalysis_(10/46) |       0        |        0        |      1000      |        0        |    INF    |  INF   |
+--------------------+----------------+-----------------+----------------+-----------------+-----------+--------+
Note:
	handwritten_(A/B) means there are B total constraints, A of which are good constraints (no TODO).
	WP aboved are interesting wp, ie. 2+ hp or 1 + X/y. For overall WP, there are 46 total, 10 are good. All WP constraints are at /output/JSS_all_exceptions/

> Hyperparams: 
 ['eigen_solver', 'max_iter', 'method', 'n_neighbors', 'neighbors_algorithm', 'tol', 'n_components', 'reg', 'hessian_tol', 'modified_tol', 'random_state', 'n_jobs']

> relevantToOptimizer:
 ['n_neighbors', 'eigen_solver', 'tol', 'max_iter', 'method', 'neighbors_algorithm']

> handwritten
False Positives (-):
True Negatives (-):

> docstring
False Positives (1000):
	(1000) A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.
True Negatives (0):

> WPanalysis
False Positives (0):
True Negatives (1000):
	(1000) A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.

> Failed constraints stats:
handwritten:

docstring:

WPanalysis:
freq = 1000
{'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse "
                'matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy '
                "array.'     ) ",
 'type': 'object',
 'not': {}}
