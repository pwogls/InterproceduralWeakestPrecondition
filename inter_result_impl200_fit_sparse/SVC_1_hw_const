{'allOf': [{'type': 'object',
            'additionalProperties': False,
            'required': ['kernel',
                         'degree',
                         'gamma',
                         'shrinking',
                         'tol',
                         'cache_size',
                         'max_iter',
                         'decision_function_shape'],
            'relevantToOptimizer': ['kernel', 'degree', 'gamma', 'shrinking', 'probability', 'tol'],
            'properties': {'C': {'description': 'Penalty parameter C of the error term.',
                                 'type': 'number',
                                 'distribution': 'loguniform',
                                 'minimum': 0.0,
                                 'exclusiveMinimum': True,
                                 'default': 1.0,
                                 'minimumForOptimizer': 0.03125,
                                 'maximumForOptimizer': 32768},
                           'kernel': {'anyOf': [{'enum': ['precomputed'], 'forOptimizer': False},
                                                {'enum': ['linear', 'poly', 'rbf', 'sigmoid']},
                                                {'laleType': 'callable', 'forOptimizer': False}],
                                      'default': 'rbf',
                                      'description': 'Specifies the kernel type to be used in the algorithm.'},
                           'degree': {'type': 'integer',
                                      'minimum': 0,
                                      'minimumForOptimizer': 2,
                                      'maximumForOptimizer': 5,
                                      'default': 3,
                                      'description': "Degree of the polynomial kernel function ('poly')."},
                           'gamma': {'default': 'scale',
                                     'description': "Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.",
                                     'anyOf': [{'enum': ['scale', 'auto']},
                                               {'type': 'number',
                                                'minimum': 0.0,
                                                'exclusiveMinimum': True,
                                                'minimumForOptimizer': 3.0517578125e-05,
                                                'maximumForOptimizer': 8,
                                                'distribution': 'loguniform'}]},
                           'coef0': {'type': 'number',
                                     'minimumForOptimizer': -1,
                                     'maximumForOptimizer': 1,
                                     'default': 0.0,
                                     'description': 'Independent term in kernel function.'},
                           'shrinking': {'type': 'boolean',
                                         'default': True,
                                         'description': 'Whether to use the shrinking heuristic.'},
                           'probability': {'type': 'boolean',
                                           'default': False,
                                           'description': 'Whether to enable probability estimates.'},
                           'tol': {'type': 'number',
                                   'distribution': 'loguniform',
                                   'minimum': 0.0,
                                   'exclusiveMinimum': True,
                                   'maximumForOptimizer': 0.01,
                                   'default': 0.001,
                                   'description': 'Tolerance for stopping criteria.'},
                           'cache_size': {'type': 'integer',
                                          'minimum': 0,
                                          'maximumForOptimizer': 1000,
                                          'default': 200,
                                          'description': 'Specify the size of the kernel cache (in MB).'},
                           'class_weight': {'anyOf': [{'description': 'By default, all classes have weight 1.',
                                                       'enum': [None]},
                                                      {'description': 'Adjust weights by inverse frequency.',
                                                       'enum': ['balanced']},
                                                      {'description': 'Dictionary mapping class labels to weights.',
                                                       'type': 'object',
                                                       'additionalProperties': {'type': 'number'},
                                                       'forOptimizer': False}],
                                            'default': None},
                           'verbose': {'type': 'boolean', 'default': False, 'description': 'Enable verbose output.'},
                           'max_iter': {'type': 'integer',
                                        'minimumForOptimizer': 1,
                                        'maximumForOptimizer': 1000,
                                        'default': -1,
                                        'description': 'Hard limit on iterations within solver, or -1 for no limit.'},
                           'decision_function_shape': {'enum': ['ovo', 'ovr'],
                                                       'default': 'ovr',
                                                       'description': "Whether to return a one-vs-rest ('ovr') "
                                                                      'decision function of shape (n_samples, '
                                                                      'n_classes) as all other classifiers, or the '
                                                                      'original one-vs-one (‘ovo’) decision function '
                                                                      'of libsvm which has shape (n_samples, n_classes '
                                                                      '* (n_classes - 1) / 2).'},
                           'random_state': {'description': 'Seed of pseudo-random number generator.',
                                            'anyOf': [{'laleType': 'numpy.random.RandomState'},
                                                      {'description': 'RandomState used by np.random', 'enum': [None]},
                                                      {'description': 'Explicit seed.', 'type': 'integer'}],
                                            'default': None},
                           'break_ties': {'default': False,
                                          'description': "If true, decision_function_shape='ovr', and number of "
                                                         'classes > 2, predict will break ties according to the '
                                                         'confidence values of decision_function; otherwise the first '
                                                         'class among the tied classes is returned.',
                                          'type': 'boolean'}}},
           {'description': 'coef0 only significant in kernel ‘poly’ and ‘sigmoid’.',
            'anyOf': [{'type': 'object', 'properties': {'kernel': {'enum': ['poly', 'sigmoid']}}},
                      {'type': 'object', 'properties': {'coef0': {'enum': [0.0]}}}]}]}
