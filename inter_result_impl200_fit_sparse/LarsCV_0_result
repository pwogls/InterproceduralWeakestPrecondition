>>> LarsCV  ( regression )
1000 trials: 0 passed, 1000 failed.
+-------------------+----------------+-----------------+----------------+-----------------+-----------+--------+
|       name        | true_positives | false_positives | true_negatives | false_negatives | precision | recall |
+-------------------+----------------+-----------------+----------------+-----------------+-----------+--------+
|    handwritten    |       -        |        -        |       -        |        -        |     -     |   -    |
| docstrings_(0/1)  |       0        |      1000       |       0        |        0        |    0.0    |  INF   |
| WPanalysis_(5/60) |       0        |      1000       |       0        |        0        |    0.0    |  INF   |
+-------------------+----------------+-----------------+----------------+-----------------+-----------+--------+
Note:
	handwritten_(A/B) means there are B total constraints, A of which are good constraints (no TODO).
	WP aboved are interesting wp, ie. 2+ hp or 1 + X/y. For overall WP, there are 60 total, 5 are good. All WP constraints are at /output/JSS_all_exceptions/

> Hyperparams: 
 ['copy_X', 'cv', 'eps', 'fit_intercept', 'max_iter', 'max_n_alphas', 'normalize', 'precompute', 'verbose', 'n_jobs']

> relevantToOptimizer:
 ['fit_intercept', 'max_iter', 'normalize', 'precompute', 'cv', 'max_n_alphas', 'eps', 'copy_X']

> handwritten
False Positives (-):
True Negatives (-):

> docstring
False Positives (1000):
	(1000) A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.
True Negatives (0):

> WPanalysis
False Positives (1000):
	(1000) A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.
True Negatives (0):

> Failed constraints stats:
handwritten:

docstring:

WPanalysis:
