{'allOf': [{'type': 'object',
            'required': ['n_components',
                         'tol',
                         'copy',
                         'max_iter',
                         'noise_variance_init',
                         'svd_method',
                         'iterated_power',
                         'random_state'],
            'relevantToOptimizer': ['tol', 'copy', 'svd_method', 'iterated_power', 'rotation'],
            'additionalProperties': False,
            'properties': {'n_components': {'enum': ['int', None],
                                            'default': None,
                                            'description': 'Dimensionality of latent space, the number of components '
                                                           'of ``X`` that are obtained after ``transform``'},
                           'tol': {'type': 'number',
                                   'minimumForOptimizer': 1e-08,
                                   'maximumForOptimizer': 0.01,
                                   'distribution': 'loguniform',
                                   'default': 0.01,
                                   'description': 'Stopping tolerance for EM algorithm.'},
                           'copy': {'type': 'boolean', 'default': True, 'description': 'Whether to make a copy of X'},
                           'max_iter': {'type': 'integer',
                                        'minimumForOptimizer': 10,
                                        'maximumForOptimizer': 1000,
                                        'distribution': 'uniform',
                                        'default': 1000,
                                        'description': 'Maximum number of iterations.'},
                           'noise_variance_init': {'XXX TODO XXX': 'None | array, shape=(n_features,)',
                                                   'description': 'The initial guess of the noise variance for each '
                                                                  'feature',
                                                   'enum': [None],
                                                   'default': None},
                           'svd_method': {'enum': ['lapack', 'randomized'],
                                          'default': 'randomized',
                                          'description': 'Which SVD method to use'},
                           'iterated_power': {'type': 'integer',
                                              'minimumForOptimizer': 3,
                                              'maximumForOptimizer': 4,
                                              'distribution': 'uniform',
                                              'default': 3,
                                              'description': 'Number of iterations for the power method'},
                           'rotation': {'enum': ['varimax', 'quartimax'],
                                        'default': None,
                                        'description': 'if not None, apply the indicated rotation. Currently, varimax '
                                                       'and quartimax are implemented.'},
                           'random_state': {'anyOf': [{'type': 'integer'},
                                                      {'laleType': 'numpy.random.RandomState'},
                                                      {'enum': [None]}],
                                            'default': 0,
                                            'description': 'If int, random_state is the seed used by the random number '
                                                           'generator; If RandomState instance, random_state is the '
                                                           'random number generator; If None, the random number '
                                                           'generator is the RandomState instance used by '
                                                           '`np.random`'}}},
           {'XXX TODO XXX': "Parameter: iterated_power > only used if svd_method equals 'randomized'"},
           {'XXX TODO XXX': "Parameter: random_state > only used when svd_method equals 'randomized'"}]}
