{'allOf': [{'type': 'object',
            'required': ['epsilon',
                         'tol',
                         'C',
                         'loss',
                         'fit_intercept',
                         'intercept_scaling',
                         'dual',
                         'verbose',
                         'random_state',
                         'max_iter'],
            'relevantToOptimizer': ['epsilon', 'tol', 'loss', 'fit_intercept', 'dual', 'max_iter'],
            'additionalProperties': False,
            'properties': {'epsilon': {'type': 'number',
                                       'minimumForOptimizer': 1e-08,
                                       'maximumForOptimizer': 1.35,
                                       'distribution': 'loguniform',
                                       'default': 0.0,
                                       'description': 'Epsilon parameter in the epsilon-insensitive loss function.\n'
                                                      'Note that the value of this parameter depends on the scale of '
                                                      'the target variable y. If unsure, set epsilon=0.'},
                           'tol': {'type': 'number',
                                   'minimumForOptimizer': 1e-08,
                                   'maximumForOptimizer': 0.01,
                                   'distribution': 'loguniform',
                                   'default': 0.0001,
                                   'description': 'Tolerance for stopping criteria.'},
                           'C': {'type': 'number',
                                 'default': 1.0,
                                 'description': 'Regularization parameter.\n'
                                                'The strength of the regularization is inversely proportional to C. '
                                                'Must be strictly positive.'},
                           'loss': {'enum': ['hinge',
                                             'squared_epsilon_insensitive',
                                             'squared_hinge',
                                             'epsilon_insensitive'],
                                    'default': 'epsilon_insensitive',
                                    'description': 'Specifies the loss function.\n'
                                                   'The epsilon-insensitive loss (standard SVR) is the L1 loss, while '
                                                   'the squared epsilon-insensitive loss '
                                                   '(‘squared_epsilon_insensitive’) is the L2 loss.'},
                           'fit_intercept': {'type': 'boolean',
                                             'default': True,
                                             'description': 'Whether to calculate the intercept for this model.\n'
                                                            'If set to false, no intercept will be used in '
                                                            'calculations (i.e. data is expected to be already '
                                                            'centered).'},
                           'intercept_scaling': {'type': 'number',
                                                 'default': 1.0,
                                                 'description': 'When self.fit_intercept is True, instance vector x '
                                                                'becomes [x, self.intercept_scaling],\n'
                                                                'i.e. a “synthetic” feature with constant value equals '
                                                                'to intercept_scaling is appended to the instance '
                                                                'vector.\n'
                                                                'The intercept becomes intercept_scaling * synthetic '
                                                                'feature weight Note! the synthetic feature weight is '
                                                                'subject to l1/l2 regularization as all other '
                                                                'features.\n'
                                                                'To lessen the effect of regularization on synthetic '
                                                                'feature weight (and therefore on the intercept) '
                                                                'intercept_scaling has to be increased.'},
                           'dual': {'type': 'boolean',
                                    'default': True,
                                    'description': 'Select the algorithm to either solve the dual or primal '
                                                   'optimization problem.\n'
                                                   'Prefer dual=False when n_samples > n_features.'},
                           'verbose': {'type': 'integer',
                                       'default': 0,
                                       'description': 'Enable verbose output.\n'
                                                      'Note that this setting takes advantage of a per-process runtime '
                                                      'setting in liblinear that, if enabled, may not work properly in '
                                                      'a multithreaded context.'},
                           'random_state': {'description': 'Seed of pseudo-random number generator.',
                                            'anyOf': [{'laleType': 'numpy.random.RandomState'},
                                                      {'description': 'RandomState used by np.random', 'enum': [None]},
                                                      {'description': 'Explicit seed.', 'type': 'integer'}],
                                            'default': None},
                           'max_iter': {'type': 'integer',
                                        'minimumForOptimizer': 10,
                                        'maximumForOptimizer': 1000,
                                        'distribution': 'uniform',
                                        'default': 1000,
                                        'description': 'The maximum number of iterations to be run.'}}},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise '
                           'ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                            {'XXX TODO XXX': 'X.ndim <= 1'},
                                            {'type': 'object', 'laleNot': 'X/isSparse'},
                                            {'XXX TODO XXX': "not hasattr(X.sparse.to_coo(), 'dtype')"},
                                            {'XXX TODO XXX': 'X.sparse.to_coo().dtype is None'},
                                            {'XXX TODO XXX': "not hasattr(X.sparse.to_coo().dtype, 'kind')"},
                                            {'XXX TODO XXX': "X.sparse.to_coo().dtype.kind != 'c'"}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                       {'XXX TODO XXX': 'X.ndim > 1'}]},
                                            {'type': 'object', 'laleNot': 'X/isSparse'},
                                            {'XXX TODO XXX': "not hasattr(X, 'dtype')"},
                                            {'XXX TODO XXX': 'X.dtype is None'},
                                            {'XXX TODO XXX': "not hasattr(X.dtype, 'kind')"},
                                            {'XXX TODO XXX': "X.dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise '
                           'ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': 'not hasattr(X.dtypes, '
                                                                                   "'__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                         'all((False '
                                                                                                         'for '
                                                                                                         'np.float64 '
                                                                                                         'in '
                                                                                                         'list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(X, '
                                                                                                                               "'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim '
                                                                                                                               '<= '
                                                                                                                               '1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                                          "'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim '
                                                                                                                                          '> '
                                                                                                                                          '1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False '
                                                                                                         'for '
                                                                                                         'np.float64 '
                                                                                                         'in '
                                                                                                         'list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(X, '
                                                                                                                               "'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim '
                                                                                                                               '<= '
                                                                                                                               '1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                                          "'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim '
                                                                                                                                          '> '
                                                                                                                                          '1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                                             {'XXX TODO XXX': 'hasattr(X.dtypes, '
                                                                                              "'__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                         'hasattr(X, '
                                                                                                         "'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'dtype')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype '
                                                                                                         'is None'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype, '
                                                                                                         "'kind')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype.kind '
                                                                                                         "!= 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                    "'sparse')"},
                                                                                                   {'XXX TODO XXX': 'X.ndim '
                                                                                                                    '> '
                                                                                                                    '1'}]},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'dtype')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype '
                                                                                                         'is None'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype, '
                                                                                                         "'kind')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype.kind '
                                                                                                         '!= '
                                                                                                         "'c'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': 'not hasattr(X.dtypes, '
                                                                                   "'__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                         'all((False '
                                                                                                         'for '
                                                                                                         'np.float64 '
                                                                                                         'in '
                                                                                                         'list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(X, '
                                                                                                                               "'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim '
                                                                                                                               '<= '
                                                                                                                               '1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                                          "'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim '
                                                                                                                                          '> '
                                                                                                                                          '1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False '
                                                                                                         'for '
                                                                                                         'np.float64 '
                                                                                                         'in '
                                                                                                         'list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(X, '
                                                                                                                               "'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim '
                                                                                                                               '<= '
                                                                                                                               '1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                                          "'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim '
                                                                                                                                          '> '
                                                                                                                                          '1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                                             {'XXX TODO XXX': 'hasattr(X.dtypes, '
                                                                                              "'__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                         'hasattr(X, '
                                                                                                         "'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'dtype')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype '
                                                                                                         'is None'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype, '
                                                                                                         "'kind')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype.kind '
                                                                                                         "!= 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                    "'sparse')"},
                                                                                                   {'XXX TODO XXX': 'X.ndim '
                                                                                                                    '> '
                                                                                                                    '1'}]},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'dtype')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype '
                                                                                                         'is None'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype, '
                                                                                                         "'kind')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype.kind '
                                                                                                         '!= '
                                                                                                         "'c'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_check_large_sparse, Exception: raise ValueError(     'Only "
                           "sparse matrices with 32-bit integer indices are accepted. Got %s indices.'      % "
                           'indices_datatype) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                 {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                            {'XXX TODO XXX': 'X.ndim <= 1'},
                                            {'type': 'object', 'laleNot': 'X/isSparse'},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.sparse.to_coo().getformat() != '
                                                                                   "'coo'"},
                                                                  {'type': 'object',
                                                                   'properties': {'key': {'not': {'enum': ['col',
                                                                                                           'row']}}}},
                                                                  {'XXX TODO XXX': 'getattr(X.sparse.to_coo(), '
                                                                                   "key).dtype in ['int32']"}]},
                                                       {'anyOf': [{'XXX TODO XXX': 'X.sparse.to_coo().getformat() == '
                                                                                   "'coo'"},
                                                                  {'XXX TODO XXX': 'X.sparse.to_coo().getformat() not '
                                                                                   "in ['csr', 'csc', 'bsr']"},
                                                                  {'type': 'object',
                                                                   'properties': {'key': {'not': {'enum': ['indices',
                                                                                                           'indptr']}}}},
                                                                  {'XXX TODO XXX': 'getattr(X.sparse.to_coo(), '
                                                                                   "key).dtype in ['int32']"}]}]}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                       {'XXX TODO XXX': 'X.ndim > 1'}]},
                                            {'type': 'object', 'laleNot': 'X/isSparse'},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "X.getformat() != 'coo'"},
                                                                  {'type': 'object',
                                                                   'properties': {'key': {'not': {'enum': ['col',
                                                                                                           'row']}}}},
                                                                  {'XXX TODO XXX': 'getattr(X, key).dtype in '
                                                                                   "['int32']"}]},
                                                       {'anyOf': [{'XXX TODO XXX': "X.getformat() == 'coo'"},
                                                                  {'XXX TODO XXX': "X.getformat() not in ['csr', "
                                                                                   "'csc', 'bsr']"},
                                                                  {'type': 'object',
                                                                   'properties': {'key': {'not': {'enum': ['indices',
                                                                                                           'indptr']}}}},
                                                                  {'XXX TODO XXX': 'getattr(X, key).dtype in '
                                                                                   "['int32']"}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).fit)'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).fit)'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).fit)'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).fit)'}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Pandas "
                           'DataFrame with mixed sparse extension arrays generated a sparse matrix with object dtype '
                           'which can not be converted to a scipy sparse matrix.Sparse extension arrays should all '
                           "have the same numeric type.'     ) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'C': {'type': 'number', 'minimum': 0}}},
                                 {'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not self._get_tags()['requires_y']"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'hasattr(getattr(X, '
                                                                                              "'dtype', None), "
                                                                                              "'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                         "'dtypes')"},
                                                                                        {'XXX TODO XXX': 'hasattr(X.dtypes, '
                                                                                                         "'__array__')"}]},
                                                                             {'XXX TODO XXX': 'not hasattr(X, '
                                                                                              "'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                             {'XXX TODO XXX': 'X.sparse.to_coo().dtype '
                                                                                              "!= np.dtype('object')"},
                                                                             {'XXX TODO XXX': 'len(set([dt.subtype.name '
                                                                                              'for dt in X.dtypes])) '
                                                                                              '<= 1'}]},
                                                                  {'anyOf': [{'XXX TODO XXX': 'not hasattr(getattr(X, '
                                                                                              "'dtype', None), "
                                                                                              "'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                         "'dtypes')"},
                                                                                        {'XXX TODO XXX': 'hasattr(X.dtypes, '
                                                                                                         "'__array__')"}]},
                                                                             {'XXX TODO XXX': 'not hasattr(X, '
                                                                                              "'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                             {'XXX TODO XXX': 'X.sparse.to_coo().dtype '
                                                                                              "!= np.dtype('object')"},
                                                                             {'XXX TODO XXX': 'len(set([dt.subtype.name '
                                                                                              'for dt in X.dtypes])) '
                                                                                              '<= 1'}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "self._get_tags()['requires_y']"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'hasattr(getattr(X, '
                                                                                              "'dtype', None), "
                                                                                              "'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                         "'dtypes')"},
                                                                                        {'XXX TODO XXX': 'hasattr(X.dtypes, '
                                                                                                         "'__array__')"}]},
                                                                             {'XXX TODO XXX': 'not hasattr(X, '
                                                                                              "'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                             {'XXX TODO XXX': 'X.sparse.to_coo().dtype '
                                                                                              "!= np.dtype('object')"},
                                                                             {'XXX TODO XXX': 'len(set([dt.subtype.name '
                                                                                              'for dt in X.dtypes])) '
                                                                                              '<= 1'}]},
                                                                  {'anyOf': [{'XXX TODO XXX': 'not hasattr(getattr(X, '
                                                                                              "'dtype', None), "
                                                                                              "'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                         "'dtypes')"},
                                                                                        {'XXX TODO XXX': 'hasattr(X.dtypes, '
                                                                                                         "'__array__')"}]},
                                                                             {'XXX TODO XXX': 'not hasattr(X, '
                                                                                              "'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                             {'XXX TODO XXX': 'X.sparse.to_coo().dtype '
                                                                                              "!= np.dtype('object')"},
                                                                             {'XXX TODO XXX': 'len(set([dt.subtype.name '
                                                                                              'for dt in X.dtypes])) '
                                                                                              '<= 1'}]}]}]}]}]},
                      {'anyOf': [{'type': 'object',
                                  'properties': {'C': {'type': 'number', 'maximum': 0, 'exclusiveMaximum': True}}},
                                 {'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not self._get_tags()['requires_y']"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'hasattr(getattr(X, '
                                                                                              "'dtype', None), "
                                                                                              "'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                         "'dtypes')"},
                                                                                        {'XXX TODO XXX': 'hasattr(X.dtypes, '
                                                                                                         "'__array__')"}]},
                                                                             {'XXX TODO XXX': 'not hasattr(X, '
                                                                                              "'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                             {'XXX TODO XXX': 'X.sparse.to_coo().dtype '
                                                                                              "!= np.dtype('object')"},
                                                                             {'XXX TODO XXX': 'len(set([dt.subtype.name '
                                                                                              'for dt in X.dtypes])) '
                                                                                              '<= 1'}]},
                                                                  {'anyOf': [{'XXX TODO XXX': 'not hasattr(getattr(X, '
                                                                                              "'dtype', None), "
                                                                                              "'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                         "'dtypes')"},
                                                                                        {'XXX TODO XXX': 'hasattr(X.dtypes, '
                                                                                                         "'__array__')"}]},
                                                                             {'XXX TODO XXX': 'not hasattr(X, '
                                                                                              "'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                             {'XXX TODO XXX': 'X.sparse.to_coo().dtype '
                                                                                              "!= np.dtype('object')"},
                                                                             {'XXX TODO XXX': 'len(set([dt.subtype.name '
                                                                                              'for dt in X.dtypes])) '
                                                                                              '<= 1'}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "self._get_tags()['requires_y']"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'hasattr(getattr(X, '
                                                                                              "'dtype', None), "
                                                                                              "'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                         "'dtypes')"},
                                                                                        {'XXX TODO XXX': 'hasattr(X.dtypes, '
                                                                                                         "'__array__')"}]},
                                                                             {'XXX TODO XXX': 'not hasattr(X, '
                                                                                              "'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                             {'XXX TODO XXX': 'X.sparse.to_coo().dtype '
                                                                                              "!= np.dtype('object')"},
                                                                             {'XXX TODO XXX': 'len(set([dt.subtype.name '
                                                                                              'for dt in X.dtypes])) '
                                                                                              '<= 1'}]},
                                                                  {'anyOf': [{'XXX TODO XXX': 'not hasattr(getattr(X, '
                                                                                              "'dtype', None), "
                                                                                              "'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                         "'dtypes')"},
                                                                                        {'XXX TODO XXX': 'hasattr(X.dtypes, '
                                                                                                         "'__array__')"}]},
                                                                             {'XXX TODO XXX': 'not hasattr(X, '
                                                                                              "'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                             {'XXX TODO XXX': 'X.sparse.to_coo().dtype '
                                                                                              "!= np.dtype('object')"},
                                                                             {'XXX TODO XXX': 'len(set([dt.subtype.name '
                                                                                              'for dt in X.dtypes])) '
                                                                                              '<= 1'}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data '
                           'not supported {} """.format(array)     ) from complex_warning ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                            {'XXX TODO XXX': 'X.ndim <= 1'},
                                            {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                       {'XXX TODO XXX': 'X.ndim > 1'}]},
                                            {'XXX TODO XXX': 'sp.issparse(X)'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with "
                           "dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                  {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                   "order='C', dtype=np.float64).ndim "
                                                                                   '< 3'}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                  {'XXX TODO XXX': "np.asarray(X, order='C', "
                                                                                   'dtype=np.float64).ndim < 3'}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                  {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                   "order='C', dtype=np.float64).ndim "
                                                                                   '< 3'}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                  {'XXX TODO XXX': "np.asarray(X, order='C', "
                                                                                   'dtype=np.float64).ndim < '
                                                                                   '3'}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array "
                           "with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, "
                           'array.shape, ensure_min_samples, context)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False)) >= '
                                                                                                         '1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64)) '
                                                                                                         '>= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False)) >= '
                                                                                                         '1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': '_num_samples(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64)) '
                                                                                                         '>= '
                                                                                                         '1'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False)) >= '
                                                                                                         '1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64)) '
                                                                                                         '>= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False)) >= '
                                                                                                         '1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': '_num_samples(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64)) '
                                                                                                         '>= '
                                                                                                         '1'}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array "
                           "with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, "
                           'array.shape, ensure_min_features, context)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= '
                                                                                                         '1'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= '
                                                                                                         '1'}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise '
                           'ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                            {'XXX TODO XXX': 'X.ndim <= 1'},
                                            {'type': 'object', 'laleNot': 'X/isSparse'},
                                            {'XXX TODO XXX': "not hasattr(X.sparse.to_coo(), 'dtype')"},
                                            {'XXX TODO XXX': 'X.sparse.to_coo().dtype is None'},
                                            {'XXX TODO XXX': "not hasattr(X.sparse.to_coo().dtype, 'kind')"},
                                            {'XXX TODO XXX': "X.sparse.to_coo().dtype.kind != 'c'"}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                       {'XXX TODO XXX': 'X.ndim > 1'}]},
                                            {'type': 'object', 'laleNot': 'X/isSparse'},
                                            {'XXX TODO XXX': "not hasattr(X, 'dtype')"},
                                            {'XXX TODO XXX': 'X.dtype is None'},
                                            {'XXX TODO XXX': "not hasattr(X.dtype, 'kind')"},
                                            {'XXX TODO XXX': "X.dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise '
                           'ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': 'not hasattr(X.dtypes, '
                                                                                   "'__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                         'all((False '
                                                                                                         'for '
                                                                                                         'np.float64 '
                                                                                                         'in '
                                                                                                         'list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(X, '
                                                                                                                               "'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim '
                                                                                                                               '<= '
                                                                                                                               '1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                                          "'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim '
                                                                                                                                          '> '
                                                                                                                                          '1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False '
                                                                                                         'for '
                                                                                                         'np.float64 '
                                                                                                         'in '
                                                                                                         'list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(X, '
                                                                                                                               "'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim '
                                                                                                                               '<= '
                                                                                                                               '1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                                          "'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim '
                                                                                                                                          '> '
                                                                                                                                          '1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                                             {'XXX TODO XXX': 'hasattr(X.dtypes, '
                                                                                              "'__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                         'hasattr(X, '
                                                                                                         "'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'dtype')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype '
                                                                                                         'is None'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype, '
                                                                                                         "'kind')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype.kind '
                                                                                                         "!= 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                    "'sparse')"},
                                                                                                   {'XXX TODO XXX': 'X.ndim '
                                                                                                                    '> '
                                                                                                                    '1'}]},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'dtype')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype '
                                                                                                         'is None'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype, '
                                                                                                         "'kind')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype.kind '
                                                                                                         '!= '
                                                                                                         "'c'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': 'not hasattr(X.dtypes, '
                                                                                   "'__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                         'all((False '
                                                                                                         'for '
                                                                                                         'np.float64 '
                                                                                                         'in '
                                                                                                         'list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(X, '
                                                                                                                               "'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim '
                                                                                                                               '<= '
                                                                                                                               '1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                                          "'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim '
                                                                                                                                          '> '
                                                                                                                                          '1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False '
                                                                                                         'for '
                                                                                                         'np.float64 '
                                                                                                         'in '
                                                                                                         'list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(X, '
                                                                                                                               "'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim '
                                                                                                                               '<= '
                                                                                                                               '1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                                          "'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim '
                                                                                                                                          '> '
                                                                                                                                          '1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                                             {'XXX TODO XXX': 'hasattr(X.dtypes, '
                                                                                              "'__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                         'hasattr(X, '
                                                                                                         "'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'dtype')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype '
                                                                                                         'is None'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype, '
                                                                                                         "'kind')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype.kind '
                                                                                                         "!= 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                    "'sparse')"},
                                                                                                   {'XXX TODO XXX': 'X.ndim '
                                                                                                                    '> '
                                                                                                                    '1'}]},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'dtype')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype '
                                                                                                         'is None'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype, '
                                                                                                         "'kind')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype.kind '
                                                                                                         '!= '
                                                                                                         "'c'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_check_large_sparse, Exception: raise ValueError(     'Only "
                           "sparse matrices with 32-bit integer indices are accepted. Got %s indices.'      % "
                           'indices_datatype) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                 {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                            {'XXX TODO XXX': 'X.ndim <= 1'},
                                            {'type': 'object', 'laleNot': 'X/isSparse'},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.sparse.to_coo().getformat() != '
                                                                                   "'coo'"},
                                                                  {'type': 'object',
                                                                   'properties': {'key': {'not': {'enum': ['col',
                                                                                                           'row']}}}},
                                                                  {'XXX TODO XXX': 'getattr(X.sparse.to_coo(), '
                                                                                   "key).dtype in ['int32']"}]},
                                                       {'anyOf': [{'XXX TODO XXX': 'X.sparse.to_coo().getformat() == '
                                                                                   "'coo'"},
                                                                  {'XXX TODO XXX': 'X.sparse.to_coo().getformat() not '
                                                                                   "in ['csr', 'csc', 'bsr']"},
                                                                  {'type': 'object',
                                                                   'properties': {'key': {'not': {'enum': ['indices',
                                                                                                           'indptr']}}}},
                                                                  {'XXX TODO XXX': 'getattr(X.sparse.to_coo(), '
                                                                                   "key).dtype in ['int32']"}]}]}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                       {'XXX TODO XXX': 'X.ndim > 1'}]},
                                            {'type': 'object', 'laleNot': 'X/isSparse'},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "X.getformat() != 'coo'"},
                                                                  {'type': 'object',
                                                                   'properties': {'key': {'not': {'enum': ['col',
                                                                                                           'row']}}}},
                                                                  {'XXX TODO XXX': 'getattr(X, key).dtype in '
                                                                                   "['int32']"}]},
                                                       {'anyOf': [{'XXX TODO XXX': "X.getformat() == 'coo'"},
                                                                  {'XXX TODO XXX': "X.getformat() not in ['csr', "
                                                                                   "'csc', 'bsr']"},
                                                                  {'type': 'object',
                                                                   'properties': {'key': {'not': {'enum': ['indices',
                                                                                                           'indptr']}}}},
                                                                  {'XXX TODO XXX': 'getattr(X, key).dtype in '
                                                                                   "['int32']"}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).fit)'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).fit)'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).fit)'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).fit)'}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Pandas "
                           'DataFrame with mixed sparse extension arrays generated a sparse matrix with object dtype '
                           'which can not be converted to a scipy sparse matrix.Sparse extension arrays should all '
                           "have the same numeric type.'     ) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'C': {'type': 'number', 'minimum': 0}}},
                                 {'type': 'object', 'properties': {'y': {'enum': [None]}}},
                                 {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                                 {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                       {'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                       {'XXX TODO XXX': 'X.ndim <= 1'},
                                                       {'XXX TODO XXX': 'X.sparse.to_coo().dtype != '
                                                                        "np.dtype('object')"},
                                                       {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in '
                                                                        'X.dtypes])) <= 1'}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), "
                                                                        "'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                       {'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                       {'XXX TODO XXX': 'X.ndim <= 1'},
                                                       {'XXX TODO XXX': 'X.sparse.to_coo().dtype != '
                                                                        "np.dtype('object')"},
                                                       {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in '
                                                                        'X.dtypes])) <= 1'}]}]}]},
                      {'anyOf': [{'type': 'object',
                                  'properties': {'C': {'type': 'number', 'maximum': 0, 'exclusiveMaximum': True}}},
                                 {'type': 'object', 'properties': {'y': {'enum': [None]}}},
                                 {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                                 {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                       {'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                       {'XXX TODO XXX': 'X.ndim <= 1'},
                                                       {'XXX TODO XXX': 'X.sparse.to_coo().dtype != '
                                                                        "np.dtype('object')"},
                                                       {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in '
                                                                        'X.dtypes])) <= 1'}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), "
                                                                        "'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                       {'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                       {'XXX TODO XXX': 'X.ndim <= 1'},
                                                       {'XXX TODO XXX': 'X.sparse.to_coo().dtype != '
                                                                        "np.dtype('object')"},
                                                       {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in '
                                                                        'X.dtypes])) <= 1'}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data '
                           'not supported {} """.format(array)     ) from complex_warning ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                            {'XXX TODO XXX': 'X.ndim <= 1'},
                                            {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                       {'XXX TODO XXX': 'X.ndim > 1'}]},
                                            {'XXX TODO XXX': 'sp.issparse(X)'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with "
                           "dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                  {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                   "order='C', dtype=np.float64).ndim "
                                                                                   '< 3'}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                  {'XXX TODO XXX': "np.asarray(X, order='C', "
                                                                                   'dtype=np.float64).ndim < 3'}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                  {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                   "order='C', dtype=np.float64).ndim "
                                                                                   '< 3'}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                  {'XXX TODO XXX': "np.asarray(X, order='C', "
                                                                                   'dtype=np.float64).ndim < '
                                                                                   '3'}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array "
                           "with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, "
                           'array.shape, ensure_min_samples, context)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False)) >= '
                                                                                                         '1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64)) '
                                                                                                         '>= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False)) >= '
                                                                                                         '1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': '_num_samples(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64)) '
                                                                                                         '>= '
                                                                                                         '1'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False)) >= '
                                                                                                         '1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64)) '
                                                                                                         '>= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False)) >= '
                                                                                                         '1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': '_num_samples(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64)) '
                                                                                                         '>= '
                                                                                                         '1'}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array "
                           "with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, "
                           'array.shape, ensure_min_features, context)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= '
                                                                                                         '1'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= '
                                                                                                         '1'}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise '
                           'ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                 {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                            {'XXX TODO XXX': 'X.ndim <= 1'},
                                            {'type': 'object', 'laleNot': 'X/isSparse'},
                                            {'XXX TODO XXX': "not hasattr(X.sparse.to_coo(), 'dtype')"},
                                            {'XXX TODO XXX': 'X.sparse.to_coo().dtype is None'},
                                            {'XXX TODO XXX': "not hasattr(X.sparse.to_coo().dtype, 'kind')"},
                                            {'XXX TODO XXX': "X.sparse.to_coo().dtype.kind != 'c'"}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                       {'XXX TODO XXX': 'X.ndim > 1'}]},
                                            {'type': 'object', 'laleNot': 'X/isSparse'},
                                            {'XXX TODO XXX': "not hasattr(X, 'dtype')"},
                                            {'XXX TODO XXX': 'X.dtype is None'},
                                            {'XXX TODO XXX': "not hasattr(X.dtype, 'kind')"},
                                            {'XXX TODO XXX': "X.dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise '
                           'ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                 {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': 'not hasattr(X.dtypes, '
                                                                                   "'__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                         'all((False '
                                                                                                         'for '
                                                                                                         'np.float64 '
                                                                                                         'in '
                                                                                                         'list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(X, '
                                                                                                                               "'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim '
                                                                                                                               '<= '
                                                                                                                               '1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                                          "'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim '
                                                                                                                                          '> '
                                                                                                                                          '1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False '
                                                                                                         'for '
                                                                                                         'np.float64 '
                                                                                                         'in '
                                                                                                         'list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(X, '
                                                                                                                               "'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim '
                                                                                                                               '<= '
                                                                                                                               '1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                                          "'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim '
                                                                                                                                          '> '
                                                                                                                                          '1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                                             {'XXX TODO XXX': 'hasattr(X.dtypes, '
                                                                                              "'__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                         'hasattr(X, '
                                                                                                         "'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'dtype')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype '
                                                                                                         'is None'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype, '
                                                                                                         "'kind')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype.kind '
                                                                                                         "!= 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                    "'sparse')"},
                                                                                                   {'XXX TODO XXX': 'X.ndim '
                                                                                                                    '> '
                                                                                                                    '1'}]},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'dtype')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype '
                                                                                                         'is None'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype, '
                                                                                                         "'kind')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype.kind '
                                                                                                         '!= '
                                                                                                         "'c'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': 'not hasattr(X.dtypes, '
                                                                                   "'__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                         'all((False '
                                                                                                         'for '
                                                                                                         'np.float64 '
                                                                                                         'in '
                                                                                                         'list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(X, '
                                                                                                                               "'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim '
                                                                                                                               '<= '
                                                                                                                               '1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                                          "'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim '
                                                                                                                                          '> '
                                                                                                                                          '1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False '
                                                                                                         'for '
                                                                                                         'np.float64 '
                                                                                                         'in '
                                                                                                         'list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(X, '
                                                                                                                               "'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim '
                                                                                                                               '<= '
                                                                                                                               '1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                                          "'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim '
                                                                                                                                          '> '
                                                                                                                                          '1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64), '
                                                                                                                               "'dtype')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype '
                                                                                                                               'is '
                                                                                                                               'None'},
                                                                                                              {'XXX TODO XXX': 'not '
                                                                                                                               'hasattr(np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype, '
                                                                                                                               "'kind')"},
                                                                                                              {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                                               "order='C', "
                                                                                                                               'dtype=np.float64).dtype.kind '
                                                                                                                               '!= '
                                                                                                                               "'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                                             {'XXX TODO XXX': 'hasattr(X.dtypes, '
                                                                                              "'__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not '
                                                                                                         'hasattr(X, '
                                                                                                         "'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'dtype')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype '
                                                                                                         'is None'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype, '
                                                                                                         "'kind')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype.kind '
                                                                                                         "!= 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(X, '
                                                                                                                    "'sparse')"},
                                                                                                   {'XXX TODO XXX': 'X.ndim '
                                                                                                                    '> '
                                                                                                                    '1'}]},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'dtype')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype '
                                                                                                         'is None'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype, '
                                                                                                         "'kind')"},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).dtype.kind '
                                                                                                         '!= '
                                                                                                         "'c'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_check_large_sparse, Exception: raise ValueError(     'Only "
                           "sparse matrices with 32-bit integer indices are accepted. Got %s indices.'      % "
                           'indices_datatype) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                 {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                 {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                            {'XXX TODO XXX': 'X.ndim <= 1'},
                                            {'type': 'object', 'laleNot': 'X/isSparse'},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.sparse.to_coo().getformat() != '
                                                                                   "'coo'"},
                                                                  {'type': 'object',
                                                                   'properties': {'key': {'not': {'enum': ['col',
                                                                                                           'row']}}}},
                                                                  {'XXX TODO XXX': 'getattr(X.sparse.to_coo(), '
                                                                                   "key).dtype in ['int32']"}]},
                                                       {'anyOf': [{'XXX TODO XXX': 'X.sparse.to_coo().getformat() == '
                                                                                   "'coo'"},
                                                                  {'XXX TODO XXX': 'X.sparse.to_coo().getformat() not '
                                                                                   "in ['csr', 'csc', 'bsr']"},
                                                                  {'type': 'object',
                                                                   'properties': {'key': {'not': {'enum': ['indices',
                                                                                                           'indptr']}}}},
                                                                  {'XXX TODO XXX': 'getattr(X.sparse.to_coo(), '
                                                                                   "key).dtype in ['int32']"}]}]}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                       {'XXX TODO XXX': 'X.ndim > 1'}]},
                                            {'type': 'object', 'laleNot': 'X/isSparse'},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "X.getformat() != 'coo'"},
                                                                  {'type': 'object',
                                                                   'properties': {'key': {'not': {'enum': ['col',
                                                                                                           'row']}}}},
                                                                  {'XXX TODO XXX': 'getattr(X, key).dtype in '
                                                                                   "['int32']"}]},
                                                       {'anyOf': [{'XXX TODO XXX': "X.getformat() == 'coo'"},
                                                                  {'XXX TODO XXX': "X.getformat() not in ['csr', "
                                                                                   "'csc', 'bsr']"},
                                                                  {'type': 'object',
                                                                   'properties': {'key': {'not': {'enum': ['indices',
                                                                                                           'indptr']}}}},
                                                                  {'XXX TODO XXX': 'getattr(X, key).dtype in '
                                                                                   "['int32']"}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                 {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).fit)'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).fit)'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).fit)'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).fit)'}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data '
                           'not supported {} """.format(array)     ) from complex_warning ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                 {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                            {'XXX TODO XXX': 'X.ndim <= 1'},
                                            {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                       {'XXX TODO XXX': 'X.ndim > 1'}]},
                                            {'XXX TODO XXX': 'sp.issparse(X)'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with "
                           "dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                 {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                  {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                   "order='C', dtype=np.float64).ndim "
                                                                                   '< 3'}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                  {'XXX TODO XXX': "np.asarray(X, order='C', "
                                                                                   'dtype=np.float64).ndim < 3'}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                  {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                   "order='C', dtype=np.float64).ndim "
                                                                                   '< 3'}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                  {'XXX TODO XXX': "np.asarray(X, order='C', "
                                                                                   'dtype=np.float64).ndim < '
                                                                                   '3'}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array "
                           "with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, "
                           'array.shape, ensure_min_samples, context)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                 {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False)) >= '
                                                                                                         '1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64)) '
                                                                                                         '>= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False)) >= '
                                                                                                         '1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': '_num_samples(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64)) '
                                                                                                         '>= '
                                                                                                         '1'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False)) >= '
                                                                                                         '1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64)) '
                                                                                                         '>= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False)) >= '
                                                                                                         '1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': '_num_samples(np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64)) '
                                                                                                         '>= '
                                                                                                         '1'}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array "
                           "with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, "
                           'array.shape, ensure_min_features, context)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                 {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= '
                                                                                                         '1'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_ensure_sparse_format(X, '
                                                                                                         "accept_sparse='csr', "
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'False).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= 1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                        {'XXX TODO XXX': 'np.asarray(X, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).ndim '
                                                                                                         '!= 2'},
                                                                                        {'XXX TODO XXX': 'array.shape[1] '
                                                                                                         '>= '
                                                                                                         '1'}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_assert_all_finite, Exception: raise '
                           'ValueError(msg_err.format(type_err, msg_dtype if msg_dtype is not     None else X.dtype)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                 {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'XXX TODO XXX': "_get_config()['assume_finite']"},
                      {'allOf': [{'XXX TODO XXX': "y.dtype.kind in 'fc'"},
                                 {'XXX TODO XXX': 'np.isfinite(_safe_accumulator_op(np.sum, y))'}]},
                      {'XXX TODO XXX': "y.dtype.kind not in 'fc'"},
                      {'XXX TODO XXX': 'np.isfinite(y).all()'}]},
           {'description': "From /utils/validation.py:None:_assert_all_finite, Exception: raise ValueError('Input "
                           "contains NaN') ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                 {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'XXX TODO XXX': "_get_config()['assume_finite']"},
                      {'allOf': [{'XXX TODO XXX': "y.dtype.kind in 'fc'"},
                                 {'XXX TODO XXX': 'np.isfinite(_safe_accumulator_op(np.sum, y))'}]},
                      {'XXX TODO XXX': "y.dtype.kind in 'fc'"},
                      {'XXX TODO XXX': "y.dtype != np.dtype('object')"},
                      {'XXX TODO XXX': 'not _object_dtype_isnan(y).any()'}]},
           {'description': "From /utils/validation.py:None:column_or_1d, Exception: raise ValueError('y should be a 1d "
                           "array, got an array of shape {} instead.'     .format(shape)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                 {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                 {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'XXX TODO XXX': "not hasattr(X, 'fit')"},
                      {'XXX TODO XXX': 'not callable(X.fit)'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                 {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'XXX TODO XXX': "hasattr(X, '__len__')"},
                      {'XXX TODO XXX': "hasattr(X, 'shape')"},
                      {'XXX TODO XXX': "hasattr(X, '__array__')"}]},
           {'description': "From /utils/validation.py:None:_num_samples, Exception: raise TypeError(     'Singleton "
                           "array %r cannot be considered a valid collection.' % x) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                 {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"},
                                            {'XXX TODO XXX': "hasattr(X, 'shape')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"},
                                                                  {'XXX TODO XXX': 'not hasattr(np.asarray(X), '
                                                                                   "'shape')"},
                                                                  {'XXX TODO XXX': 'np.asarray(X).shape is None'},
                                                                  {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]},
                                                       {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"},
                                                                  {'XXX TODO XXX': "not hasattr(X, 'shape')"},
                                                                  {'XXX TODO XXX': 'X.shape is None'},
                                                                  {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"},
                                                       {'XXX TODO XXX': "not hasattr(X, 'shape')"}]},
                                            {'XXX TODO XXX': "not hasattr(X, 'shape')"},
                                            {'XXX TODO XXX': 'X.shape is None'},
                                            {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) from '
                           'type_error ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                 {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"},
                                            {'XXX TODO XXX': "hasattr(X, 'shape')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"},
                                                                  {'allOf': [{'XXX TODO XXX': 'hasattr(np.asarray(X), '
                                                                                              "'shape')"},
                                                                             {'XXX TODO XXX': 'np.asarray(X).shape is '
                                                                                              'not None'}]}]},
                                                       {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"},
                                                                  {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"},
                                                                             {'XXX TODO XXX': 'X.shape is not '
                                                                                              'None'}]}]}]}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"},
                                                       {'XXX TODO XXX': "not hasattr(X, 'shape')"}]},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"},
                                                       {'XXX TODO XXX': 'X.shape is not None'}]}]},
                                 {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
           {'description': 'From /utils/validation.py:None:check_consistent_length, Exception: raise ValueError(     '
                           "'Found input variables with inconsistent numbers of samples: %r' % [int     (l) for l in "
                           'lengths]) ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'C': {'type': 'number', 'minimum': 0}}},
                                 {'type': 'object', 'properties': {'y': {'enum': [None]}}},
                                 {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                            {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                                 {'allOf': [{'anyOf': [{'type': 'object',
                                                        'properties': {'y': {'not': {'enum': [None]}}}},
                                                       {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in '
                                                                        'arrays if X is not None])) <= 1'}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                                                       {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in '
                                                                        'arrays if X is not None])) <= 1'}]}]}]},
                      {'anyOf': [{'type': 'object',
                                  'properties': {'C': {'type': 'number', 'maximum': 0, 'exclusiveMaximum': True}}},
                                 {'type': 'object', 'properties': {'y': {'enum': [None]}}},
                                 {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                            {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                                 {'allOf': [{'anyOf': [{'type': 'object',
                                                        'properties': {'y': {'not': {'enum': [None]}}}},
                                                       {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in '
                                                                        'arrays if X is not None])) <= 1'}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                                                       {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in '
                                                                        'arrays if X is not None])) <= 1'}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_X_y, Exception: raise ValueError('y cannot be None') ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}},
                                 {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}}]},
           {'description': "From /base.py:BaseEstimator:_validate_data, Exception: raise ValueError(     f'This "
                           '{self.__class__.__name__} estimator requires y to be passed, but the target y is '
                           "None.'     ) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "not self._get_tags()['requires_y']"}]},
           {'description': 'From /utils/class_weight.py:None:compute_class_weight, Exception: raise '
                           "ValueError('classes should include all valid labels that can be in y') ",
            'anyOf': [{'type': 'object',
                       'properties': {'loss': {'enum': ['epsilon_insensitive', 'squared_epsilon_insensitive']}}},
                      {'XXX TODO XXX': 'not set(y) - set(LabelEncoder().classes_)'}]},
           {'description': "From /utils/validation.py:None:check_random_state, Exception: raise ValueError(     '%r "
                           "cannot be used to seed a numpy.random.RandomState instance' % seed) ",
            'anyOf': [{'type': 'object', 'properties': {'random_state': {'enum': [None]}}},
                      {'XXX TODO XXX': 'self.random_state is np.random'},
                      {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]},
           {'description': "From /utils/validation.py:None:_check_large_sparse, Exception: raise ValueError(     'Only "
                           "sparse matrices with 32-bit integer indices are accepted. Got %s indices.'      % "
                           'indices_datatype) ',
            'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "X.getformat() != 'coo'"},
                                            {'type': 'object',
                                             'properties': {'key': {'not': {'enum': ['col', 'row']}}}},
                                            {'XXX TODO XXX': "getattr(X, key).dtype in ['int32']"}]},
                                 {'anyOf': [{'XXX TODO XXX': "X.getformat() == 'coo'"},
                                            {'XXX TODO XXX': "X.getformat() not in ['csr', 'csc', 'bsr']"},
                                            {'type': 'object',
                                             'properties': {'key': {'not': {'enum': ['indices', 'indptr']}}}},
                                            {'XXX TODO XXX': "getattr(X, key).dtype in ['int32']"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise '
                           'ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                            {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                            {'type': 'object', 'laleNot': 'X/isSparse'},
                                            {'XXX TODO XXX': "not hasattr(sample_weight.sparse.to_coo(), 'dtype')"},
                                            {'XXX TODO XXX': 'sample_weight.sparse.to_coo().dtype is None'},
                                            {'XXX TODO XXX': 'not hasattr(sample_weight.sparse.to_coo().dtype, '
                                                             "'kind')"},
                                            {'XXX TODO XXX': "sample_weight.sparse.to_coo().dtype.kind != 'c'"}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"},
                                                       {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                            {'type': 'object', 'laleNot': 'X/isSparse'},
                                            {'XXX TODO XXX': "not hasattr(sample_weight, 'dtype')"},
                                            {'XXX TODO XXX': 'sample_weight.dtype is None'},
                                            {'XXX TODO XXX': "not hasattr(sample_weight.dtype, 'kind')"},
                                            {'XXX TODO XXX': "sample_weight.dtype.kind != 'c'"}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A "
                           'sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a '
                           "dense numpy array.'     ) ",
            'anyOf': [{'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                      {'type': 'object', 'laleNot': 'X/isSparse'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not hasattr(sample_weight, '
                                                                                   "'sparse')"},
                                                                  {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(_ensure_sparse_format(sample_weight.sparse.to_coo(), '
                                                                                                         'False, '
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'True), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(_ensure_sparse_format(sample_weight.sparse.to_coo(), '
                                                                                                         'False, '
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(sample_weight.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(np.asarray(sample_weight.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).fit)'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(sample_weight, '
                                                                                              "'sparse')"},
                                                                             {'XXX TODO XXX': 'sample_weight.ndim > '
                                                                                              '1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(_ensure_sparse_format(sample_weight, '
                                                                                                         'False, '
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'True), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(_ensure_sparse_format(sample_weight, '
                                                                                                         'False, '
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(sample_weight, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(np.asarray(sample_weight, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).fit)'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(sample_weight, 'dtype', None), "
                                                             "'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not hasattr(sample_weight, '
                                                                                   "'sparse')"},
                                                                  {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(_ensure_sparse_format(sample_weight.sparse.to_coo(), '
                                                                                                         'False, '
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'True), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(_ensure_sparse_format(sample_weight.sparse.to_coo(), '
                                                                                                         'False, '
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(sample_weight.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(np.asarray(sample_weight.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).fit)'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(sample_weight, '
                                                                                              "'sparse')"},
                                                                             {'XXX TODO XXX': 'sample_weight.ndim > '
                                                                                              '1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(_ensure_sparse_format(sample_weight, '
                                                                                                         'False, '
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'True), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(_ensure_sparse_format(sample_weight, '
                                                                                                         'False, '
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'hasattr(np.asarray(sample_weight, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64), '
                                                                                                         "'fit')"},
                                                                                        {'XXX TODO XXX': 'not '
                                                                                                         'callable(np.asarray(sample_weight, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64).fit)'}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data '
                           'not supported {} """.format(array)     ) from complex_warning ',
            'anyOf': [{'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                            {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                            {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"},
                                                       {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                            {'XXX TODO XXX': 'sp.issparse(sample_weight)'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with "
                           "dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not hasattr(sample_weight, '
                                                                                   "'sparse')"},
                                                                  {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                  {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                  {'XXX TODO XXX': 'np.asarray(sample_weight.sparse.to_coo(), '
                                                                                   "order='C', dtype=np.float64).ndim "
                                                                                   '< 3'}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(sample_weight, '
                                                                                              "'sparse')"},
                                                                             {'XXX TODO XXX': 'sample_weight.ndim > '
                                                                                              '1'}]},
                                                                  {'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                  {'XXX TODO XXX': 'np.asarray(sample_weight, '
                                                                                   "order='C', dtype=np.float64).ndim "
                                                                                   '< 3'}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(sample_weight, 'dtype', None), "
                                                             "'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not hasattr(sample_weight, '
                                                                                   "'sparse')"},
                                                                  {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                  {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                  {'XXX TODO XXX': 'np.asarray(sample_weight.sparse.to_coo(), '
                                                                                   "order='C', dtype=np.float64).ndim "
                                                                                   '< 3'}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(sample_weight, '
                                                                                              "'sparse')"},
                                                                             {'XXX TODO XXX': 'sample_weight.ndim > '
                                                                                              '1'}]},
                                                                  {'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                  {'XXX TODO XXX': 'np.asarray(sample_weight, '
                                                                                   "order='C', dtype=np.float64).ndim "
                                                                                   '< 3'}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array "
                           "with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, "
                           'array.shape, ensure_min_samples, context)) ',
            'anyOf': [{'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not hasattr(sample_weight, '
                                                                                   "'sparse')"},
                                                                  {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight.sparse.to_coo(), '
                                                                                                         'False, '
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'True)) >= '
                                                                                                         '1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': '_num_samples(np.asarray(sample_weight.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64)) '
                                                                                                         '>= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(sample_weight, '
                                                                                              "'sparse')"},
                                                                             {'XXX TODO XXX': 'sample_weight.ndim > '
                                                                                              '1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight, '
                                                                                                         'False, '
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'True)) >= '
                                                                                                         '1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                                        {'XXX TODO XXX': '_num_samples(np.asarray(sample_weight, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64)) '
                                                                                                         '>= '
                                                                                                         '1'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(sample_weight, 'dtype', None), "
                                                             "'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"},
                                                       {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not hasattr(sample_weight, '
                                                                                   "'sparse')"},
                                                                  {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight.sparse.to_coo(), '
                                                                                                         'False, '
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'True)) >= '
                                                                                                         '1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                                        {'XXX TODO XXX': '_num_samples(np.asarray(sample_weight.sparse.to_coo(), '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64)) '
                                                                                                         '>= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': 'hasattr(sample_weight, '
                                                                                              "'sparse')"},
                                                                             {'XXX TODO XXX': 'sample_weight.ndim > '
                                                                                              '1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object',
                                                                                         'laleNot': 'X/isSparse'},
                                                                                        {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight, '
                                                                                                         'False, '
                                                                                                         'dtype=np.float64, '
                                                                                                         'False, True, '
                                                                                                         'True)) >= '
                                                                                                         '1'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                                        {'XXX TODO XXX': '_num_samples(np.asarray(sample_weight, '
                                                                                                         "order='C', "
                                                                                                         'dtype=np.float64)) '
                                                                                                         '>= '
                                                                                                         '1'}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"},
                      {'XXX TODO XXX': "hasattr(X, 'shape')"},
                      {'XXX TODO XXX': "hasattr(X, '__array__')"}]},
           {'description': "From /utils/validation.py:None:_num_samples, Exception: raise TypeError(     'Singleton "
                           "array %r cannot be considered a valid collection.' % x) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"},
                                 {'XXX TODO XXX': "hasattr(X, 'shape')"},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"},
                                                       {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"},
                                                       {'XXX TODO XXX': 'np.asarray(X).shape is None'},
                                                       {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]},
                                            {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"},
                                                       {'XXX TODO XXX': "not hasattr(X, 'shape')"},
                                                       {'XXX TODO XXX': 'X.shape is None'},
                                                       {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"},
                                            {'XXX TODO XXX': "not hasattr(X, 'shape')"}]},
                                 {'XXX TODO XXX': "not hasattr(X, 'shape')"},
                                 {'XXX TODO XXX': 'X.shape is None'},
                                 {'XXX TODO XXX': 'len(X.shape) != 0'}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) from '
                           'type_error ',
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"},
                                 {'XXX TODO XXX': "hasattr(X, 'shape')"},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"},
                                                                  {'XXX TODO XXX': 'np.asarray(X).shape is not '
                                                                                   'None'}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"},
                                                                  {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"},
                                            {'XXX TODO XXX': "not hasattr(X, 'shape')"}]},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"},
                                            {'XXX TODO XXX': 'X.shape is not None'}]}]},
                      {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]},
           {'description': "From /utils/validation.py:None:_check_sample_weight, Exception: raise ValueError('Sample "
                           "weights must be 1D array or scalar') ",
            'anyOf': [{'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                      {'XXX TODO XXX': 'check_array(sample_weight, False, False, dtype=[np.float64, np.float32], '
                                       "order='C', False).ndim == 1"}]},
           {'description': 'From /utils/validation.py:None:_check_sample_weight, Exception: raise '
                           "ValueError('sample_weight.shape == {}, expected {}!'.format(     sample_weight.shape, "
                           '(n_samples,))) ',
            'anyOf': [{'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                      {'XXX TODO XXX': 'check_array(sample_weight, False, False, dtype=[np.float64, np.float32], '
                                       "order='C', False).shape == [_num_samples(X)]"}]},
           {'description': 'From /svm/_base.py:None:_get_liblinear_solver_type, Exception: raise ValueError(     '
                           "'Unsupported set of arguments: %s, Parameters: penalty=%r, loss=%r, dual=%r'      % "
                           '(error_string, penalty, loss, dual)) ',
            'anyOf': [{'type': 'object', 'properties': {'loss': {'enum': ['logistic_regression']}}},
                      {'allOf': [{'type': 'object', 'properties': {'loss': {'enum': ['hinge']}}},
                                 {'type': 'object', 'properties': {'dual': {'enum': [True]}}}]},
                      {'type': 'object', 'properties': {'loss': {'enum': ['squared_hinge']}}},
                      {'allOf': [{'type': 'object', 'properties': {'loss': {'enum': ['epsilon_insensitive']}}},
                                 {'type': 'object', 'properties': {'dual': {'enum': [True]}}}]},
                      {'type': 'object', 'properties': {'loss': {'enum': ['squared_epsilon_insensitive']}}}]},
           {'description': "From /svm/_base.py:None:_fit_liblinear, Exception: raise ValueError(     'This solver "
                           'needs samples of at least 2 classes in the data, but the data contains only one class: '
                           "%r'      % classes_[0]) ",
            'anyOf': [{'type': 'object',
                       'properties': {'loss': {'enum': ['epsilon_insensitive', 'squared_epsilon_insensitive']}}},
                      {'XXX TODO XXX': 'len(LabelEncoder().classes_) >= 2'}]},
           {'description': "From /svm/_base.py:None:_fit_liblinear, Exception: raise ValueError(     'Intercept "
                           'scaling is %r but needs to be greater than 0. To disable fitting an intercept, set '
                           "fit_intercept=False.'      % intercept_scaling) ",
            'anyOf': [{'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                      {'type': 'object',
                       'properties': {'intercept_scaling': {'type': 'number',
                                                            'minimum': 0,
                                                            'exclusiveMinimum': True}}}]},
           {'description': "From /svm/_classes.py:LinearSVR:fit, Exception: raise ValueError('Penalty term must be "
                           "positive; got (C=%r)' % self.C) ",
            'type': 'object',
            'properties': {'C': {'type': 'number', 'minimum': 0}}}]}
