{'description': 'A random forest classifier.',
 'allOf': [{'type': 'object',
            'required': ['class_weight'],
            'relevantToOptimizer': ['n_estimators',
                                    'criterion',
                                    'max_depth',
                                    'min_samples_split',
                                    'min_samples_leaf',
                                    'max_features'],
            'additionalProperties': False,
            'properties': {'n_estimators': {'default': 100,
                                            'description': 'The number of trees in the forest.',
                                            'type': 'integer',
                                            'minimumForOptimizer': 10,
                                            'maximumForOptimizer': 100},
                           'criterion': {'enum': ['gini', 'entropy'],
                                         'default': 'gini',
                                         'description': 'The function to measure the quality of a split.'},
                           'max_depth': {'anyOf': [{'type': 'integer',
                                                    'minimum': 1,
                                                    'minimumForOptimizer': 3,
                                                    'maximumForOptimizer': 5},
                                                   {'enum': [None],
                                                    'description': 'Nodes are expanded until all leaves are pure or '
                                                                   'until all leaves contain less than '
                                                                   'min_samples_split samples.'}],
                                         'default': None,
                                         'description': 'The maximum depth of the tree.'},
                           'min_samples_split': {'anyOf': [{'type': 'integer',
                                                            'minimum': 2,
                                                            'laleMaximum': 'X/maxItems',
                                                            'minimumForOptimizer': 2,
                                                            'maximumForOptimizer': 5,
                                                            'default': 2,
                                                            'description': 'Consider min_samples_split as the minimum '
                                                                           'number.'},
                                                           {'type': 'number',
                                                            'minimum': 0.0,
                                                            'exclusiveMinimum': True,
                                                            'maximum': 1.0,
                                                            'minimumForOptimizer': 0.01,
                                                            'maximumForOptimizer': 0.5,
                                                            'default': 0.05,
                                                            'description': 'min_samples_split is a fraction and '
                                                                           'ceil(min_samples_split * n_samples) are '
                                                                           'the minimum number of samples for each '
                                                                           'split.'}],
                                                 'default': 2,
                                                 'description': 'The minimum number of samples required to split an '
                                                                'internal node.'},
                           'min_samples_leaf': {'anyOf': [{'type': 'integer',
                                                           'minimum': 1,
                                                           'laleMaximum': 'X/maxItems',
                                                           'minimumForOptimizer': 1,
                                                           'maximumForOptimizer': 5,
                                                           'default': 1,
                                                           'description': 'Consider min_samples_leaf as the minimum '
                                                                          'number.'},
                                                          {'type': 'number',
                                                           'minimum': 0.0,
                                                           'exclusiveMinimum': True,
                                                           'maximum': 0.5,
                                                           'minimumForOptimizer': 0.01,
                                                           'default': 0.05,
                                                           'description': 'min_samples_leaf is a fraction and '
                                                                          'ceil(min_samples_leaf * n_samples) are the '
                                                                          'minimum number of samples for each node.'}],
                                                'default': 1,
                                                'description': 'The minimum number of samples required to be at a leaf '
                                                               'node.'},
                           'min_weight_fraction_leaf': {'type': 'number',
                                                        'minimum': 0.0,
                                                        'maximum': 0.5,
                                                        'default': 0.0,
                                                        'description': 'The minimum weighted fraction of the sum total '
                                                                       'of weights (of all the input samples) required '
                                                                       'to be at a leaf node. Samples have equal '
                                                                       'weight when sample_weight is not provided.'},
                           'max_features': {'anyOf': [{'type': 'integer',
                                                       'minimum': 2,
                                                       'laleMaximum': 'X/items/maxItems',
                                                       'forOptimizer': False,
                                                       'description': 'Consider max_features features at each split.'},
                                                      {'type': 'number',
                                                       'minimum': 0.0,
                                                       'exclusiveMinimum': True,
                                                       'maximum': 1.0,
                                                       'distribution': 'uniform',
                                                       'minimumForOptimizer': 0.01,
                                                       'default': 0.5,
                                                       'description': 'max_features is a fraction and int(max_features '
                                                                      '* n_features) features are considered at each '
                                                                      'split.'},
                                                      {'enum': ['auto', 'sqrt', 'log2', None]}],
                                            'default': 'auto',
                                            'description': 'The number of features to consider when looking for the '
                                                           'best split.'},
                           'max_leaf_nodes': {'anyOf': [{'type': 'integer',
                                                         'minimum': 1,
                                                         'minimumForOptimizer': 3,
                                                         'maximumForOptimizer': 1000},
                                                        {'enum': [None],
                                                         'description': 'Unlimited number of leaf nodes.'}],
                                              'default': None,
                                              'description': 'Grow trees with max_leaf_nodes in best-first fashion. '
                                                             'Best nodes are defined as relative reduction in '
                                                             'impurity.'},
                           'min_impurity_decrease': {'type': 'number',
                                                     'minimum': 0.0,
                                                     'maximumForOptimizer': 10.0,
                                                     'default': 0.0,
                                                     'description': 'A node will be split if this split induces a '
                                                                    'decrease of the impurity greater than or equal to '
                                                                    'this value.'},
                           'min_impurity_split': {'anyOf': [{'type': 'number', 'minimum': 0.0}, {'enum': [None]}],
                                                  'default': None,
                                                  'description': 'Threshold for early stopping in tree growth.'},
                           'bootstrap': {'type': 'boolean',
                                         'default': True,
                                         'description': 'Whether bootstrap samples are used when building trees. If '
                                                        'False, the whole datset is used to build each tree.'},
                           'oob_score': {'type': 'boolean',
                                         'default': False,
                                         'description': 'Whether to use out-of-bag samples to estimate the '
                                                        'generalization accuracy.'},
                           'n_jobs': {'anyOf': [{'description': '1 unless in joblib.parallel_backend context.',
                                                 'enum': [None]},
                                                {'description': 'Use all processors.', 'enum': [-1]},
                                                {'description': 'Number of CPU cores.',
                                                 'type': 'integer',
                                                 'minimum': 1}],
                                      'default': None,
                                      'description': 'The number of jobs to run in parallel for both fit and predict.'},
                           'random_state': {'description': 'Seed of pseudo-random number generator.',
                                            'anyOf': [{'laleType': 'numpy.random.RandomState'},
                                                      {'description': 'RandomState used by np.random', 'enum': [None]},
                                                      {'description': 'Explicit seed.', 'type': 'integer'}],
                                            'default': None},
                           'verbose': {'type': 'integer',
                                       'default': 0,
                                       'description': 'Controls the verbosity when fitting and predicting.'},
                           'warm_start': {'type': 'boolean',
                                          'default': False,
                                          'description': 'When set to True, reuse the solution of the previous call to '
                                                         'fit and add more estimators to the ensemble, otherwise, just '
                                                         'fit a whole new forest.'},
                           'class_weight': {'anyOf': [{'type': 'object', 'additionalProperties': {'type': 'number'}},
                                                      {'type': 'array',
                                                       'item': {'type': 'object',
                                                                'additionalProperties': {'type': 'number'}}},
                                                      {'enum': ['balanced', 'balanced_subsample', None]}],
                                            'description': 'Weights associated with classes in the form '
                                                           '``{class_label: weight}``.',
                                            'default': None},
                           'ccp_alpha': {'default': 0.0,
                                         'description': 'Complexity parameter used for Minimal Cost-Complexity '
                                                        'Pruning. The subtree with the largest cost complexity that is '
                                                        'smaller than ccp_alpha will be chosen. By default, no pruning '
                                                        'is performed.',
                                         'forOptimizer': False,
                                         'type': 'number',
                                         'minimum': 0.0,
                                         'maximumForOptimizer': 0.1},
                           'max_samples': {'default': None,
                                           'description': 'If bootstrap is True, the number of samples to draw from X '
                                                          'to train each base estimator.',
                                           'anyOf': [{'description': 'Draw X.shape[0] samples.', 'enum': [None]},
                                                     {'description': 'Draw max_samples samples.',
                                                      'type': 'integer',
                                                      'minimum': 1},
                                                     {'description': 'Draw max_samples * X.shape[0] samples.',
                                                      'type': 'number',
                                                      'minimum': 0.0,
                                                      'exclusiveMinimum': True,
                                                      'maximum': 1.0,
                                                      'exclusiveMaximum': True}]}}},
           {'description': 'This classifier does not support sparse labels.',
            'type': 'object',
            'laleNot': 'y/isSparse'}]}
