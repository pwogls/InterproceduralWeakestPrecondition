>>> LinearDiscriminantAnalysis  ( transformer )
1000 trials: 0 passed, 1000 failed.
+--------------------+----------------+-----------------+----------------+-----------------+-----------+--------+
|        name        | true_positives | false_positives | true_negatives | false_negatives | precision | recall |
+--------------------+----------------+-----------------+----------------+-----------------+-----------+--------+
|    handwritten     |       -        |        -        |       -        |        -        |     -     |   -    |
|  docstrings_(2/2)  |       0        |       741       |      259       |        0        |    0.0    |  INF   |
| WPanalysis_(10/94) |       0        |       484       |      516       |        0        |    0.0    |  INF   |
+--------------------+----------------+-----------------+----------------+-----------------+-----------+--------+
Note:
	handwritten_(A/B) means there are B total constraints, A of which are good constraints (no TODO).
	WP aboved are interesting wp, ie. 2+ hp or 1 + X/y. For overall WP, there are 94 total, 10 are good. All WP constraints are at /output/JSS_all_exceptions/

> Hyperparams: 
 ['n_components', 'shrinkage', 'solver', 'tol', 'priors', 'store_covariance', 'covariance_estimator']

> relevantToOptimizer:
 ['solver', 'n_components', 'tol', 'shrinkage']

> handwritten
False Positives (-):
True Negatives (-):

> docstring
False Positives (741):
	(741) A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.
True Negatives (259):
	(259) A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.

> WPanalysis
False Positives (484):
	(484) A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.
True Negatives (516):
	(516) A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.

> Failed constraints stats:
handwritten:

docstring:
freq = 259
{'description': "shrinkage, only with 'lsqr' and 'eigen' solvers",
 'anyOf': [{'type': 'object', 'properties': {'shrinkage': {'enum': [None]}}},
           {'type': 'object', 'properties': {'solver': {'enum': ['lsqr', 'eigen']}}}]}

WPanalysis:
freq = 349
{'description': 'From /discriminant_analysis.py:LinearDiscriminantAnalysis:fit, Exception: raise ValueError(     '
                "'n_components cannot be larger than min(n_features, n_classes - 1).') ",
 'anyOf': [{'type': 'object', 'properties': {'n_components': {'enum': [None]}}},
           {'allOf': [{'XXX TODO XXX': 'self.n_components <= len(unique_labels(y)) - 1'},
                      {'type': 'object', 'properties': {'n_components': {'maximum': 64}}}]}]}
freq = 167
{'description': 'From /discriminant_analysis.py:LinearDiscriminantAnalysis:fit, Exception: raise '
                "NotImplementedError('shrinkage not supported') ",
 'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['svd']}}}},
           {'type': 'object', 'properties': {'shrinkage': {'enum': [None]}}}]}
