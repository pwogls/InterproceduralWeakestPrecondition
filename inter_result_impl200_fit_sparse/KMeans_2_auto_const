{'allOf': [{'type': 'object',
            'required': ['n_clusters',
                         'init',
                         'n_init',
                         'max_iter',
                         'tol',
                         'precompute_distances',
                         'verbose',
                         'random_state',
                         'copy_x',
                         'n_jobs',
                         'algorithm'],
            'relevantToOptimizer': ['n_clusters',
                                    'init',
                                    'n_init',
                                    'max_iter',
                                    'tol',
                                    'precompute_distances',
                                    'copy_x',
                                    'algorithm'],
            'additionalProperties': False,
            'properties': {'n_clusters': {'type': 'integer',
                                          'minimumForOptimizer': 2,
                                          'maximumForOptimizer': 8,
                                          'distribution': 'uniform',
                                          'default': 8,
                                          'description': 'The number of clusters to form as well as the number of '
                                                         'centroids to generate.'},
                           'init': {'enum': ['k-means++', 'random'],
                                    'default': 'k-means++',
                                    'description': "Method for initialization, defaults to 'k-means++':  'k-means++' : "
                                                   'selects initial cluster centers for k-mean clustering in a smart '
                                                   'way to speed up convergence'},
                           'n_init': {'type': 'integer',
                                      'minimumForOptimizer': 3,
                                      'maximumForOptimizer': 10,
                                      'distribution': 'uniform',
                                      'default': 10,
                                      'description': 'Number of time the k-means algorithm will be run with different '
                                                     'centroid seeds'},
                           'max_iter': {'type': 'integer',
                                        'minimumForOptimizer': 10,
                                        'maximumForOptimizer': 1000,
                                        'distribution': 'uniform',
                                        'default': 300,
                                        'description': 'Maximum number of iterations of the k-means algorithm for a '
                                                       'single run.'},
                           'tol': {'type': 'number',
                                   'minimumForOptimizer': 1e-08,
                                   'maximumForOptimizer': 0.01,
                                   'distribution': 'loguniform',
                                   'default': 0.0001,
                                   'description': 'Relative tolerance with regards to inertia to declare convergence'},
                           'precompute_distances': {'enum': ['auto', True, False],
                                                    'default': 'auto',
                                                    'description': 'Precompute distances (faster but takes more '
                                                                   'memory)'},
                           'verbose': {'type': 'integer', 'default': 0, 'description': 'Verbosity mode.'},
                           'random_state': {'anyOf': [{'type': 'integer'},
                                                      {'laleType': 'numpy.random.RandomState'},
                                                      {'enum': [None]}],
                                            'default': None,
                                            'description': 'Determines random number generation for centroid '
                                                           'initialization'},
                           'copy_x': {'type': 'boolean',
                                      'default': True,
                                      'description': 'When pre-computing distances it is more numerically accurate to '
                                                     'center the data first'},
                           'n_jobs': {'anyOf': [{'type': 'integer'}, {'enum': [None]}],
                                      'default': 1,
                                      'description': 'The number of jobs to use for the computation'},
                           'algorithm': {'XXX TODO XXX': '"auto", "full" or "elkan", default="auto"',
                                         'description': 'K-means algorithm to use',
                                         'enum': ['auto'],
                                         'default': 'auto'}}}]}
