[767,
 233,
 ['handwritten_(1/1)', 490, 233, 0, 277, 0.677731673582296, 0.6388526727509778],
 ['docstrings_(0/0)', 767, 233, 0, 0, 0.767, 1.0],
 ['WPanalysis_(3/36)', 767, 0, 233, 0, 1.0, 1.0],
 ['accept_sparse', 'check_inverse', 'validate', 'func', 'inverse_func', 'kw_args', 'inv_kw_args'],
 {'algorithm': 0,
  'learning_rate': 0,
  'n_estimators': 0,
  'base_estimator': 0,
  'random_state': 0,
  'loss': 0,
  'bootstrap': 0,
  'bootstrap_features': 0,
  'max_features': 0,
  'max_samples': 0,
  'oob_score': 0,
  'warm_start': 0,
  'n_jobs': 0,
  'verbose': 0,
  'criterion': 0,
  'max_depth': 0,
  'max_leaf_nodes': 0,
  'min_impurity_decrease': 0,
  'min_samples_leaf': 0,
  'min_samples_split': 0,
  'min_weight_fraction_leaf': 0,
  'min_impurity_split': 0,
  'class_weight': 0,
  'ccp_alpha': 0,
  'affinity': 0,
  'compute_full_tree': 0,
  'linkage': 0,
  'n_clusters': 0,
  'memory': 0,
  'connectivity': 0,
  'pooling_func': 0,
  'distance_threshold': 0,
  'compute_distances': 0,
  'accept_sparse': 0,
  'check_inverse': 0,
  'validate': 0,
  'func': 0,
  'inverse_func': 0,
  'kw_args': 0,
  'inv_kw_args': 0},
 {'algorithm': 0,
  'learning_rate': 0,
  'n_estimators': 0,
  'base_estimator': 0,
  'random_state': 0,
  'loss': 0,
  'bootstrap': 0,
  'bootstrap_features': 0,
  'max_features': 0,
  'max_samples': 0,
  'oob_score': 0,
  'warm_start': 0,
  'n_jobs': 0,
  'verbose': 0,
  'criterion': 0,
  'max_depth': 0,
  'max_leaf_nodes': 0,
  'min_impurity_decrease': 0,
  'min_samples_leaf': 0,
  'min_samples_split': 0,
  'min_weight_fraction_leaf': 0,
  'min_impurity_split': 0,
  'class_weight': 0,
  'ccp_alpha': 0,
  'affinity': 0,
  'compute_full_tree': 0,
  'linkage': 0,
  'n_clusters': 0,
  'memory': 0,
  'connectivity': 0,
  'pooling_func': 0,
  'distance_threshold': 0,
  'compute_distances': 0,
  'accept_sparse': 0,
  'check_inverse': 0,
  'validate': 0,
  'func': 0,
  'inverse_func': 0,
  'kw_args': 0,
  'inv_kw_args': 0},
 {'algorithm': 0,
  'learning_rate': 0,
  'n_estimators': 0,
  'base_estimator': 0,
  'random_state': 0,
  'loss': 0,
  'bootstrap': 0,
  'bootstrap_features': 0,
  'max_features': 0,
  'max_samples': 0,
  'oob_score': 0,
  'warm_start': 0,
  'n_jobs': 0,
  'verbose': 0,
  'criterion': 0,
  'max_depth': 0,
  'max_leaf_nodes': 0,
  'min_impurity_decrease': 0,
  'min_samples_leaf': 0,
  'min_samples_split': 0,
  'min_weight_fraction_leaf': 0,
  'min_impurity_split': 0,
  'class_weight': 0,
  'ccp_alpha': 0,
  'affinity': 0,
  'compute_full_tree': 0,
  'linkage': 0,
  'n_clusters': 0,
  'memory': 0,
  'connectivity': 0,
  'pooling_func': 0,
  'distance_threshold': 0,
  'compute_distances': 0,
  'accept_sparse': 0,
  'check_inverse': 0,
  'validate': 0,
  'func': 0,
  'inverse_func': 0,
  'kw_args': 0,
  'inv_kw_args': 0},
 [{'description': 'If validate is False, then accept_sparse has no effect.',
   'anyOf': [{'type': 'object', 'properties': {'validate': {'not': {'enum': [False]}}}},
             {'type': 'object', 'properties': {'accept_sparse': {'enum': [False]}}}]}],
 {'0': 277},
 [],
 {},
 [{'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse "
                  'matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy '
                  "array.'     ) ",
   'anyOf': [{'type': 'object', 'properties': {'validate': {'enum': [False]}}},
             {'type': 'object', 'not': {}},
             {'type': 'object', 'properties': {'accept_sparse': {'not': {'enum': [False]}}}}]}],
 {'0': 233}]
