{'allOf': [{'type': 'object',
            'required': ['alpha', 'fit_intercept', 'solver'],
            'relevantToOptimizer': ['alpha', 'copy_X', 'fit_intercept', 'max_iter', 'normalize', 'solver', 'tol'],
            'additionalProperties': False,
            'properties': {'alpha': {'description': 'Regularization strength; larger values specify stronger regularization.', 'anyOf': [{'type': 'number', 'minimum': 0.0, 'exclusiveMinimum': True, 'minimumForOptimizer': 1e-05, 'maximumForOptimizer': 10.0, 'distribution': 'loguniform'}, {'type': 'array', 'description': 'Penalties specific to the targets.', 'items': {'type': 'number', 'minimum': 0.0, 'exclusiveMinimum': True}, 'forOptimizer': False}], 'default': 1.0},
                           'fit_intercept': {'type': 'boolean', 'default': True, 'description': 'Whether to calculate the intercept for this model.'},
                           'normalize': {'type': 'boolean', 'default': False, 'description': 'This parameter is ignored when ``fit_intercept`` is set to False.'},
                           'copy_X': {'type': 'boolean', 'default': True, 'description': 'If True, X will be copied; else, it may be overwritten.'},
                           'max_iter': {'anyOf': [{'type': 'integer', 'minimumForOptimizer': 10, 'maximumForOptimizer': 1000}, {'enum': [None]}], 'default': None, 'description': 'Maximum number of iterations for conjugate gradient solver.'},
                           'tol': {'type': 'number', 'minimumForOptimizer': 1e-08, 'maximumForOptimizer': 0.01, 'distribution': 'loguniform', 'default': 0.001, 'description': 'Precision of the solution.'},
                           'solver': {'enum': ['auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga'], 'default': 'auto', 'description': 'Solver to use in the computational routines.'},
                           'class_weight': {'anyOf': [{'type': 'object'}, {'enum': ['balanced', None]}], 'description': 'Weights associated with classes in the form ``{class_label: weight}``.', 'default': None},
                           'random_state': {'anyOf': [{'type': 'integer'}, {'laleType': 'numpy.random.RandomState'}, {'enum': [None]}], 'default': None, 'description': 'The seed of the pseudo random number generator to use when shuffling'}}},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=np.float64).fit)'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=numeric).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(numeric, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=numeric).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=numeric).fit)'}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=np.float64).fit)'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, None).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, None).fit)'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, None).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, None).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=numeric).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(numeric, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=numeric).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=numeric).fit)'}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'X.sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "X.sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X, 'dtype')"}, {'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "not hasattr(X.dtype, 'kind')"}, {'XXX TODO XXX': "X.dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in numeric'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in numeric'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                        {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in numeric'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in numeric'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                        {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is not False'}]},
           {'description': 'From /utils/validation.py:None:_ensure_sparse_format, Exception: raise ValueError(     "When providing \'accept_sparse\' as a tuple or list, it must contain at least one string value."     ) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': 'len([_get_valid_accept_sparse(sparse.issparse(X), self.solver)]) != 0'}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': 'len(_get_valid_accept_sparse(sparse.issparse(X), self.solver)) != 0'}]}]}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': 'len([_get_valid_accept_sparse(sparse.issparse(X), self.solver)]) != 0'}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': 'len(_get_valid_accept_sparse(sparse.issparse(X), self.solver)) != 0'}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_sparse_format, Exception: raise ValueError(     "Parameter \'accept_sparse\' should be a string, boolean or list of strings. You provided \'accept_sparse={}\'."     .format(accept_sparse)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is True'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is True'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Pandas DataFrame with mixed sparse extension arrays generated a sparse matrix with object dtype which can not be converted to a scipy sparse matrix.Sparse extension arrays should all have the same numeric type.'     ) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not self._get_tags()['requires_y']"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                                                  {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                                                  {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None).kind != 'O'"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None).kind == 'O'"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "self._get_tags()['requires_y']"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                                                  {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                                                  {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None).kind != 'O'"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None).kind == 'O'"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError(     "Unable to convert array of bytes/strings into decimal numbers with dtype=\'numeric\'"     ) from e ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in numeric'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in numeric'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in numeric'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in numeric'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).ndim < 3'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).ndim < 3'}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).ndim < 3'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim < 3'}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, None).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).ndim < 3'}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=numeric)) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(numeric, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=numeric).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=numeric)) >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, None).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, None)) >= 1'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, None).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, None)) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=numeric)) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(numeric, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=numeric).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=numeric)) >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, None).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=np.float64).fit)'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=numeric).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(numeric, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=numeric).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=numeric).fit)'}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=np.float64).fit)'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, None).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, None).fit)'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, None).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, None).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=numeric).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(numeric, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=numeric).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=numeric).fit)'}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'X.sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "X.sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X, 'dtype')"}, {'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "not hasattr(X.dtype, 'kind')"}, {'XXX TODO XXX': "X.dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in numeric'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in numeric'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                        {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in numeric'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in numeric'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                        {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is not False'}]},
           {'description': 'From /utils/validation.py:None:_ensure_sparse_format, Exception: raise ValueError(     "When providing \'accept_sparse\' as a tuple or list, it must contain at least one string value."     ) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': 'len([_get_valid_accept_sparse(sparse.issparse(X), self.solver)]) != 0'}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': 'len(_get_valid_accept_sparse(sparse.issparse(X), self.solver)) != 0'}]}]}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': 'len([_get_valid_accept_sparse(sparse.issparse(X), self.solver)]) != 0'}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': 'len(_get_valid_accept_sparse(sparse.issparse(X), self.solver)) != 0'}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_sparse_format, Exception: raise ValueError(     "Parameter \'accept_sparse\' should be a string, boolean or list of strings. You provided \'accept_sparse={}\'."     .format(accept_sparse)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is True'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is True'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Pandas DataFrame with mixed sparse extension arrays generated a sparse matrix with object dtype which can not be converted to a scipy sparse matrix.Sparse extension arrays should all have the same numeric type.'     ) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None).kind != 'O'"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None).kind == 'O'"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError(     "Unable to convert array of bytes/strings into decimal numbers with dtype=\'numeric\'"     ) from e ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in numeric'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in numeric'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in numeric'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in numeric'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).ndim < 3'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).ndim < 3'}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).ndim < 3'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim < 3'}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, None).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).ndim < 3'}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=numeric)) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(numeric, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=numeric).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=numeric)) >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, None).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, None)) >= 1'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, None).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, None)) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=numeric)) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(numeric, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=numeric).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=numeric)) >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, None).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=np.float64).fit)'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=numeric).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(numeric, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=numeric).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=numeric).fit)'}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=np.float64).fit)'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, None).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, None).fit)'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, None).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, None).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=numeric).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(numeric, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=numeric).astype(np.float64).fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=numeric).fit)'}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'X.sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "X.sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X, 'dtype')"}, {'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "not hasattr(X.dtype, 'kind')"}, {'XXX TODO XXX': "X.dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in numeric'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in numeric'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                        {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in numeric'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in numeric'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                                        {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=numeric).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is not False'}]},
           {'description': 'From /utils/validation.py:None:_ensure_sparse_format, Exception: raise ValueError(     "When providing \'accept_sparse\' as a tuple or list, it must contain at least one string value."     ) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': 'len([_get_valid_accept_sparse(sparse.issparse(X), self.solver)]) != 0'}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': 'len(_get_valid_accept_sparse(sparse.issparse(X), self.solver)) != 0'}]}]}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': 'len([_get_valid_accept_sparse(sparse.issparse(X), self.solver)]) != 0'}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': 'len(_get_valid_accept_sparse(sparse.issparse(X), self.solver)) != 0'}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_sparse_format, Exception: raise ValueError(     "Parameter \'accept_sparse\' should be a string, boolean or list of strings. You provided \'accept_sparse={}\'."     .format(accept_sparse)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is True'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is True'}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError(     "Unable to convert array of bytes/strings into decimal numbers with dtype=\'numeric\'"     ) from e ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in numeric'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in numeric'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in numeric'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in numeric'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(numeric, np.dtype) for numeric in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).ndim < 3'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).ndim < 3'}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).ndim < 3'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim < 3'}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, None).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).ndim < 3'}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=numeric)) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(numeric, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=numeric).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=numeric)) >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, None).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, None)) >= 1'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, None).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, None)) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=numeric)) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(numeric, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=numeric).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=numeric)) >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(X, 'dtype', None) not in numeric"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, None).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in numeric"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(numeric, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(numeric, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=numeric).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=numeric, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(numeric).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(X, None).astype(numeric, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(numeric).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'numeric': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'numeric': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'numeric': {'type': 'string'}}}, {'type': 'object', 'properties': {'numeric': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(X, None, dtype=numeric).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=numeric).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(y, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(y, 'dtypes')"}, {'XXX TODO XXX': "hasattr(y.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(y.sparse.to_coo(), accept_sparse='csr', None, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(y.sparse.to_coo(), accept_sparse='csr', None, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(y.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(y.sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(y.sparse.to_coo(), None, None).fit)'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(y, accept_sparse='csr', None, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(y, accept_sparse='csr', None, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(y)'}, {'XXX TODO XXX': "not hasattr(np.asarray(y, None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(y, None, None).fit)'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(y, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(y, 'dtypes')"}, {'XXX TODO XXX': "hasattr(y.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(y.sparse.to_coo(), accept_sparse='csr', None, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(y.sparse.to_coo(), accept_sparse='csr', None, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(y.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(y.sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(y.sparse.to_coo(), None, None).fit)'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(y, accept_sparse='csr', None, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(y, accept_sparse='csr', None, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(y)'}, {'XXX TODO XXX': "not hasattr(np.asarray(y, None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(y, None, None).fit)'}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(y.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'y.sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(y.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "y.sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(y, 'dtype')"}, {'XXX TODO XXX': 'y.dtype is None'}, {'XXX TODO XXX': "not hasattr(y.dtype, 'kind')"}, {'XXX TODO XXX': "y.dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(y, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(y.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for None in list(y.dtypes)))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(y.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(y.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(y.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(y.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(y.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(y)'}, {'XXX TODO XXX': "not hasattr(np.asarray(y, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(y, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(y, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(y, None, None).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for None in list(y.dtypes)))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(y.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(y.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(y.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(y.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(y.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(y)'}, {'XXX TODO XXX': "not hasattr(np.asarray(y, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(y, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(y, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(y, None, None).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'dtypes')"}, {'XXX TODO XXX': "hasattr(y.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(y.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(y.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(y.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(y.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(y.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(y)'}, {'XXX TODO XXX': "not hasattr(np.asarray(y, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(y, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(y, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(y, None, None).dtype.kind != 'c'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(y, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(y.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for None in list(y.dtypes)))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(y.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(y.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(y.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(y.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(y.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(y)'}, {'XXX TODO XXX': "not hasattr(np.asarray(y, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(y, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(y, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(y, None, None).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for None in list(y.dtypes)))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(y.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(y.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(y.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(y.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(y.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(y)'}, {'XXX TODO XXX': "not hasattr(np.asarray(y, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(y, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(y, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(y, None, None).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'dtypes')"}, {'XXX TODO XXX': "hasattr(y.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(y.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(y.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(y.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(y.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(y.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(y)'}, {'XXX TODO XXX': "not hasattr(np.asarray(y, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(y, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(y, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(y, None, None).dtype.kind != 'c'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Pandas DataFrame with mixed sparse extension arrays generated a sparse matrix with object dtype which can not be converted to a scipy sparse matrix.Sparse extension arrays should all have the same numeric type.'     ) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(y, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(y, 'dtypes')"}, {'XXX TODO XXX': "hasattr(y.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'XXX TODO XXX': "y.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in y.dtypes])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(y, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(y, 'dtypes')"}, {'XXX TODO XXX': "hasattr(y.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'XXX TODO XXX': "y.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in y.dtypes])) <= 1'}]}]}]},
                                 {'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(y, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(y, 'dtypes')"}, {'XXX TODO XXX': "hasattr(y.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'XXX TODO XXX': "y.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in y.dtypes])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(y, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(y, 'dtypes')"}, {'XXX TODO XXX': "hasattr(y.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'XXX TODO XXX': "y.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in y.dtypes])) <= 1'}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(y.sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(y)'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(y, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(y, 'dtypes')"}, {'XXX TODO XXX': "hasattr(y.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(y.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(y.sparse.to_coo(), None, None).ndim < 3'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(y)'}, {'XXX TODO XXX': 'np.asarray(y, None, None).ndim < 3'}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(y, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(y, 'dtypes')"}, {'XXX TODO XXX': "hasattr(y.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(y.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(y.sparse.to_coo(), None, None).ndim < 3'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(y)'}, {'XXX TODO XXX': 'np.asarray(y, None, None).ndim < 3'}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(y, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(y, 'dtypes')"}, {'XXX TODO XXX': "hasattr(y.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(y.sparse.to_coo(), accept_sparse='csr', None, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(y.sparse.to_coo())'}, {'XXX TODO XXX': '_num_samples(np.asarray(y.sparse.to_coo(), None, None)) >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(y, accept_sparse='csr', None, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(y)'}, {'XXX TODO XXX': '_num_samples(np.asarray(y, None, None)) >= 1'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(y, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(y, 'dtypes')"}, {'XXX TODO XXX': "hasattr(y.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(y.sparse.to_coo(), accept_sparse='csr', None, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(y.sparse.to_coo())'}, {'XXX TODO XXX': '_num_samples(np.asarray(y.sparse.to_coo(), None, None)) >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(y, accept_sparse='csr', None, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(y)'}, {'XXX TODO XXX': '_num_samples(np.asarray(y, None, None)) >= 1'}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(y, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(y, 'dtypes')"}, {'XXX TODO XXX': "hasattr(y.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(y.sparse.to_coo(), accept_sparse='csr', None, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(y.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(y.sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(y, accept_sparse='csr', None, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(y)'}, {'XXX TODO XXX': 'np.asarray(y, None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(y, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(y, 'dtypes')"}, {'XXX TODO XXX': "hasattr(y.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(y.sparse.to_coo(), accept_sparse='csr', None, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(y.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(y.sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(y, 'sparse')"}, {'XXX TODO XXX': 'y.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(y, accept_sparse='csr', None, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(y)'}, {'XXX TODO XXX': 'np.asarray(y, None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]},
           {'description': "From /utils/validation.py:None:_num_samples, Exception: raise TypeError(     'Singleton array %r cannot be considered a valid collection.' % x) ", 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) from type_error ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
           {'description': "From /utils/validation.py:None:check_consistent_length, Exception: raise ValueError(     'Found input variables with inconsistent numbers of samples: %r' % [int     (l) for l in lengths]) ", 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]},
           {'description': "From /utils/validation.py:None:check_X_y, Exception: raise ValueError('y cannot be None') ", 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}}]},
           {'description': "From /base.py:BaseEstimator:_validate_data, Exception: raise ValueError(     f'This {self.__class__.__name__} estimator requires y to be passed, but the target y is None.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "not self._get_tags()['requires_y']"}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                 {'XXX TODO XXX': 'X.dtype in [np.float32, np.float64]'},
                                 {'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                                 {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).fit)"}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight, False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight, False, dtype=np.float64, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', dtype=np.float64).fit)"}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).fit)"}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight, False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight, False, dtype=np.float64, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', dtype=np.float64).fit)"}]}]}]}]}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': 'X.dtype not in [np.float32, np.float64]'}]},
                                 {'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                                 {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is not None'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                   {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                   {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                              {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).fit)"}]}]}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                   {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight, False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight, False, dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', dtype=dtype[0]).fit)"}]}]}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is None"},
                                                                                                   {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) not in [np.float64, np.float32]"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, None, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', None), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', None).fit)"}]}]}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight, False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight, False, None, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', None), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', None).fit)"}]}]}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                         {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                    {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).fit)"}]}]}]}]}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                                         {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight, False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight, False, dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', dtype=dtype[0]).fit)"}]}]}]}]}]}]}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                                   {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                         {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                                                                    {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).fit)"}]}]}]}]}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                                         {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight, False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight, False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                                                                    {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', dtype=np.float64).fit)"}]}]}]}]}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                                               {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                                               {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                                          {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                           {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                           {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                                {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                           {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).fit)"}]}]}]}]}]}]}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                                                               {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight, False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight, False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                                          {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                           {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                           {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                                {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', dtype=dtype[0]).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', dtype=dtype[0]).fit)"}]}]}]}]}]}]}]}]}]},
                                                                                                              {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                                               {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                                               {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=X.dtype, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=X.dtype, False, True, True).fit)'}]},
                                                                                                                                                          {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                                                                                                                                                           {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"},
                                                                                                                                                                                           {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                                {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]},
                                                                                                                                                                                           {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).fit)"}]}]}]}]}]}]}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                                                               {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight, False, dtype=X.dtype, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight, False, dtype=X.dtype, False, True, True).fit)'}]},
                                                                                                                                                          {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                                                                                                                                                           {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"},
                                                                                                                                                                                           {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                                {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', dtype=X.dtype).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', dtype=X.dtype).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', dtype=X.dtype), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', dtype=X.dtype).fit)"}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                                   {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                         {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                                                                    {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).fit)"}]}]}]}]}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                                         {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight, False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight, False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                                                                    {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', dtype=np.float64).fit)"}]}]}]}]}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is None"},
                                                                                                                                               {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) not in X.dtype"},
                                                                                                                                               {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                                                                     {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, None, False, True, True).fit)'}]},
                                                                                                                                                                                {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', None).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', None).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', None), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', None).fit)"}]}]}]}]}]},
                                                                                                                                                          {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight, False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight, False, None, False, True, True).fit)'}]},
                                                                                                                                                                                {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', None).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', None).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', None), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', None).fit)"}]}]}]}]}]}]}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) in X.dtype"}]},
                                                                                                                                               {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                                                                     {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                                                                {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                                                                                                                                           {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                                                 {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                                                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).fit)"}]}]}]}]}]}]}]},
                                                                                                                                                          {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight, False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight, False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                                                                {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                                                                                                                                           {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                                                 {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                                                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', dtype=dtype[0]).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', dtype=dtype[0]).fit)"}]}]}]}]}]}]}]}]}]}]}]},
                                                                                                              {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                                               {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                                               {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=X.dtype, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=X.dtype, False, True, True).fit)'}]},
                                                                                                                                                          {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                                                                                                                                                           {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"},
                                                                                                                                                                                           {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                                {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]},
                                                                                                                                                                                           {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).fit)"}]}]}]}]}]}]}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                                                               {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(sample_weight, False, dtype=X.dtype, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(sample_weight, False, dtype=X.dtype, False, True, True).fit)'}]},
                                                                                                                                                          {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                                                                                                                                                           {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"},
                                                                                                                                                                                           {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                                {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', dtype=X.dtype).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', dtype=X.dtype).astype(np.float64).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(sample_weight, order='C', dtype=X.dtype), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(sample_weight, order='C', dtype=X.dtype).fit)"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'anyOf': [{'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}}, {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(sample_weight.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'sample_weight.sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(sample_weight.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "sample_weight.sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(sample_weight, 'dtype')"}, {'XXX TODO XXX': 'sample_weight.dtype is None'}, {'XXX TODO XXX': "not hasattr(sample_weight.dtype, 'kind')"}, {'XXX TODO XXX': "sample_weight.dtype.kind != 'c'"}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}}, {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Pandas DataFrame with mixed sparse extension arrays generated a sparse matrix with object dtype which can not be converted to a scipy sparse matrix.Sparse extension arrays should all have the same numeric type.'     ) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                 {'XXX TODO XXX': 'X.dtype in [np.float32, np.float64]'},
                                 {'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                                 {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(sample_weight, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': "sample_weight.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in sample_weight.dtypes])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(sample_weight, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': "sample_weight.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in sample_weight.dtypes])) <= 1'}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': 'X.dtype not in [np.float32, np.float64]'}]},
                                 {'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                                 {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is not None'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(sample_weight, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': "sample_weight.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in sample_weight.dtypes])) <= 1'}]},
                                                                  {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(sample_weight, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) not in [np.float64, np.float32]"}, {'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': "sample_weight.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in sample_weight.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) in [np.float64, np.float32]"}]}, {'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': "sample_weight.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in sample_weight.dtypes])) <= 1'}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': "sample_weight.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in sample_weight.dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'}, {'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': "sample_weight.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in sample_weight.dtypes])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'}, {'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': "sample_weight.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in sample_weight.dtypes])) <= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None).kind != 'O'"}, {'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': "sample_weight.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in sample_weight.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None).kind == 'O'"}]}, {'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': "sample_weight.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in sample_weight.dtypes])) <= 1'}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) not in X.dtype"}, {'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': "sample_weight.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in sample_weight.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) in X.dtype"}]}, {'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': "sample_weight.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in sample_weight.dtypes])) <= 1'}]}]}]},
                                                                                                              {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'}, {'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': "sample_weight.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in sample_weight.dtypes])) <= 1'}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}}, {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError(     "Unable to convert array of bytes/strings into decimal numbers with dtype=\'numeric\'"     ) from e ',
            'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': 'X.dtype not in [np.float32, np.float64]'}]},
                      {'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                      {'XXX TODO XXX': 'X.dtype is None'},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(sample_weight.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(X.dtype, np.dtype) for X.dtype in list(sample_weight.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(sample_weight.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(sample_weight.dtypes)) not in X.dtype'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(sample_weight.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(sample_weight.dtypes)) in X.dtype'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(X.dtype, np.dtype) for X.dtype in list(sample_weight.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(sample_weight.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(X.dtype, np.dtype) for X.dtype in list(sample_weight.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(sample_weight.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(sample_weight.dtypes)) not in X.dtype'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(sample_weight.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(sample_weight.dtypes)) in X.dtype'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(X.dtype, np.dtype) for X.dtype in list(sample_weight.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) not in X.dtype"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) in X.dtype"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) not in X.dtype"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) in X.dtype"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                 {'XXX TODO XXX': 'X.dtype in [np.float32, np.float64]'},
                                 {'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                                 {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(sample_weight, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).ndim < 3"}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(sample_weight, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).ndim < 3"}]}]}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': 'X.dtype not in [np.float32, np.float64]'}]},
                                 {'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                                 {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is not None'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).ndim < 3"}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).ndim < 3"}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', None).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', None).ndim < 3"}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).ndim < 3"}]}]}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).ndim < 3"}]}]}]}]}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                                   {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).ndim < 3"}]}]}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).ndim < 3"}]}]}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                                               {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                                               {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                                                                                               {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                                          {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).ndim < 3"}]}]}]}]}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                                                               {'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                                                                                               {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                                          {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).ndim < 3"}]}]}]}]}]}]}]},
                                                                                                              {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                                               {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                                               {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                                                                                               {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                                          {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).ndim < 3"}]}]}]}]}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                                                               {'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                                                                                               {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                                          {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).ndim < 3"}]}]}]}]}]}]}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                                   {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).ndim < 3"}]}]}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).ndim < 3"}]}]}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is None"},
                                                                                                                                               {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) not in X.dtype"},
                                                                                                                                               {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', None).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', None).ndim < 3"}]}]}]},
                                                                                                                                                          {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', None).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', None).ndim < 3"}]}]}]}]}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) in X.dtype"}]},
                                                                                                                                               {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                                                                     {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                                                                     {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                                                                {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).ndim < 3"}]}]}]}]}]},
                                                                                                                                                          {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                                                                                     {'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                                                                {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).ndim < 3"}]}]}]}]}]}]}]}]}]},
                                                                                                              {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                                               {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                                               {'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                                                                                               {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                                          {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).ndim < 3"}]}]}]}]}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                                                               {'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                                                                                               {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                                          {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).ndim < 3"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                 {'XXX TODO XXX': 'X.dtype in [np.float32, np.float64]'},
                                 {'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                                 {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64)) >= 1"}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight, False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', dtype=np.float64)) >= 1"}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64)) >= 1"}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight, False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', dtype=np.float64)) >= 1"}]}]}]}]}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': 'X.dtype not in [np.float32, np.float64]'}]},
                                 {'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}},
                                 {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is not None'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0])) >= 1"}]}]}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight, False, dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', dtype=dtype[0])) >= 1"}]}]}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is None"},
                                                                                                   {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) not in [np.float64, np.float32]"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', None)) >= 1"}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight, False, None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', None)) >= 1"}]}]}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0])) >= 1"}]}]}]}]}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight, False, dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', dtype=dtype[0])) >= 1"}]}]}]}]}]}]}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                                   {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                         {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64)) >= 1"}]}]}]}]}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight, False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', dtype=np.float64)) >= 1"}]}]}]}]}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                                               {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                                               {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                                          {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                                {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0])) >= 1"}]}]}]}]}]}]}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                                                               {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight, False, dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                                          {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                                {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', dtype=dtype[0]).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', dtype=dtype[0])) >= 1"}]}]}]}]}]}]}]}]}]},
                                                                                                              {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                                               {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                                               {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=X.dtype, False, True, True)) >= 1'}]},
                                                                                                                                                          {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                                {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype)) >= 1"}]}]}]}]}]}]}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                                                               {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight, False, dtype=X.dtype, False, True, True)) >= 1'}]},
                                                                                                                                                          {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                                {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', dtype=X.dtype).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', dtype=X.dtype)) >= 1"}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(sample_weight, 'dtype', None), 'kind')"},
                                                                             {'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'dtypes')"}, {'XXX TODO XXX': "hasattr(sample_weight.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                                   {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                         {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=np.float64)) >= 1"}]}]}]}]}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight, False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', dtype=np.float64)) >= 1"}]}]}]}]}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is None"},
                                                                                                                                               {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) not in X.dtype"},
                                                                                                                                               {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', None).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', None)) >= 1"}]}]}]}]}]},
                                                                                                                                                          {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight, False, None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', None).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', None)) >= 1"}]}]}]}]}]}]}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(sample_weight, 'dtype', None) in X.dtype"}]},
                                                                                                                                               {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                                                                     {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                                                                {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                                                                                                                                           {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                                                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=dtype[0])) >= 1"}]}]}]}]}]}]}]},
                                                                                                                                                          {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight, False, dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                                                                {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                                                                                                                                           {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C').astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                                                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', dtype=dtype[0]).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', dtype=dtype[0])) >= 1"}]}]}]}]}]}]}]}]}]}]}]},
                                                                                                              {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(sample_weight, 'sparse')"},
                                                                                                                                               {'XXX TODO XXX': 'sample_weight.ndim <= 1'},
                                                                                                                                               {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight.sparse.to_coo(), False, dtype=X.dtype, False, True, True)) >= 1'}]},
                                                                                                                                                          {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight.sparse.to_coo())'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                                {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight.sparse.to_coo(), order='C', dtype=X.dtype)) >= 1"}]}]}]}]}]}]}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(sample_weight, 'sparse')"}, {'XXX TODO XXX': 'sample_weight.ndim > 1'}]},
                                                                                                                                               {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(sample_weight, False, dtype=X.dtype, False, True, True)) >= 1'}]},
                                                                                                                                                          {'anyOf': [{'XXX TODO XXX': 'sp.issparse(sample_weight)'},
                                                                                                                                                                     {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C').astype(X.dtype, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                                {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', dtype=X.dtype).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(sample_weight, order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(sample_weight, order='C', dtype=X.dtype)) >= 1"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ', 'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ', 'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]},
           {'description': "From /utils/validation.py:None:_num_samples, Exception: raise TypeError(     'Singleton array %r cannot be considered a valid collection.' % x) ", 'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) from type_error ', 'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]},
           {'description': "From /utils/validation.py:None:_check_sample_weight, Exception: raise ValueError('Sample weights must be 1D array or scalar') ", 'anyOf': [{'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}}, {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}}, {'XXX TODO XXX': "check_array(sample_weight, False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
           {'description': "From /utils/validation.py:None:_check_sample_weight, Exception: raise ValueError('sample_weight.shape == {}, expected {}!'.format(     sample_weight.shape, (n_samples,))) ", 'anyOf': [{'type': 'object', 'properties': {'sample_weight': {'enum': [None]}}}, {'type': 'object', 'properties': {'sample_weight': {'type': 'number'}}}, {'XXX TODO XXX': "check_array(sample_weight, False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
           {'description': "From /utils/validation.py:None:column_or_1d, Exception: raise ValueError('y should be a 1d array, got an array of shape {} instead.'     .format(shape)) ", 'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).y_type_.startswith('multilabel')"},
           {'description': "From /utils/class_weight.py:None:compute_class_weight, Exception: raise ValueError('classes should include all valid labels that can be in y') ", 'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}}, {'XXX TODO XXX': 'k not in range(y.shape[1])'}, {'XXX TODO XXX': 'not set(y[[:, k]]) - set(np.unique(y[[:, k]]))'}]},
           {'description': "From /utils/class_weight.py:None:compute_class_weight, Exception: raise ValueError('classes should have valid labels that are in y') ", 'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}}, {'XXX TODO XXX': 'k not in range(y.shape[1])'}, {'allOf': [{'anyOf': [{'allOf': [{'type': 'object', 'properties': {'class_weight': {'not': {'enum': ['balanced']}}}}, {'XXX TODO XXX': 'y.shape[1] != 1'}]}, {'type': 'object', 'properties': {'class_weight': {'enum': [None]}}}, {'XXX TODO XXX': 'len(self.class_weight) == 0'}, {'type': 'object', 'properties': {'class_weight': {'not': {'enum': ['balanced']}}}}, {'XXX TODO XXX': 'all(np.in1d(np.unique(y[[:, k]]), LabelEncoder().classes_))'}]}, {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': ['balanced']}}}, {'XXX TODO XXX': 'y.shape[1] == 1'}, {'XXX TODO XXX': 'class_weight[k] is None'}, {'XXX TODO XXX': 'len(class_weight[k]) == 0'}, {'XXX TODO XXX': "class_weight[k] != 'balanced'"}, {'XXX TODO XXX': 'all(np.in1d(np.unique(y[[:, k]]), LabelEncoder().classes_))'}]}]}]},
           {'description': 'From /utils/class_weight.py:None:compute_class_weight, Exception: raise ValueError("class_weight must be dict, \'balanced\', or None, got: %r" %     class_weight) ', 'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}}, {'XXX TODO XXX': 'k not in range(y.shape[1])'}, {'allOf': [{'anyOf': [{'allOf': [{'type': 'object', 'properties': {'class_weight': {'not': {'enum': ['balanced']}}}}, {'XXX TODO XXX': 'y.shape[1] != 1'}]}, {'type': 'object', 'properties': {'class_weight': {'enum': [None]}}}, {'XXX TODO XXX': 'len(self.class_weight) == 0'}, {'type': 'object', 'properties': {'class_weight': {'enum': ['balanced']}}}, {'XXX TODO XXX': 'isinstance(self.class_weight, dict)'}]}, {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': ['balanced']}}}, {'XXX TODO XXX': 'y.shape[1] == 1'}, {'XXX TODO XXX': 'class_weight[k] is None'}, {'XXX TODO XXX': 'len(class_weight[k]) == 0'}, {'XXX TODO XXX': "class_weight[k] == 'balanced'"}, {'XXX TODO XXX': 'isinstance(class_weight[k], dict)'}]}]}]},
           {'description': "From /utils/class_weight.py:None:compute_class_weight, Exception: raise ValueError('Class label {} not present.'.format(c)) ",
            'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}}, {'XXX TODO XXX': 'k not in range(y.shape[1])'}, {'allOf': [{'anyOf': [{'allOf': [{'type': 'object', 'properties': {'class_weight': {'not': {'enum': ['balanced']}}}}, {'XXX TODO XXX': 'y.shape[1] != 1'}]}, {'type': 'object', 'properties': {'class_weight': {'enum': [None]}}}, {'XXX TODO XXX': 'len(self.class_weight) == 0'}, {'type': 'object', 'properties': {'class_weight': {'enum': ['balanced']}}}, {'XXX TODO XXX': 'c not in self.class_weight'}, {'allOf': [{'XXX TODO XXX': 'np.searchsorted(np.unique(y[[:, k]]), c) < len(np.unique(y[[:, k]]))'}, {'XXX TODO XXX': 'classes[i] == c'}]}]}, {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': ['balanced']}}}, {'XXX TODO XXX': 'y.shape[1] == 1'}, {'XXX TODO XXX': 'class_weight[k] is None'}, {'XXX TODO XXX': 'len(class_weight[k]) == 0'}, {'XXX TODO XXX': "class_weight[k] == 'balanced'"}, {'XXX TODO XXX': 'c not in class_weight[k]'}, {'allOf': [{'XXX TODO XXX': 'np.searchsorted(np.unique(y[[:, k]]), c) < len(np.unique(y[[:, k]]))'}, {'XXX TODO XXX': 'classes[i] == c'}]}]}]}]},
           {'description': 'From /utils/class_weight.py:None:compute_sample_weight, Exception: raise ValueError(     \'The only valid preset for class_weight is "balanced". Given "%s".\' %     class_weight) ', 'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}}, {'type': 'object', 'properties': {'class_weight': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'class_weight': {'enum': ['balanced']}}}]},
           {'description': "From /utils/class_weight.py:None:compute_sample_weight, Exception: raise ValueError(     'For multi-output, class_weight should be a list of dicts, or a valid string.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}}, {'type': 'object', 'properties': {'class_weight': {'type': 'string'}}}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'allOf': [{'XXX TODO XXX': "hasattr(self.class_weight, '__iter__')"}, {'XXX TODO XXX': 'isinstance(self.class_weight, dict)'}]}]},
           {'description': "From /utils/class_weight.py:None:compute_sample_weight, Exception: raise ValueError(     'For multi-output, number of elements in class_weight should match number of outputs.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}}, {'type': 'object', 'properties': {'class_weight': {'type': 'string'}}}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': 'len(self.class_weight) == y.shape[1]'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                  {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, None).fit)'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, None).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'X.sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "X.sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X, 'dtype')"}, {'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "not hasattr(X.dtype, 'kind')"}, {'XXX TODO XXX': "X.dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in [np.float64, np.float32]'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in [np.float64, np.float32]'}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in [np.float64, np.float32]'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in [np.float64, np.float32]'}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is not False'}]},
           {'description': 'From /utils/validation.py:None:_ensure_sparse_format, Exception: raise ValueError(     "When providing \'accept_sparse\' as a tuple or list, it must contain at least one string value."     ) ',
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': 'len([_get_valid_accept_sparse(sparse.issparse(X), self.solver)]) != 0'}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': 'len(_get_valid_accept_sparse(sparse.issparse(X), self.solver)) != 0'}]}]}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': 'len([_get_valid_accept_sparse(sparse.issparse(X), self.solver)]) != 0'}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': 'len(_get_valid_accept_sparse(sparse.issparse(X), self.solver)) != 0'}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_sparse_format, Exception: raise ValueError(     "Parameter \'accept_sparse\' should be a string, boolean or list of strings. You provided \'accept_sparse={}\'."     .format(accept_sparse)) ',
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is True'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is True'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Pandas DataFrame with mixed sparse extension arrays generated a sparse matrix with object dtype which can not be converted to a scipy sparse matrix.Sparse extension arrays should all have the same numeric type.'     ) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).y_type_.startswith('multilabel')"},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                                       {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not self._get_tags()['requires_y']"},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': "self._get_tags()['requires_y']"},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]}]}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                                       {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not self._get_tags()['requires_y']"},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': "self._get_tags()['requires_y']"},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not LabelBinarizer(pos_label=1, neg_label=-1).y_type_.startswith('multilabel')"},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                                       {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not self._get_tags()['requires_y']"},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': "self._get_tags()['requires_y']"},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]}]}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                                       {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not self._get_tags()['requires_y']"},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': "self._get_tags()['requires_y']"},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim < 3'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim < 3'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, None)) >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, None)) >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                  {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'},
                      {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) != 'no_validation'"},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                  {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, None).fit)'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, None).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'}, {'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) != 'no_validation'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'X.sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "X.sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X, 'dtype')"}, {'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "not hasattr(X.dtype, 'kind')"}, {'XXX TODO XXX': "X.dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'},
                      {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) != 'no_validation'"},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in [np.float64, np.float32]'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in [np.float64, np.float32]'}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in [np.float64, np.float32]'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in [np.float64, np.float32]'}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'}, {'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) != 'no_validation'"}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is not False'}]},
           {'description': 'From /utils/validation.py:None:_ensure_sparse_format, Exception: raise ValueError(     "When providing \'accept_sparse\' as a tuple or list, it must contain at least one string value."     ) ',
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'},
                      {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) != 'no_validation'"},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': 'len([_get_valid_accept_sparse(sparse.issparse(X), self.solver)]) != 0'}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': 'len(_get_valid_accept_sparse(sparse.issparse(X), self.solver)) != 0'}]}]}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': 'len([_get_valid_accept_sparse(sparse.issparse(X), self.solver)]) != 0'}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': 'len(_get_valid_accept_sparse(sparse.issparse(X), self.solver)) != 0'}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_sparse_format, Exception: raise ValueError(     "Parameter \'accept_sparse\' should be a string, boolean or list of strings. You provided \'accept_sparse={}\'."     .format(accept_sparse)) ',
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'},
                      {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) != 'no_validation'"},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is True'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is True'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Pandas DataFrame with mixed sparse extension arrays generated a sparse matrix with object dtype which can not be converted to a scipy sparse matrix.Sparse extension arrays should all have the same numeric type.'     ) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).y_type_.startswith('multilabel')"},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                                       {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                                                       {'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'},
                                                       {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) != 'no_validation'"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]},
                                                                  {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                                       {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                                                       {'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'},
                                                       {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) != 'no_validation'"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]},
                                                                  {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not LabelBinarizer(pos_label=1, neg_label=-1).y_type_.startswith('multilabel')"},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                                       {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                                                       {'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'},
                                                       {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) != 'no_validation'"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]},
                                                                  {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                                       {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                                                       {'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'},
                                                       {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) != 'no_validation'"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]},
                                                                  {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'}, {'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) != 'no_validation'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'},
                      {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) != 'no_validation'"},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim < 3'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim < 3'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'},
                      {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) != 'no_validation'"},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, None)) >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, None)) >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'},
                      {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) != 'no_validation'"},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                  {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                  {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, None).fit)'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, None).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'}, {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'X.sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "X.sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X, 'dtype')"}, {'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "not hasattr(X.dtype, 'kind')"}, {'XXX TODO XXX': "X.dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in [np.float64, np.float32]'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in [np.float64, np.float32]'}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in [np.float64, np.float32]'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in [np.float64, np.float32]'}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'}, {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is not False'}]},
           {'description': 'From /utils/validation.py:None:_ensure_sparse_format, Exception: raise ValueError(     "When providing \'accept_sparse\' as a tuple or list, it must contain at least one string value."     ) ',
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': 'len([_get_valid_accept_sparse(sparse.issparse(X), self.solver)]) != 0'}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': 'len(_get_valid_accept_sparse(sparse.issparse(X), self.solver)) != 0'}]}]}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': 'len([_get_valid_accept_sparse(sparse.issparse(X), self.solver)]) != 0'}]}, {'anyOf': [{'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': 'len(_get_valid_accept_sparse(sparse.issparse(X), self.solver)) != 0'}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_sparse_format, Exception: raise ValueError(     "Parameter \'accept_sparse\' should be a string, boolean or list of strings. You provided \'accept_sparse={}\'."     .format(accept_sparse)) ',
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is True'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), str)'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is False'}, {'XXX TODO XXX': 'isinstance(_get_valid_accept_sparse(sparse.issparse(X), self.solver), [list, tuple])'}, {'XXX TODO XXX': '_get_valid_accept_sparse(sparse.issparse(X), self.solver) is True'}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'}, {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim < 3'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim < 3'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, None)) >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, None)) >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                  {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, accept_sparse=_get_valid_accept_sparse(sparse.issparse(X), self.solver), dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), accept_sparse='csr', None, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), accept_sparse='csr', None, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).fit)'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), accept_sparse='csr', None, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), accept_sparse='csr', None, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y))'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).fit)'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), accept_sparse='csr', None, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), accept_sparse='csr', None, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).fit)'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), accept_sparse='csr', None, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), accept_sparse='csr', None, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y))'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).fit)'}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype.kind != 'c'"}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype is None'}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype, 'kind')"}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for None in list(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y))'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for None in list(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y))'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype.kind != 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y))'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype.kind != 'c'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for None in list(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y))'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for None in list(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y))'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).dtype.kind != 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y))'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).dtype.kind != 'c'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Pandas DataFrame with mixed sparse extension arrays generated a sparse matrix with object dtype which can not be converted to a scipy sparse matrix.Sparse extension arrays should all have the same numeric type.'     ) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).y_type_.startswith('multilabel')"},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                                       {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                                                       {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes])) <= 1'}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes])) <= 1'}]}]}]}]}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                                       {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                                                       {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes])) <= 1'}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes])) <= 1'}]}]}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not LabelBinarizer(pos_label=1, neg_label=-1).y_type_.startswith('multilabel')"},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                                       {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                                                       {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes])) <= 1'}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes])) <= 1'}]}]}]}]}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                                       {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                                                       {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes])) <= 1'}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes])) <= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes])) <= 1'}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'}, {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y))'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).ndim < 3'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y))'}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).ndim < 3'}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).ndim < 3'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y))'}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).ndim < 3'}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), accept_sparse='csr', None, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo())'}, {'XXX TODO XXX': '_num_samples(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None)) >= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), accept_sparse='csr', None, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y))'}, {'XXX TODO XXX': '_num_samples(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None)) >= 1'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), accept_sparse='csr', None, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo())'}, {'XXX TODO XXX': '_num_samples(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None)) >= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), accept_sparse='csr', None, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y))'}, {'XXX TODO XXX': '_num_samples(np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None)) >= 1'}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                      {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), accept_sparse='csr', None, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), accept_sparse='csr', None, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y))'}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'dtypes')"}, {'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), accept_sparse='csr', None, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), 'sparse')"}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), accept_sparse='csr', None, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y))'}, {'XXX TODO XXX': 'np.asarray(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ', 'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'}, {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ', 'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'}, {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]},
           {'description': "From /utils/validation.py:None:_num_samples, Exception: raise TypeError(     'Singleton array %r cannot be considered a valid collection.' % x) ",
            'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'}, {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) from type_error ', 'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'}, {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
           {'description': "From /utils/validation.py:None:check_consistent_length, Exception: raise ValueError(     'Found input variables with inconsistent numbers of samples: %r' % [int     (l) for l in lengths]) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).y_type_.startswith('multilabel')"},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                                       {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                                                       {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind != 'O'"}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind == 'O'"}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]}, {'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind != 'O'"}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind == 'O'"}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]}]}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                                       {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                                                       {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind != 'O'"}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind == 'O'"}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]}, {'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind != 'O'"}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind == 'O'"}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not LabelBinarizer(pos_label=1, neg_label=-1).y_type_.startswith('multilabel')"},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                                       {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                                                       {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind != 'O'"}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind == 'O'"}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]}, {'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind != 'O'"}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind == 'O'"}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]}]}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                                       {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'},
                                                       {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind != 'O'"}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind == 'O'"}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]}, {'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind != 'O'"}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).dtype.kind == 'O'"}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_X_y, Exception: raise ValueError('y cannot be None') ", 'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is None'}, {'allOf': [{'XXX TODO XXX': 'isinstance(LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y), str)'}, {'XXX TODO XXX': "LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) == 'no_validation'"}]}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'}]},
           {'description': "From /base.py:BaseEstimator:_validate_data, Exception: raise ValueError(     f'This {self.__class__.__name__} estimator requires y to be passed, but the target y is None.'     ) ", 'anyOf': [{'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y) is not None'}, {'XXX TODO XXX': "not self._get_tags()['requires_y']"}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                      {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                            {'XXX TODO XXX': 'X.dtype in [np.float32, np.float64]'},
                                            {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                            {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                  {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).fit)"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=np.float64, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).fit)"}]}]}]}]}]},
                                                       {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                  {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).fit)"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=np.float64, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).fit)"}]}]}]}]}]}]}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': 'X.dtype not in [np.float32, np.float64]'}]},
                                            {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                            {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is not None'},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                                        {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                              {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).fit)"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).fit)"}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                                        {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) not in [np.float64, np.float32]"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, None, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).fit)"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, None, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).fit)"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).fit)"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).fit)"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                                        {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                                              {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).fit)"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).fit)"}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                                      {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).fit)"}]}]}]}]}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                                      {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).fit)"}]}]}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=X.dtype, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=X.dtype, False, True, True).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                                                                                                                                                                      {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).fit)"}]}]}]}]}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=X.dtype, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=X.dtype, False, True, True).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                                                                                                                                                                      {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).fit)"}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                                        {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                                              {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).fit)"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).fit)"}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) is None"},
                                                                                                                                                          {'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) not in X.dtype"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, None, False, True, True).fit)'}]},
                                                                                                                                                                                           {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).fit)"}]}]}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, None, False, True, True).fit)'}]},
                                                                                                                                                                                           {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).fit)"}]}]}]}]}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) in X.dtype"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                                                                           {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                                                            {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).fit)"}]}]}]}]}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                                                                           {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                                                            {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).fit)"}]}]}]}]}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=X.dtype, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=X.dtype, False, True, True).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                                                                                                                                                                      {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).fit)"}]}]}]}]}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=X.dtype, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=X.dtype, False, True, True).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                                                                                                                                                                      {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).astype(np.float64).fit)"}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).fit)"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                      {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                      {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                      {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype.kind != 'c'"}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype.kind != 'c'"}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError(     "Unable to convert array of bytes/strings into decimal numbers with dtype=\'numeric\'"     ) from e ',
            'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                      {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                      {'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': 'X.dtype not in [np.float32, np.float64]'}]},
                      {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                      {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'},
                      {'XXX TODO XXX': 'X.dtype is None'},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(X.dtype, np.dtype) for X.dtype in list(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                                              {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes)) is None'},
                                                                                                                                                          {'XXX TODO XXX': 'np.result_type(*list(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes)) not in X.dtype'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).dtype.kind not in 'OUSV'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes)) in X.dtype'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(X.dtype, np.dtype) for X.dtype in list(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                                              {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                        {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(X.dtype, np.dtype) for X.dtype in list(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                                              {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes)) is None'},
                                                                                                                                                          {'XXX TODO XXX': 'np.result_type(*list(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes)) not in X.dtype'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).dtype.kind not in 'OUSV'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes)) in X.dtype'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(X.dtype, np.dtype) for X.dtype in list(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                                              {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) is None"},
                                                                                                                                                          {'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) not in X.dtype"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).dtype.kind not in 'OUSV'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) in X.dtype"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                        {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) is None"},
                                                                                                                                    {'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) not in X.dtype"},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) in X.dtype"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                      {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                            {'XXX TODO XXX': 'X.dtype in [np.float32, np.float64]'},
                                            {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                            {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                  {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).ndim < 3"}]}]}]},
                                                       {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                  {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).ndim < 3"}]}]}]}]}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': 'X.dtype not in [np.float32, np.float64]'}]},
                                            {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                            {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is not None'},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                                        {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).ndim < 3"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).ndim < 3"}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                                        {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).ndim < 3"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).ndim < 3"}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                                        {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                                              {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).ndim < 3"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).ndim < 3"}]}]}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).ndim < 3"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).ndim < 3"}]}]}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).ndim < 3"}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                                        {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                                              {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).ndim < 3"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) is None"},
                                                                                                                                                          {'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) not in X.dtype"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).ndim < 3"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).ndim < 3"}]}]}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) in X.dtype"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                                      {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).ndim < 3"}]}]}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).ndim < 3"}]}]}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).ndim < 3"}]}]}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).ndim < 3"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                      {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                            {'XXX TODO XXX': 'X.dtype in [np.float32, np.float64]'},
                                            {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                            {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                  {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64)) >= 1"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64)) >= 1"}]}]}]}]}]},
                                                       {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                  {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64)) >= 1"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64)) >= 1"}]}]}]}]}]}]}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': 'X.dtype not in [np.float32, np.float64]'}]},
                                            {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                            {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is not None'},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                                        {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                              {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0])) >= 1"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0])) >= 1"}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                                        {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) not in [np.float64, np.float32]"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None)) >= 1"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, None, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None)) >= 1"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0])) >= 1"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=dtype[0], False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0])) >= 1"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                                        {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                                              {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64)) >= 1"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=np.float64, False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64)) >= 1"}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                                      {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0])) >= 1"}]}]}]}]}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0])) >= 1"}]}]}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=X.dtype, False, True, True)) >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                                                                                                                                                                      {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype)) >= 1"}]}]}]}]}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=X.dtype, False, True, True)) >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype)) >= 1"}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None), 'kind')"},
                                                                                        {'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtypes')"}, {'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtypes, '__array__')"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'},
                                                                                                              {'XXX TODO XXX': "X.dtype != 'numeric'"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=np.float64)) >= 1"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=np.float64, False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=np.float64)) >= 1"}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) is None"},
                                                                                                                                                          {'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) not in X.dtype"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, None, False, True, True)) >= 1'}]},
                                                                                                                                                                                           {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', None)) >= 1"}]}]}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, None, False, True, True)) >= 1'}]},
                                                                                                                                                                                           {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', None)) >= 1"}]}]}]}]}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype', None) in X.dtype"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                                                                           {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                                                            {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=dtype[0])) >= 1"}]}]}]}]}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                                                                           {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                                                            {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                                                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=dtype[0])) >= 1"}]}]}]}]}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), False, dtype=X.dtype, False, True, True)) >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'},
                                                                                                                                                                                                      {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"},
                                                                                                                                                                                                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C').astype(X.dtype, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), order='C', dtype=X.dtype)) >= 1"}]}]}]}]}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, dtype=X.dtype, False, True, True)) >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind not in 'iu'"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C').astype(X.dtype, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'X.dtype is not None'}, {'XXX TODO XXX': "np.dtype(X.dtype).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype != 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).astype(np.float64)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(X.dtype, str)'}, {'XXX TODO XXX': "X.dtype == 'numeric'"}, {'XXX TODO XXX': "np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(_check_sample_weight(sample_weight, X, dtype=X.dtype), order='C', dtype=X.dtype)) >= 1"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ', 'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}, {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ', 'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}, {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]},
           {'description': "From /utils/validation.py:None:_num_samples, Exception: raise TypeError(     'Singleton array %r cannot be considered a valid collection.' % x) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) from type_error ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]},
           {'description': "From /utils/validation.py:None:_check_sample_weight, Exception: raise ValueError('Sample weights must be 1D array or scalar') ", 'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
           {'description': "From /utils/validation.py:None:_check_sample_weight, Exception: raise ValueError('sample_weight.shape == {}, expected {}!'.format(     sample_weight.shape, (n_samples,))) ", 'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                       {'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim <= 1'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo(), 'dtype')"},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo().dtype is None'},
                                                                             {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo().dtype, 'kind')"},
                                                                             {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo().dtype.kind != 'c'"}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim > 1'}]},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'dtype')"},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).dtype is None'},
                                                                             {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).dtype, 'kind')"},
                                                                             {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).dtype.kind != 'c'"}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim <= 1'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo(), 'dtype')"},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo().dtype is None'},
                                                                             {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo().dtype, 'kind')"},
                                                                             {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo().dtype.kind != 'c'"}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim > 1'}]},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'dtype')"},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).dtype is None'},
                                                                             {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).dtype, 'kind')"},
                                                                             {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).dtype.kind != 'c'"}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo().dtype.kind != 'c'"}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).dtype.kind != 'c'"}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype.kind != 'c'"}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype.kind != 'c'"}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo().dtype.kind != 'c'"}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).dtype.kind != 'c'"}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype.kind != 'c'"}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype.kind != 'c'"}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                       {'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                       {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                       {'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype))'}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype))'}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype))'}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype))'}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_num_samples, Exception: raise TypeError(     'Singleton array %r cannot be considered a valid collection.' % x) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) from type_error ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_check_sample_weight, Exception: raise ValueError('Sample weights must be 1D array or scalar') ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                       {'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                       {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                       {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_check_sample_weight, Exception: raise ValueError('sample_weight.shape == {}, expected {}!'.format(     sample_weight.shape, (n_samples,))) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                       {'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                       {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                       {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ', 'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ', 'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]},
           {'description': "From /utils/validation.py:None:_num_samples, Exception: raise TypeError(     'Singleton array %r cannot be considered a valid collection.' % x) ",
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                 {'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) from type_error ',
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                 {'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]},
           {'description': "From /utils/validation.py:None:check_consistent_length, Exception: raise ValueError(     'Found input variables with inconsistent numbers of samples: %r' % [int     (l) for l in lengths]) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "LabelBinarizer(1, neg_label=-1).y_type_.startswith('multilabel')"},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['auto', 'sparse_cg', 'sag']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]},
                                                                                        {'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['auto', 'sparse_cg', 'sag']}}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]}]}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['auto', 'sparse_cg', 'sag']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]},
                                                                                        {'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['auto', 'sparse_cg', 'sag']}}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not LabelBinarizer(1, neg_label=-1).y_type_.startswith('multilabel')"},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['auto', 'sparse_cg', 'sag']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]},
                                                                                        {'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['auto', 'sparse_cg', 'sag']}}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]}]}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['auto', 'sparse_cg', 'sag']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]},
                                                                                        {'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['auto', 'sparse_cg', 'sag']}}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                 {'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                 {'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]}]}]},
           {'description': "From /utils/validation.py:None:_num_samples, Exception: raise TypeError(     'Singleton array %r cannot be considered a valid collection.' % x) ",
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                 {'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) from type_error ',
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                 {'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_check_sample_weight, Exception: raise ValueError('Sample weights must be 1D array or scalar') ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_check_sample_weight, Exception: raise ValueError('sample_weight.shape == {}, expected {}!'.format(     sample_weight.shape, (n_samples,))) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                       {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                       {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                             {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_random_state, Exception: raise ValueError(     '%r cannot be used to seed a numpy.random.RandomState instance' % seed) ",
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                 {'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]}]}]}]},
           {'description': "From /linear_model/_sag.py:None:sag_solver, Exception: raise ZeroDivisionError(     'Current sag implementation does not handle the case step_size * alpha_scaled == 1'     ) ",
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                 {'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'row_norms(X, True).max() is not None'}, {'XXX TODO XXX': "get_auto_step_size(row_norms(X, True).max(), float(alpha_i) / [X.shape[0], X.shape[1]][0], 'squared', coef_init.shape[0] == [X.shape[0], X.shape[1]][1] + 1, n_samples=[X.shape[0], X.shape[1]][0], False) * (float(alpha_i) / [X.shape[0], X.shape[1]][0]) != 1"}]}, {'anyOf': [{'XXX TODO XXX': 'row_norms(X, True).max() is None'}, {'XXX TODO XXX': "get_auto_step_size(row_norms(X, True).max(), float(alpha_i) / [X.shape[0], X.shape[1]][0], 'squared', coef_init.shape[0] == [X.shape[0], X.shape[1]][1] + 1, n_samples=[X.shape[0], X.shape[1]][0], False) * (float(alpha_i) / [X.shape[0], X.shape[1]][0]) != 1"}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'row_norms(X, True).max() is not None'}, {'XXX TODO XXX': "get_auto_step_size(row_norms(X, True).max(), float(alpha_i) / [X.shape[0], X.shape[1]][0], 'squared', coef_init.shape[0] == [X.shape[0], X.shape[1]][1] + 1, n_samples=[X.shape[0], X.shape[1]][0], False) * (float(alpha_i) / [X.shape[0], X.shape[1]][0]) != 1"}]}, {'anyOf': [{'XXX TODO XXX': 'row_norms(X, True).max() is None'}, {'XXX TODO XXX': "get_auto_step_size(row_norms(X, True).max(), float(alpha_i) / [X.shape[0], X.shape[1]][0], 'squared', coef_init.shape[0] == [X.shape[0], X.shape[1]][1] + 1, n_samples=[X.shape[0], X.shape[1]][0], False) * (float(alpha_i) / [X.shape[0], X.shape[1]][0]) != 1"}]}]}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'row_norms(X, True).max() is not None'}, {'XXX TODO XXX': "get_auto_step_size(row_norms(X, True).max(), float(alpha_i) / [X.shape[0], X.shape[1]][0], 'squared', coef_init.shape[0] == [X.shape[0], X.shape[1]][1] + 1, n_samples=[X.shape[0], X.shape[1]][0], False) * (float(alpha_i) / [X.shape[0], X.shape[1]][0]) != 1"}]}, {'anyOf': [{'XXX TODO XXX': 'row_norms(X, True).max() is None'}, {'XXX TODO XXX': "get_auto_step_size(row_norms(X, True).max(), float(alpha_i) / [X.shape[0], X.shape[1]][0], 'squared', coef_init.shape[0] == [X.shape[0], X.shape[1]][1] + 1, n_samples=[X.shape[0], X.shape[1]][0], False) * (float(alpha_i) / [X.shape[0], X.shape[1]][0]) != 1"}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'row_norms(X, True).max() is not None'}, {'XXX TODO XXX': "get_auto_step_size(row_norms(X, True).max(), float(alpha_i) / [X.shape[0], X.shape[1]][0], 'squared', coef_init.shape[0] == [X.shape[0], X.shape[1]][1] + 1, n_samples=[X.shape[0], X.shape[1]][0], False) * (float(alpha_i) / [X.shape[0], X.shape[1]][0]) != 1"}]}, {'anyOf': [{'XXX TODO XXX': 'row_norms(X, True).max() is None'}, {'XXX TODO XXX': "get_auto_step_size(row_norms(X, True).max(), float(alpha_i) / [X.shape[0], X.shape[1]][0], 'squared', coef_init.shape[0] == [X.shape[0], X.shape[1]][1] + 1, n_samples=[X.shape[0], X.shape[1]][0], False) * (float(alpha_i) / [X.shape[0], X.shape[1]][0]) != 1"}]}]}]}]}]}]},
           {'description': "From /linear_model/_ridge.py:None:_ridge_regression, Exception: raise ValueError('Target y has the wrong shape %s' % str(y.shape)) ", 'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 2'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 2'}]}]},
           {'description': "From /linear_model/_ridge.py:None:_ridge_regression, Exception: raise ValueError(     'Number of samples in X and y does not correspond: %d != %d' % (     n_samples, n_samples_)) ", 'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'X.shape[0] == y.shape[0]'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'X.shape[0] == y.shape[0]'}]}]},
           {'description': "From /linear_model/_ridge.py:None:_ridge_regression, Exception: raise ValueError(     'Number of targets and number of penalties do not correspond: %d != %d' %     (alpha.size, n_targets)) ",
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size in [1, y.shape[1]]'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size in [1, y.shape[1]]'}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                                             {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim <= 1'},
                                                                                                   {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                                                   {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo(), 'dtype')"},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo().dtype is None'},
                                                                                                   {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo().dtype, 'kind')"},
                                                                                                   {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo().dtype.kind != 'c'"}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim > 1'}]},
                                                                                                   {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                                                   {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'dtype')"},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).dtype is None'},
                                                                                                   {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).dtype, 'kind')"},
                                                                                                   {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).dtype.kind != 'c'"}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim <= 1'},
                                                                                                   {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                                                   {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo(), 'dtype')"},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo().dtype is None'},
                                                                                                   {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo().dtype, 'kind')"},
                                                                                                   {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo().dtype.kind != 'c'"}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim > 1'}]},
                                                                                                   {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                                                   {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'dtype')"},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).dtype is None'},
                                                                                                   {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).dtype, 'kind')"},
                                                                                                   {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).dtype.kind != 'c'"}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                       {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim <= 1'},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo(), 'dtype')"},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo().dtype is None'},
                                                                             {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo().dtype, 'kind')"},
                                                                             {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo().dtype.kind != 'c'"}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim > 1'}]},
                                                                             {'type': 'object', 'laleNot': 'X/isSparse'},
                                                                             {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'dtype')"},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).dtype is None'},
                                                                             {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).dtype, 'kind')"},
                                                                             {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).dtype.kind != 'c'"}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                                             {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                                                   {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo().dtype.kind != 'c'"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).dtype.kind != 'c'"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                                                   {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                                                   {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype.kind != 'c'"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype.kind != 'c'"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                                                   {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo().dtype.kind != 'c'"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).dtype.kind != 'c'"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                                                   {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype.kind != 'c'"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo().dtype.kind != 'c'"}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).dtype.kind != 'c'"}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                             {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo().dtype.kind != 'c'"}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'dtype')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype is None'}, {'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype, 'kind')"}, {'XXX TODO XXX': "_check_sample_weight(sample_weight, X, dtype=X.dtype).dtype.kind != 'c'"}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                                             {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                                             {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype))'}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo())'}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype))'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                       {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype))'}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                                             {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                                                   {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype))'}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                                                   {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype))'}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}]}]}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype))'}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                             {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_check_sample_weight(sample_weight, X, dtype=X.dtype), 'sparse')"}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_check_sample_weight(sample_weight, X, dtype=X.dtype))'}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                                             {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                                             {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                                             {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}, {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_num_samples, Exception: raise TypeError(     'Singleton array %r cannot be considered a valid collection.' % x) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                                             {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                                                   {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'},
                                                                                                   {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'},
                                                                             {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                                             {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'},
                                                                             {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) from type_error ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                                             {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                                                   {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'},
                                                                                                   {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                                                   {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is not None'},
                                                                             {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                                             {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'},
                                                                             {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_check_sample_weight, Exception: raise ValueError('Sample weights must be 1D array or scalar') ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                                             {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                                             {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                                             {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                       {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                       {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                                             {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).ndim == 1"}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_check_sample_weight, Exception: raise ValueError('sample_weight.shape == {}, expected {}!'.format(     sample_weight.shape, (n_samples,))) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                                             {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                                             {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]},
                                                                             {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                                             {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                                             {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y) is None'},
                                                       {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype) is None'},
                                                       {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), numbers.Number)'},
                                                       {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype) * compute_sample_weight(self.class_weight, y), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'class_weight': {'enum': [True]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                                       {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                                                             {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                                                             {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(_check_sample_weight(sample_weight, X, dtype=X.dtype), X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]},
                                                                  {'anyOf': [{'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is not None'}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': '_check_sample_weight(sample_weight, X, dtype=X.dtype) is None'}, {'XXX TODO XXX': 'isinstance(_check_sample_weight(sample_weight, X, dtype=X.dtype), numbers.Number)'}, {'XXX TODO XXX': "check_array(_check_sample_weight(sample_weight, X, dtype=X.dtype), False, False, dtype=[np.float64, np.float32], order='C', False).shape == [_num_samples(X)]"}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]},
           {'description': "From /utils/validation.py:None:_num_samples, Exception: raise TypeError(     'Singleton array %r cannot be considered a valid collection.' % x) ",
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                                            {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) from type_error ',
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                                            {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]},
           {'description': "From /linear_model/_ridge.py:None:_solve_sparse_cg, Exception: raise ValueError('Failed with error code %d' % info) ",
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]}, {'XXX TODO XXX': 'i not in range(y.shape[1])'}, {'XXX TODO XXX': "sp_linalg.cg(C, y_column, tol=tol, atol='legacy')[1] >= 0"}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['auto']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': 'i not in range(y.shape[1])'}, {'XXX TODO XXX': "sp_linalg.cg(C, y_column, tol=tol, atol='legacy')[1] >= 0"}]}, {'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['auto']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sparse_cg']}}}}, {'XXX TODO XXX': 'i not in range(y.shape[1])'}, {'XXX TODO XXX': "sp_linalg.cg(C, y_column, tol=tol, atol='legacy')[1] >= 0"}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                 {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'type': 'object', 'properties': {'solver': {'enum': ['auto']}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'type': 'object', 'properties': {'solver': {'enum': ['sparse_cg']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['cholesky']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag', 'saga']}}}}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'type': 'object', 'properties': {'solver': {'enum': ['sparse_cg']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['cholesky']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag', 'saga']}}}}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                 {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'type': 'object', 'properties': {'solver': {'enum': ['auto']}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'type': 'object', 'properties': {'solver': {'enum': ['sparse_cg']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['cholesky']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag', 'saga']}}}}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'type': 'object', 'properties': {'solver': {'enum': ['sparse_cg']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['cholesky']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag', 'saga']}}}}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]}]}]}]},
           {'description': "From /utils/validation.py:None:_num_samples, Exception: raise TypeError(     'Singleton array %r cannot be considered a valid collection.' % x) ",
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                 {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'type': 'object', 'properties': {'solver': {'enum': ['auto']}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'},
                                                       {'XXX TODO XXX': 'y.shape[1] <= 1'},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['sparse_cg']}}},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['cholesky']}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag', 'saga']}}}},
                                                       {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['sparse_cg']}}},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['cholesky']}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag', 'saga']}}}},
                                                       {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) from type_error ',
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                 {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'type': 'object', 'properties': {'solver': {'enum': ['auto']}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'},
                                                       {'XXX TODO XXX': 'y.shape[1] <= 1'},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['sparse_cg']}}},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['cholesky']}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag', 'saga']}}}},
                                                       {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['sparse_cg']}}},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['cholesky']}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag', 'saga']}}}},
                                                       {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_random_state, Exception: raise ValueError(     '%r cannot be used to seed a numpy.random.RandomState instance' % seed) ",
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                 {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'type': 'object', 'properties': {'solver': {'enum': ['auto']}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'type': 'object', 'properties': {'solver': {'enum': ['sparse_cg']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['cholesky']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag', 'saga']}}}}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'type': 'object', 'properties': {'solver': {'enum': ['sparse_cg']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['cholesky']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag', 'saga']}}}}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]}]}]}]},
           {'description': "From /linear_model/_sag.py:None:sag_solver, Exception: raise ZeroDivisionError(     'Current sag implementation does not handle the case step_size * alpha_scaled == 1'     ) ",
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'},
                                 {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}},
                                 {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}},
                                 {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'}, {'XXX TODO XXX': 'y.shape[1] <= 1'}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'row_norms(X, True).max() is not None'}, {'XXX TODO XXX': "get_auto_step_size(row_norms(X, True).max(), float(alpha_i) / [X.shape[0], X.shape[1]][0], 'squared', coef_init.shape[0] == [X.shape[0], X.shape[1]][1] + 1, n_samples=[X.shape[0], X.shape[1]][0], False) * (float(alpha_i) / [X.shape[0], X.shape[1]][0]) != 1"}]}, {'anyOf': [{'XXX TODO XXX': 'row_norms(X, True).max() is None'}, {'XXX TODO XXX': "get_auto_step_size(row_norms(X, True).max(), float(alpha_i) / [X.shape[0], X.shape[1]][0], 'squared', coef_init.shape[0] == [X.shape[0], X.shape[1]][1] + 1, n_samples=[X.shape[0], X.shape[1]][0], False) * (float(alpha_i) / [X.shape[0], X.shape[1]][0]) != 1"}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]}, {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'row_norms(X, True).max() is not None'}, {'XXX TODO XXX': "get_auto_step_size(row_norms(X, True).max(), float(alpha_i) / [X.shape[0], X.shape[1]][0], 'squared', coef_init.shape[0] == [X.shape[0], X.shape[1]][1] + 1, n_samples=[X.shape[0], X.shape[1]][0], False) * (float(alpha_i) / [X.shape[0], X.shape[1]][0]) != 1"}]}, {'anyOf': [{'XXX TODO XXX': 'row_norms(X, True).max() is None'}, {'XXX TODO XXX': "get_auto_step_size(row_norms(X, True).max(), float(alpha_i) / [X.shape[0], X.shape[1]][0], 'squared', coef_init.shape[0] == [X.shape[0], X.shape[1]][1] + 1, n_samples=[X.shape[0], X.shape[1]][0], False) * (float(alpha_i) / [X.shape[0], X.shape[1]][0]) != 1"}]}]}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                                 {'type': 'object', 'properties': {'solver': {'enum': ['auto']}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size != 1'},
                                                       {'XXX TODO XXX': 'y.shape[1] <= 1'},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['sparse_cg']}}},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['cholesky']}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag', 'saga']}}}},
                                                       {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.repeat(np.asarray(self.alpha, dtype=X.dtype).ravel(), y.shape[1]), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'row_norms(X, True).max() is not None'}, {'XXX TODO XXX': "get_auto_step_size(row_norms(X, True).max(), float(alpha_i) / [X.shape[0], X.shape[1]][0], 'squared', coef_init.shape[0] == [X.shape[0], X.shape[1]][1] + 1, n_samples=[X.shape[0], X.shape[1]][0], is_saga=self.solver == 'saga') * (float(alpha_i) / [X.shape[0], X.shape[1]][0]) != 1"}]}, {'anyOf': [{'XXX TODO XXX': 'row_norms(X, True).max() is None'}, {'XXX TODO XXX': "get_auto_step_size(row_norms(X, True).max(), float(alpha_i) / [X.shape[0], X.shape[1]][0], 'squared', coef_init.shape[0] == [X.shape[0], X.shape[1]][1] + 1, n_samples=[X.shape[0], X.shape[1]][0], is_saga=self.solver == 'saga') * (float(alpha_i) / [X.shape[0], X.shape[1]][0]) != 1"}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size == 1'}, {'XXX TODO XXX': 'y.shape[1] > 1'}]},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['sparse_cg']}}},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                                                       {'type': 'object', 'properties': {'solver': {'enum': ['cholesky']}}},
                                                       {'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag', 'saga']}}}},
                                                       {'XXX TODO XXX': '[i, [alpha_i, target]] not in enumerate(zip(np.asarray(self.alpha, dtype=X.dtype).ravel(), LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).T))'},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'row_norms(X, True).max() is not None'}, {'XXX TODO XXX': "get_auto_step_size(row_norms(X, True).max(), float(alpha_i) / [X.shape[0], X.shape[1]][0], 'squared', coef_init.shape[0] == [X.shape[0], X.shape[1]][1] + 1, n_samples=[X.shape[0], X.shape[1]][0], is_saga=self.solver == 'saga') * (float(alpha_i) / [X.shape[0], X.shape[1]][0]) != 1"}]}, {'anyOf': [{'XXX TODO XXX': 'row_norms(X, True).max() is None'}, {'XXX TODO XXX': "get_auto_step_size(row_norms(X, True).max(), float(alpha_i) / [X.shape[0], X.shape[1]][0], 'squared', coef_init.shape[0] == [X.shape[0], X.shape[1]][1] + 1, n_samples=[X.shape[0], X.shape[1]][0], is_saga=self.solver == 'saga') * (float(alpha_i) / [X.shape[0], X.shape[1]][0]) != 1"}]}]}]}]}]}]},
           {'description': 'From /linear_model/_ridge.py:None:_ridge_regression, Exception: raise ValueError(     "Known solvers are \'sparse_cg\', \'cholesky\', \'svd\' \'lsqr\', \'sag\' or \'saga\'. Got %s."      % solver) ', 'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'type': 'object', 'properties': {'solver': {'enum': ['auto']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['sparse_cg', 'cholesky', 'svd', 'lsqr', 'sag', 'saga']}}}]},
           {'description': "From /linear_model/_ridge.py:None:_ridge_regression, Exception: raise ValueError('Target y has the wrong shape %s' % str(y.shape)) ",
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 2'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 2'}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': 'LabelBinarizer(pos_label=1, neg_label=-1).fit_transform(y).ndim <= 2'}]}]},
           {'description': "From /linear_model/_ridge.py:None:_ridge_regression, Exception: raise ValueError(     'Number of samples in X and y does not correspond: %d != %d' % (     n_samples, n_samples_)) ",
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': 'X.shape[0] == y.shape[0]'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]}, {'XXX TODO XXX': 'X.shape[0] == y.shape[0]'}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': 'X.shape[0] == y.shape[0]'}]}]},
           {'description': "From /linear_model/_ridge.py:None:_ridge_regression, Exception: raise ValueError(     'Number of targets and number of penalties do not correspond: %d != %d' %     (alpha.size, n_targets)) ",
            'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sag']}}}}, {'type': 'object', 'properties': {'max_iter': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0.0001}}}, {'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size in [1, y.shape[1]]'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'type': 'object', 'properties': {'max_iter': {'enum': [None]}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0.0001, 'exclusiveMinimum': True}}}]}, {'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size in [1, y.shape[1]]'}]}]}]},
                      {'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]}, {'XXX TODO XXX': 'np.asarray(self.alpha, dtype=X.dtype).ravel().size in [1, y.shape[1]]'}]}]},
           {'description': "From /linear_model/_ridge.py:None:_ridge_regression, Exception: raise TypeError('SVD solver does not support sparse inputs currently') ",
            'anyOf': [{'allOf': [{'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                      {'allOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sag']}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [True]}}}]},
                      {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['auto']}}}}, {'XXX TODO XXX': 'sparse.issparse(X)'}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
                                 {'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['auto']}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['sparse_cg']}}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['svd']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}]}, {'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['sparse_cg']}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['lsqr']}}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['svd']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}]}, {'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['cholesky']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}]}, {'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['cholesky']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['svd']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]}]}]}]}]}]}]}]},
           {'description': 'From /linear_model/_ridge.py:_BaseRidge:fit, Exception: raise ValueError(     "solver=\'{}\' does not support fitting the intercept on sparse data. Please set the solver to \'auto\' or \'sparse_cg\', \'sag\', or set `fit_intercept=False`"     .format(self.solver)) ', 'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'type': 'object', 'properties': {'fit_intercept': {'enum': [False]}}}, {'type': 'object', 'properties': {'solver': {'enum': ['auto', 'sparse_cg', 'sag']}}}]},
           {'description': 'From /linear_model/_ridge.py:RidgeClassifier:fit, Exception: raise ValueError("%s doesn\'t support multi-label classification" % self.     __class__.__name__) ', 'XXX TODO XXX': "not LabelBinarizer(pos_label=1, neg_label=-1).y_type_.startswith('multilabel')"}]}
