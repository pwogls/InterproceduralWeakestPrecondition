{'allOf': [{'type': 'object',
            'required': ['n_components', 'init', 'solver', 'beta_loss', 'tol', 'max_iter', 'random_state', 'alpha', 'l1_ratio', 'verbose', 'shuffle'],
            'relevantToOptimizer': ['alpha', 'beta_loss', 'l1_ratio', 'max_iter', 'n_components', 'shuffle', 'solver', 'tol'],
            'additionalProperties': False,
            'properties': {'n_components': {'anyOf': [{'type': 'integer', 'minimum': 1, 'laleMaximum': 'X/items/maxItems', 'minimumForOptimizer': 2, 'maximumForOptimizer': 256, 'distribution': 'uniform'}, {'description': 'If not set, keep all components.', 'enum': [None]}], 'default': None, 'description': 'Number of components.'},
                           'init': {'enum': ['custom', 'nndsvd', 'nndsvda', 'nndsvdar', 'random', None], 'default': None, 'description': 'Method used to initialize the procedure.'},
                           'solver': {'enum': ['cd', 'mu'], 'default': 'cd', 'description': 'Numerical solver to use:'},
                           'beta_loss': {'description': 'Beta divergence to be minimized, measuring the distance between X and the dot product WH.', 'anyOf': [{'type': 'number', 'minimumForOptimizer': -1, 'maximumForOptimizer': 1}, {'enum': ['frobenius', 'kullback-leibler', 'itakura-saito']}], 'default': 'frobenius'},
                           'tol': {'type': 'number', 'minimum': 0.0, 'minimumForOptimizer': 1e-08, 'maximumForOptimizer': 0.01, 'distribution': 'loguniform', 'default': 0.0001, 'description': 'Tolerance of the stopping condition.'},
                           'max_iter': {'type': 'integer', 'minimum': 1, 'minimumForOptimizer': 10, 'maximumForOptimizer': 1000, 'distribution': 'uniform', 'default': 200, 'description': 'Maximum number of iterations before timing out.'},
                           'random_state': {'anyOf': [{'type': 'integer'}, {'laleType': 'numpy.random.RandomState'}, {'enum': [None]}], 'default': None, 'description': 'Used for initialization and in coordinate descent.'},
                           'alpha': {'type': 'number', 'minimumForOptimizer': 1e-10, 'maximumForOptimizer': 1.0, 'distribution': 'loguniform', 'default': 0.0, 'description': 'Constant that multiplies the regularization terms. Set it to zero to have no regularization.'},
                           'l1_ratio': {'type': 'number', 'default': 0.0, 'minimum': 0.0, 'maximum': 1.0, 'description': 'The regularization mixing parameter.'},
                           'verbose': {'anyOf': [{'type': 'boolean'}, {'type': 'integer'}], 'default': 0, 'description': 'Whether to be verbose.'},
                           'shuffle': {'type': 'boolean', 'default': False, 'description': 'If true, randomize the order of coordinates in the CD solver.'},
                           'regularization': {'default': 'both', 'description': 'Select whether the regularization affects the components (H), the transformation (W), both or none of them.', 'anyOf': [{'enum': ['both', 'components', 'transformation']}, {'enum': [None]}]}}},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'X.sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "X.sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X, 'dtype')"}, {'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "not hasattr(X.dtype, 'kind')"}, {'XXX TODO XXX': "X.dtype.kind != 'c'"}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in [np.float64, np.float32]'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in [np.float64, np.float32]'}]},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                         {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                         {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': 'all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                   {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                   {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                             {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in [np.float64, np.float32]'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in [np.float64, np.float32]'}]},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                         {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                         {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': 'all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                         {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                         {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                   {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                   {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                   {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                       {'XXX TODO XXX': 'X.ndim <= 1'},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                       {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], None, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], None, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, None).fit)'}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], None, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], None, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, None).fit)'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Pandas DataFrame with mixed sparse extension arrays generated a sparse matrix with object dtype which can not be converted to a scipy sparse matrix.Sparse extension arrays should all have the same numeric type.'     ) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim < 3'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim < 3'}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], None, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, None)) >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], None, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, None)) >= 1'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], None, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], None, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'X.sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "X.sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X, 'dtype')"}, {'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "not hasattr(X.dtype, 'kind')"}, {'XXX TODO XXX': "X.dtype.kind != 'c'"}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in [np.float64, np.float32]'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in [np.float64, np.float32]'}]},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                         {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                         {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': 'all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                   {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                   {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                             {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in [np.float64, np.float32]'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in [np.float64, np.float32]'}]},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                         {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                         {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': 'all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                         {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                         {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                    {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                         {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                         {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                   {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                   {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                   {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                       {'XXX TODO XXX': 'X.ndim <= 1'},
                                                       {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                       {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], None, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], None, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, None).fit)'}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], None, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], None, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, None).fit)'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                             {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Pandas DataFrame with mixed sparse extension arrays generated a sparse matrix with object dtype which can not be converted to a scipy sparse matrix.Sparse extension arrays should all have the same numeric type.'     ) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim < 3'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim < 3'}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], None, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, None)) >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], None, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, None)) >= 1'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], None, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], None, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(X.sparse.to_coo(), accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(X, accept_sparse=['csr', 'csc'], dtype=dtype[0], False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_non_negative, Exception: raise ValueError('Negative values in data passed to %s' % whom) ", 'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': 'X.data.size == 0'}, {'XXX TODO XXX': 'X.data.min() >= 0'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'X.min() >= 0'}]}]},
           {'description': "From /decomposition/_nmf.py:None:_beta_loss_to_float, Exception: raise ValueError(     'Invalid beta_loss parameter: got %r instead of one of %r, or a float.' %     (beta_loss, allowed_beta_loss.keys())) ", 'allOf': [{'anyOf': [{'type': 'object', 'properties': {'beta_loss': {'not': {'type': 'string'}}}}, {'XXX TODO XXX': "self.beta_loss not in {'frobenius': 2, 'kullback-leibler': 1, 'itakura-saito': 0}"}, {'XXX TODO XXX': 'isinstance(allowed_beta_loss[beta_loss], numbers.Number)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'beta_loss': {'type': 'string'}}}, {'XXX TODO XXX': "self.beta_loss in {'frobenius': 2, 'kullback-leibler': 1, 'itakura-saito': 0}"}]}, {'type': 'object', 'properties': {'beta_loss': {'type': 'number'}}}]}]},
           {'description': "From /decomposition/_nmf.py:None:_check_string_param, Exception: raise ValueError('Invalid solver parameter: got %r instead of one of %r' %     (solver, allowed_solver)) ", 'type': 'object', 'properties': {'solver': {'enum': ['cd', 'mu']}}},
           {'description': "From /decomposition/_nmf.py:None:_check_string_param, Exception: raise ValueError(     'Invalid regularization parameter: got %r instead of one of %r' % (     regularization, allowed_regularization)) ", 'type': 'object', 'properties': {'regularization': {'enum': ['both', 'components', 'transformation', None]}}},
           {'description': "From /decomposition/_nmf.py:None:_check_string_param, Exception: raise ValueError(     'Invalid beta_loss parameter: solver %r does not handle beta_loss = %r' %     (solver, beta_loss)) ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['mu']}}}, {'type': 'object', 'properties': {'beta_loss': {'enum': [2, 'frobenius']}}}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(params.get('H', None).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': "params.get('H', None).sparse.to_coo().dtype is None"}, {'XXX TODO XXX': "not hasattr(params.get('H', None).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "params.get('H', None).sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(params.get('H', None), 'dtype')"}, {'XXX TODO XXX': "params.get('H', None).dtype is None"}, {'XXX TODO XXX': "not hasattr(params.get('H', None).dtype, 'kind')"}, {'XXX TODO XXX': "params.get('H', None).dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('H', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(params.get('H', None).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(params.get('H', None).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(params.get('H', None).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('H', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(params.get('H', None).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(params.get('H', None).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(params.get('H', None).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('H', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"},
                                                                  {'XXX TODO XXX': "params.get('H', None).ndim <= 1"},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(params.get('H', None).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(params.get('H', None).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)"}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).fit)"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(params.get('H', None), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(params.get('H', None), False, dtype=np.float64, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('H', None), None, dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('H', None), None, dtype=np.float64).fit)"}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('H', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"},
                                                                  {'XXX TODO XXX': "params.get('H', None).ndim <= 1"},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(params.get('H', None).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(params.get('H', None).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)"}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).fit)"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(params.get('H', None), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(params.get('H', None), False, dtype=np.float64, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('H', None), None, dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('H', None), None, dtype=np.float64).fit)"}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None))"}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError(     "Unable to convert array of bytes/strings into decimal numbers with dtype=\'numeric\'"     ) from e ',
            'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('H', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(params.get('H', None).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(params.get('H', None).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(params.get('H', None).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('H', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(params.get('H', None).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(params.get('H', None).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(params.get('H', None).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('H', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).ndim < 3"}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).ndim < 3"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('H', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).ndim < 3"}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).ndim < 3"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('H', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(params.get('H', None).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64)) >= 1"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(params.get('H', None), False, dtype=np.float64, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('H', None), None, dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('H', None), None, dtype=np.float64)) >= 1"}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('H', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(params.get('H', None).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64)) >= 1"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(params.get('H', None), False, dtype=np.float64, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('H', None), None, dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('H', None), None, dtype=np.float64)) >= 1"}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('H', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(params.get('H', None).sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(params.get('H', None), False, dtype=np.float64, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('H', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim <= 1"}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(params.get('H', None).sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).sparse.to_coo(), None, dtype=np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None), 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).ndim > 1"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(params.get('H', None), False, dtype=np.float64, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None), None, dtype=np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_non_negative, Exception: raise ValueError('Negative values in data passed to %s' % whom) ", 'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "check_array(params.get('H', None)).data.size == 0"}, {'XXX TODO XXX': "check_array(params.get('H', None)).data.min() >= 0"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(check_array(params.get('H', None)))"}, {'XXX TODO XXX': "check_array(params.get('H', None)).min() >= 0"}]}]}]},
           {'description': "From /decomposition/_nmf.py:None:_check_init, Exception: raise ValueError(     'Array with wrong shape passed to %s. Expected %s, but got %s ' % (whom,     shape, np.shape(A))) ", 'allOf': [{'anyOf': [{'type': 'object', 'properties': {'n_components': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'XXX TODO XXX': "np.shape(check_array(params.get('H', None))) == [X.shape[1], X.shape[1]]"}]}, {'anyOf': [{'type': 'object', 'properties': {'n_components': {'enum': [None]}}}, {'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'XXX TODO XXX': "np.shape(check_array(params.get('H', None))) == [self.n_components, X.shape[1]]"}]}]},
           {'description': "From /decomposition/_nmf.py:None:_check_init, Exception: raise ValueError('Array passed to %s is full of zeros.' % whom) ", 'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'XXX TODO XXX': "np.max(check_array(params.get('H', None))) != 0"}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(params.get('W', None).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': "params.get('W', None).sparse.to_coo().dtype is None"}, {'XXX TODO XXX': "not hasattr(params.get('W', None).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "params.get('W', None).sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(params.get('W', None), 'dtype')"}, {'XXX TODO XXX': "params.get('W', None).dtype is None"}, {'XXX TODO XXX': "not hasattr(params.get('W', None).dtype, 'kind')"}, {'XXX TODO XXX': "params.get('W', None).dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('W', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(params.get('W', None).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(params.get('W', None).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(params.get('W', None).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('W', None).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('W', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(params.get('W', None).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(params.get('W', None).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(params.get('W', None).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('W', None).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('W', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('W', None).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"},
                                                                  {'XXX TODO XXX': "params.get('W', None).ndim <= 1"},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(params.get('W', None).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(params.get('W', None).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)"}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).fit)"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(params.get('W', None), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(params.get('W', None), False, dtype=np.float64, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('W', None), None, dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('W', None), None, dtype=np.float64).fit)"}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('W', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('W', None).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"},
                                                                  {'XXX TODO XXX': "params.get('W', None).ndim <= 1"},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(params.get('W', None).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(params.get('W', None).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)"}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).fit)"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(params.get('W', None), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(params.get('W', None), False, dtype=np.float64, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('W', None), None, dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('W', None), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('W', None), None, dtype=np.float64).fit)"}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('W', None))"}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError(     "Unable to convert array of bytes/strings into decimal numbers with dtype=\'numeric\'"     ) from e ',
            'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('W', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(params.get('W', None).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(params.get('W', None).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(params.get('W', None).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('W', None).dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('W', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(params.get('W', None).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(params.get('W', None).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(params.get('W', None).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('W', None).dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('W', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('W', None).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).ndim < 3"}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).ndim < 3"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('W', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('W', None).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).ndim < 3"}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).ndim < 3"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('W', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('W', None).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(params.get('W', None).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64)) >= 1"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(params.get('W', None), False, dtype=np.float64, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('W', None), None, dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('W', None), None, dtype=np.float64)) >= 1"}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('W', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('W', None).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(params.get('W', None).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64)) >= 1"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(params.get('W', None), False, dtype=np.float64, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('W', None), None, dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('W', None), None, dtype=np.float64)) >= 1"}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('W', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('W', None).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(params.get('W', None).sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(params.get('W', None), False, dtype=np.float64, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('W', None), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('W', None).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim <= 1"}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(params.get('W', None).sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('W', None).sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('W', None).sparse.to_coo(), None, dtype=np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('W', None), 'sparse')"}, {'XXX TODO XXX': "params.get('W', None).ndim > 1"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(params.get('W', None), False, dtype=np.float64, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('W', None))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('W', None), None, dtype=np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_non_negative, Exception: raise ValueError('Negative values in data passed to %s' % whom) ", 'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "check_array(params.get('W', None)).data.size == 0"}, {'XXX TODO XXX': "check_array(params.get('W', None)).data.min() >= 0"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(check_array(params.get('W', None)))"}, {'XXX TODO XXX': "check_array(params.get('W', None)).min() >= 0"}]}]}]},
           {'description': "From /decomposition/_nmf.py:None:_check_init, Exception: raise ValueError(     'Array with wrong shape passed to %s. Expected %s, but got %s ' % (whom,     shape, np.shape(A))) ", 'allOf': [{'anyOf': [{'type': 'object', 'properties': {'n_components': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'XXX TODO XXX': "np.shape(check_array(params.get('W', None))) == [X.shape[0], X.shape[1]]"}]}, {'anyOf': [{'type': 'object', 'properties': {'n_components': {'enum': [None]}}}, {'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'XXX TODO XXX': "np.shape(check_array(params.get('W', None))) == [X.shape[0], self.n_components]"}]}]},
           {'description': "From /decomposition/_nmf.py:None:_check_init, Exception: raise ValueError('Array passed to %s is full of zeros.' % whom) ", 'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'XXX TODO XXX': "np.max(check_array(params.get('W', None))) != 0"}]},
           {'description': "From /utils/validation.py:None:check_non_negative, Exception: raise ValueError('Negative values in data passed to %s' % whom) ", 'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['custom']}}}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': 'X.data.size == 0'}, {'XXX TODO XXX': 'X.data.min() >= 0'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'X.min() >= 0'}]}]}]},
           {'description': "From /utils/validation.py:None:check_random_state, Exception: raise ValueError(     '%r cannot be used to seed a numpy.random.RandomState instance' % seed) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'n_components': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'init': {'enum': ['custom']}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['warn']}}}}, {'allOf': [{'XXX TODO XXX': 'X.shape[1] <= X.shape[0]'}, {'XXX TODO XXX': 'X.shape[1] <= X.shape[1]'}]}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['warn']}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': [None]}}}}, {'allOf': [{'XXX TODO XXX': 'X.shape[1] <= X.shape[0]'}, {'XXX TODO XXX': 'X.shape[1] <= X.shape[1]'}]}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]}, {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': [None]}}}, {'type': 'object', 'properties': {'init': {'not': {'enum': ['random']}}}}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'n_components': {'enum': [None]}}},
                                 {'type': 'object', 'properties': {'init': {'enum': ['custom']}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['warn']}}}}, {'allOf': [{'type': 'object', 'properties': {'n_components': {'laleMaximum': 'X/maxItems'}}}, {'type': 'object', 'properties': {'n_components': {'laleMaximum': 'X/items/maxItems'}}}]}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['warn']}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': [None]}}}}, {'allOf': [{'type': 'object', 'properties': {'n_components': {'laleMaximum': 'X/maxItems'}}}, {'type': 'object', 'properties': {'n_components': {'laleMaximum': 'X/items/maxItems'}}}]}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]}, {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': [None]}}}, {'type': 'object', 'properties': {'init': {'not': {'enum': ['random']}}}}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_random_state, Exception: raise ValueError(     '%r cannot be used to seed a numpy.random.RandomState instance' % seed) ", 'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['custom']}}}, {'type': 'object', 'properties': {'init': {'enum': ['warn']}}}, {'type': 'object', 'properties': {'init': {'enum': [None]}}}, {'type': 'object', 'properties': {'init': {'enum': ['random']}}}, {'type': 'object', 'properties': {'init': {'enum': ['nndsvd']}}}, {'type': 'object', 'properties': {'init': {'enum': ['nndsvda']}}}, {'type': 'object', 'properties': {'init': {'not': {'enum': ['nndsvdar']}}}}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]},
           {'description': "From /utils/validation.py:None:check_random_state, Exception: raise ValueError(     '%r cannot be used to seed a numpy.random.RandomState instance' % seed) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'n_components': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'init': {'enum': ['custom']}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['warn']}}}}, {'XXX TODO XXX': 'X.shape[1] > X.shape[0]'}, {'XXX TODO XXX': 'X.shape[1] > X.shape[1]'}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['warn']}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': 'X.shape[1] > X.shape[0]'}, {'XXX TODO XXX': 'X.shape[1] > X.shape[1]'}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]}, {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': [None]}}}, {'type': 'object', 'properties': {'init': {'enum': ['random']}}}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'n_components': {'enum': [None]}}},
                                 {'type': 'object', 'properties': {'init': {'enum': ['custom']}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['warn']}}}}, {'type': 'object', 'properties': {'n_components': {'laleMinimum': 'X/maxItems'}}}, {'type': 'object', 'properties': {'n_components': {'laleMinimum': 'X/items/maxItems'}}}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['warn']}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'n_components': {'laleMinimum': 'X/maxItems'}}}, {'type': 'object', 'properties': {'n_components': {'laleMinimum': 'X/items/maxItems'}}}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]}, {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': [None]}}}, {'type': 'object', 'properties': {'init': {'enum': ['random']}}}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_random_state, Exception: raise ValueError(     '%r cannot be used to seed a numpy.random.RandomState instance' % seed) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'n_components': {'not': {'enum': [None]}}}},
                                 {'type': 'object', 'properties': {'init': {'enum': ['custom']}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['warn']}}}}, {'XXX TODO XXX': 'X.shape[1] > X.shape[0]'}, {'XXX TODO XXX': 'X.shape[1] > X.shape[1]'}, {'XXX TODO XXX': 'check_random_state(self.random_state) is None'}, {'XXX TODO XXX': 'check_random_state(self.random_state) is np.random'}, {'XXX TODO XXX': 'isinstance(check_random_state(self.random_state), np.random.RandomState)'}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['warn']}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': 'X.shape[1] > X.shape[0]'}, {'XXX TODO XXX': 'X.shape[1] > X.shape[1]'}, {'XXX TODO XXX': 'check_random_state(self.random_state) is None'}, {'XXX TODO XXX': 'check_random_state(self.random_state) is np.random'}, {'XXX TODO XXX': 'isinstance(check_random_state(self.random_state), np.random.RandomState)'}]}, {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': [None]}}}, {'type': 'object', 'properties': {'init': {'enum': ['random']}}}, {'XXX TODO XXX': 'check_random_state(self.random_state) is None'}, {'XXX TODO XXX': 'check_random_state(self.random_state) is np.random'}, {'XXX TODO XXX': 'isinstance(check_random_state(self.random_state), np.random.RandomState)'}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'n_components': {'enum': [None]}}},
                                 {'type': 'object', 'properties': {'init': {'enum': ['custom']}}},
                                 {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['warn']}}}}, {'type': 'object', 'properties': {'n_components': {'laleMinimum': 'X/maxItems'}}}, {'type': 'object', 'properties': {'n_components': {'laleMinimum': 'X/items/maxItems'}}}, {'XXX TODO XXX': 'check_random_state(self.random_state) is None'}, {'XXX TODO XXX': 'check_random_state(self.random_state) is np.random'}, {'XXX TODO XXX': 'isinstance(check_random_state(self.random_state), np.random.RandomState)'}]},
                                            {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['warn']}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'n_components': {'laleMinimum': 'X/maxItems'}}}, {'type': 'object', 'properties': {'n_components': {'laleMinimum': 'X/items/maxItems'}}}, {'XXX TODO XXX': 'check_random_state(self.random_state) is None'}, {'XXX TODO XXX': 'check_random_state(self.random_state) is np.random'}, {'XXX TODO XXX': 'isinstance(check_random_state(self.random_state), np.random.RandomState)'}]}, {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': [None]}}}, {'type': 'object', 'properties': {'init': {'enum': ['random']}}}, {'XXX TODO XXX': 'check_random_state(self.random_state) is None'}, {'XXX TODO XXX': 'check_random_state(self.random_state) is np.random'}, {'XXX TODO XXX': 'isinstance(check_random_state(self.random_state), np.random.RandomState)'}]}]}]}]}]}]},
           {'description': 'From /decomposition/_nmf.py:None:_initialize_nmf, Exception: raise ValueError(     "init = \'{}\' can only be used when n_components <= min(n_samples, n_features)"     .format(init)) ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'n_components': {'not': {'enum': [None]}}}}, {'type': 'object', 'properties': {'init': {'enum': ['custom']}}}, {'type': 'object', 'properties': {'init': {'enum': ['warn']}}}, {'type': 'object', 'properties': {'init': {'enum': [None]}}}, {'type': 'object', 'properties': {'init': {'enum': ['random']}}}, {'allOf': [{'XXX TODO XXX': 'X.shape[1] <= X.shape[0]'}, {'XXX TODO XXX': 'X.shape[1] <= X.shape[1]'}]}]}, {'anyOf': [{'type': 'object', 'properties': {'n_components': {'enum': [None]}}}, {'type': 'object', 'properties': {'init': {'enum': ['custom']}}}, {'type': 'object', 'properties': {'init': {'enum': ['warn']}}}, {'type': 'object', 'properties': {'init': {'enum': [None]}}}, {'type': 'object', 'properties': {'init': {'enum': ['random']}}}, {'allOf': [{'type': 'object', 'properties': {'n_components': {'laleMaximum': 'X/maxItems'}}}, {'type': 'object', 'properties': {'n_components': {'laleMaximum': 'X/items/maxItems'}}}]}]}]},
           {'description': "From /decomposition/_nmf.py:None:_initialize_nmf, Exception: raise ValueError('Invalid init parameter: got %r instead of one of %r' % (     init, (None, 'random', 'nndsvd', 'nndsvda', 'nndsvdar'))) ", 'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['custom']}}}, {'type': 'object', 'properties': {'init': {'enum': ['warn']}}}, {'type': 'object', 'properties': {'init': {'enum': [None]}}}, {'type': 'object', 'properties': {'init': {'enum': ['random']}}}, {'type': 'object', 'properties': {'init': {'enum': ['nndsvd']}}}, {'type': 'object', 'properties': {'init': {'enum': ['nndsvda']}}}, {'type': 'object', 'properties': {'init': {'enum': ['nndsvdar']}}}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(params.get('H', None).T.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': "params.get('H', None).T.sparse.to_coo().dtype is None"}, {'XXX TODO XXX': "not hasattr(params.get('H', None).T.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "params.get('H', None).T.sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'dtype')"}, {'XXX TODO XXX': "params.get('H', None).T.dtype is None"}, {'XXX TODO XXX': "not hasattr(params.get('H', None).T.dtype, 'kind')"}, {'XXX TODO XXX': "params.get('H', None).T.dtype.kind != 'c'"}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['custom']}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo().dtype.kind != 'c'"}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtype')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtype is None'}, {'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtype, 'kind')"}, {'XXX TODO XXX': "_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtype.kind != 'c'"}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('H', None).T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'dtypes')"},
                                                                             {'XXX TODO XXX': "not hasattr(params.get('H', None).T.dtypes, '__array__')"},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(params.get('H', None).T.dtypes)))"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T, order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(params.get('H', None).T.dtypes)))"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T, order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).T.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T, order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('H', None).T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'dtypes')"},
                                                                             {'XXX TODO XXX': "not hasattr(params.get('H', None).T.dtypes, '__array__')"},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(params.get('H', None).T.dtypes)))"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T, order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(params.get('H', None).T.dtypes)))"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T, order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).T.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T, order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['custom']}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtypes')"},
                                                                             {'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes, '__array__')"},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes)))"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes)))"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtypes')"},
                                                                             {'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes, '__array__')"},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes)))"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes)))"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                              {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                        {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}]}, {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['custom']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('H', None).T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).T.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"},
                                                                             {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(params.get('H', None).T.sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(params.get('H', None).T.sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)"}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).fit)"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(params.get('H', None).T, False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(params.get('H', None).T, False, dtype=np.float64, False, True, True).fit)"}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T, order='C', dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('H', None).T, order='C', dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T, order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('H', None).T, order='C', dtype=np.float64).fit)"}]}]}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('H', None).T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).T.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"},
                                                                             {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(params.get('H', None).T.sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(params.get('H', None).T.sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)"}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).fit)"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(params.get('H', None).T, False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(params.get('H', None).T, False, dtype=np.float64, False, True, True).fit)"}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T, order='C', dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('H', None).T, order='C', dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(params.get('H', None).T, order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(params.get('H', None).T, order='C', dtype=np.float64).fit)"}]}]}]}]}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['custom']}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"},
                                                                             {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).fit)"}]},
                                                                                                              {'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).fit)"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).fit)"}]}]}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"},
                                                                             {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).fit)"}]},
                                                                                                              {'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).fit)"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).astype(np.float64).fit)"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).fit)"}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['custom']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError(     "Unable to convert array of bytes/strings into decimal numbers with dtype=\'numeric\'"     ) from e ',
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('H', None).T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'dtypes')"},
                                                                             {'XXX TODO XXX': "not hasattr(params.get('H', None).T.dtypes, '__array__')"},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(params.get('H', None).T.dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(params.get('H', None).T.dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).T.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('H', None).T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'dtypes')"},
                                                                             {'XXX TODO XXX': "not hasattr(params.get('H', None).T.dtypes, '__array__')"},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(params.get('H', None).T.dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(params.get('H', None).T.dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).T.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['custom']}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtypes')"},
                                                                             {'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes, '__array__')"},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes)))"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes)))"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtypes')"},
                                                                             {'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes, '__array__')"},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes)))"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes)))"},
                                                                                                   {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes, '__array__')"}]},
                                                                             {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('H', None).T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).T.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).ndim < 3"}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).ndim < 3"}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('H', None).T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).T.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).ndim < 3"}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).ndim < 3"}]}]}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['custom']}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).ndim < 3"}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).ndim < 3"}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).ndim < 3"}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).ndim < 3"}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('H', None).T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).T.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(params.get('H', None).T.sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64)) >= 1"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(params.get('H', None).T, False, dtype=np.float64, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('H', None).T, order='C', dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('H', None).T, order='C', dtype=np.float64)) >= 1"}]}]}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('H', None).T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).T.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(params.get('H', None).T.sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64)) >= 1"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(params.get('H', None).T, False, dtype=np.float64, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('H', None).T, order='C', dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(params.get('H', None).T, order='C', dtype=np.float64)) >= 1"}]}]}]}]}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['custom']}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"},
                                                                             {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64)) >= 1"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64)) >= 1"}]}]}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"},
                                                                             {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64)) >= 1"}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).astype(np.float64)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64)) >= 1"}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'allOf': [{'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(params.get('H', None).T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).T.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(params.get('H', None).T.sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(params.get('H', None).T, False, dtype=np.float64, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(params.get('H', None).T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(params.get('H', None).T.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim <= 1"}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(params.get('H', None).T.sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).T.sparse.to_coo())"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T.sparse.to_coo(), order='C', dtype=np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(params.get('H', None).T, 'sparse')"}, {'XXX TODO XXX': "params.get('H', None).T.ndim > 1"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(params.get('H', None).T, False, dtype=np.float64, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "sp.issparse(params.get('H', None).T)"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(params.get('H', None).T, order='C', dtype=np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]},
                      {'anyOf': [{'type': 'object', 'properties': {'init': {'enum': ['custom']}}},
                                 {'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"},
                                                                             {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                            {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtype', None), 'kind')"},
                                                       {'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'dtypes')"}, {'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.dtypes, '__array__')"}]},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"},
                                                                             {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim <= 1'},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.sparse.to_coo(), order='C', dtype=np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                  {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, 'sparse')"}, {'XXX TODO XXX': '_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T.ndim > 1'}]},
                                                                             {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                        {'anyOf': [{'XXX TODO XXX': 'sp.issparse(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(_initialize_nmf(X, n_components, init=init, random_state=random_state)[1].T, order='C', dtype=np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'X.sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "X.sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X, 'dtype')"}, {'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "not hasattr(X.dtype, 'kind')"}, {'XXX TODO XXX': "X.dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(X.dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(X.dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(X.dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(X.dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse='csr', dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse='csr', dtype=np.float64, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse='csr', dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(X, accept_sparse='csr', dtype=np.float64, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=np.float64).fit)'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                  {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse='csr', dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse='csr', dtype=np.float64, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, accept_sparse='csr', dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': "not callable(_ensure_sparse_format(X, accept_sparse='csr', dtype=np.float64, False, True, True).fit)"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=np.float64).fit)'}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError(     "Unable to convert array of bytes/strings into decimal numbers with dtype=\'numeric\'"     ) from e ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(X.dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}, {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(X.dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(X.dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}, {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(X.dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).ndim < 3'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).ndim < 3'}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse='csr', dtype=np.float64, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(X, accept_sparse='csr', dtype=np.float64, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(X.sparse.to_coo(), accept_sparse='csr', dtype=np.float64, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_num_samples(_ensure_sparse_format(X, accept_sparse='csr', dtype=np.float64, False, True, True)) >= 1"}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(X.sparse.to_coo(), accept_sparse='csr', dtype=np.float64, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(X, accept_sparse='csr', dtype=np.float64, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(X.sparse.to_coo(), accept_sparse='csr', dtype=np.float64, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "_ensure_sparse_format(X, accept_sparse='csr', dtype=np.float64, False, True, True).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(X, None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_random_state, Exception: raise ValueError(     '%r cannot be used to seed a numpy.random.RandomState instance' % seed) ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['cd']}}}}, {'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]},
           {'description': "From /decomposition/_nmf.py:None:_beta_loss_to_float, Exception: raise ValueError(     'Invalid beta_loss parameter: got %r instead of one of %r, or a float.' %     (beta_loss, allowed_beta_loss.keys())) ",
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['cd']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['mu']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(_beta_loss_to_float(_check_string_param(self.solver, self.regularization, self.beta_loss, self.init)), str)'}, {'XXX TODO XXX': "_beta_loss_to_float(_check_string_param(self.solver, self.regularization, self.beta_loss, self.init)) not in {'frobenius': 2, 'kullback-leibler': 1, 'itakura-saito': 0}"}, {'XXX TODO XXX': 'isinstance(allowed_beta_loss[beta_loss], numbers.Number)'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(_beta_loss_to_float(_check_string_param(self.solver, self.regularization, self.beta_loss, self.init)), str)'}, {'XXX TODO XXX': "_beta_loss_to_float(_check_string_param(self.solver, self.regularization, self.beta_loss, self.init)) in {'frobenius': 2, 'kullback-leibler': 1, 'itakura-saito': 0}"}]}, {'XXX TODO XXX': 'isinstance(_beta_loss_to_float(_check_string_param(self.solver, self.regularization, self.beta_loss, self.init)), numbers.Number)'}]}]}]},
           {'description': "From /decomposition/_nmf.py:None:_beta_loss_to_float, Exception: raise ValueError(     'Invalid beta_loss parameter: got %r instead of one of %r, or a float.' %     (beta_loss, allowed_beta_loss.keys())) ",
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['cd']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['mu']}}}},
                      {'XXX TODO XXX': 'n_iter not in range(1, self.max_iter + 1)'},
                      {'type': 'object', 'properties': {'tol': {'type': 'number', 'maximum': 0}}},
                      {'XXX TODO XXX': 'n_iter % 10 != 0'},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(_beta_loss_to_float(_check_string_param(self.solver, self.regularization, self.beta_loss, self.init)), str)'}, {'XXX TODO XXX': "_beta_loss_to_float(_check_string_param(self.solver, self.regularization, self.beta_loss, self.init)) not in {'frobenius': 2, 'kullback-leibler': 1, 'itakura-saito': 0}"}, {'XXX TODO XXX': 'isinstance(allowed_beta_loss[beta_loss], numbers.Number)'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(_beta_loss_to_float(_check_string_param(self.solver, self.regularization, self.beta_loss, self.init)), str)'}, {'XXX TODO XXX': "_beta_loss_to_float(_check_string_param(self.solver, self.regularization, self.beta_loss, self.init)) in {'frobenius': 2, 'kullback-leibler': 1, 'itakura-saito': 0}"}]}, {'XXX TODO XXX': 'isinstance(_beta_loss_to_float(_check_string_param(self.solver, self.regularization, self.beta_loss, self.init)), numbers.Number)'}]}]}]},
           {'description': "From /decomposition/_nmf.py:None:_beta_loss_to_float, Exception: raise ValueError(     'Invalid beta_loss parameter: got %r instead of one of %r, or a float.' %     (beta_loss, allowed_beta_loss.keys())) ",
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['cd']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['mu']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(_check_string_param(self.solver, self.regularization, self.beta_loss, self.init), str)'}, {'XXX TODO XXX': "_check_string_param(self.solver, self.regularization, self.beta_loss, self.init) not in {'frobenius': 2, 'kullback-leibler': 1, 'itakura-saito': 0}"}, {'XXX TODO XXX': 'isinstance(allowed_beta_loss[beta_loss], numbers.Number)'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'isinstance(_check_string_param(self.solver, self.regularization, self.beta_loss, self.init), str)'}, {'XXX TODO XXX': "_check_string_param(self.solver, self.regularization, self.beta_loss, self.init) in {'frobenius': 2, 'kullback-leibler': 1, 'itakura-saito': 0}"}]}, {'XXX TODO XXX': 'isinstance(_check_string_param(self.solver, self.regularization, self.beta_loss, self.init), numbers.Number)'}]}]}]},
           {'description': "From /decomposition/_nmf.py:None:non_negative_factorization, Exception: raise ValueError(     'When beta_loss <= 0 and X contains zeros, the solver may diverge. Please add small values to X, or use a positive beta_loss.'     ) ", 'anyOf': [{'XXX TODO XXX': 'X.min() != 0'}, {'XXX TODO XXX': '_check_string_param(self.solver, self.regularization, self.beta_loss, self.init) > 0'}]},
           {'description': "From /decomposition/_nmf.py:None:non_negative_factorization, Exception: raise ValueError(     'Number of components must be a positive integer; got (n_components=%r)' %     n_components) ", 'allOf': [{'anyOf': [{'type': 'object', 'properties': {'n_components': {'not': {'enum': [None]}}}}, {'allOf': [{'XXX TODO XXX': 'isinstance(X.shape[1], numbers.Integral)'}, {'XXX TODO XXX': 'X.shape[1] > 0'}]}]}, {'anyOf': [{'type': 'object', 'properties': {'n_components': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'n_components': {'type': 'integer'}}}, {'type': 'object', 'properties': {'n_components': {'type': 'number', 'minimum': 0, 'exclusiveMinimum': True}}}]}]}]},
           {'description': "From /decomposition/_nmf.py:None:non_negative_factorization, Exception: raise ValueError(     'Maximum number of iterations must be a positive integer; got (max_iter=%r)'      % max_iter) ", 'allOf': [{'type': 'object', 'properties': {'max_iter': {'type': 'integer'}}}, {'type': 'object', 'properties': {'max_iter': {'type': 'number', 'minimum': 0}}}]},
           {'description': "From /decomposition/_nmf.py:None:non_negative_factorization, Exception: raise ValueError(     'Tolerance for stopping criteria must be positive; got (tol=%r)' % tol) ", 'allOf': [{'type': 'object', 'properties': {'tol': {'type': 'number'}}}, {'type': 'object', 'properties': {'tol': {'type': 'number', 'minimum': 0}}}]},
           {'description': "From /decomposition/_nmf.py:None:non_negative_factorization, Exception: raise TypeError(     'H and W should have the same dtype as X. Got H.dtype = {} and W.dtype = {}.'     .format(H.dtype, W.dtype)) ", 'anyOf': [{'type': 'object', 'properties': {'init': {'not': {'enum': ['custom']}}}}, {'allOf': [{'XXX TODO XXX': "params.get('H', None).dtype == X.dtype"}, {'XXX TODO XXX': "params.get('W', None).dtype == X.dtype"}]}]},
           {'description': 'From /decomposition/_nmf.py:None:non_negative_factorization, Exception: raise ValueError("Invalid solver parameter \'%s\'." % solver) ', 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['cd']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['mu']}}}]},
           {'description': "From /decomposition/_nmf.py:None:_beta_loss_to_float, Exception: raise ValueError(     'Invalid beta_loss parameter: got %r instead of one of %r, or a float.' %     (beta_loss, allowed_beta_loss.keys())) ", 'allOf': [{'anyOf': [{'type': 'object', 'properties': {'beta_loss': {'not': {'type': 'string'}}}}, {'XXX TODO XXX': "self.beta_loss not in {'frobenius': 2, 'kullback-leibler': 1, 'itakura-saito': 0}"}, {'XXX TODO XXX': 'isinstance(allowed_beta_loss[beta_loss], numbers.Number)'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'beta_loss': {'type': 'string'}}}, {'XXX TODO XXX': "self.beta_loss in {'frobenius': 2, 'kullback-leibler': 1, 'itakura-saito': 0}"}]}, {'type': 'object', 'properties': {'beta_loss': {'type': 'number'}}}]}]}]}
