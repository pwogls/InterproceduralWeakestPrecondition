{'allOf': [{'type': 'object',
            'required': ['alpha',
                         'l1_ratio',
                         'fit_intercept',
                         'normalize',
                         'precompute',
                         'max_iter',
                         'copy_X',
                         'tol',
                         'warm_start',
                         'positive',
                         'random_state',
                         'selection'],
            'relevantToOptimizer': ['alpha', 'fit_intercept', 'max_iter', 'copy_X', 'tol', 'positive', 'selection'],
            'additionalProperties': False,
            'properties': {'alpha': {'type': 'number',
                                     'minimumForOptimizer': 1e-10,
                                     'maximumForOptimizer': 1.0,
                                     'distribution': 'loguniform',
                                     'default': 1.0,
                                     'description': 'Constant that multiplies the penalty terms'},
                           'l1_ratio': {'type': 'number',
                                        'default': 0.5,
                                        'description': 'The ElasticNet mixing parameter, with ``0 <= l1_ratio <= 1``'},
                           'fit_intercept': {'type': 'boolean',
                                             'default': True,
                                             'description': 'Whether the intercept should be estimated or not'},
                           'normalize': {'type': 'boolean',
                                         'default': False,
                                         'description': 'This parameter is ignored when ``fit_intercept`` is set to '
                                                        'False'},
                           'precompute': {'anyOf': [{'type': 'array',
                                                     'items': {'laleType': 'Any', 'XXX TODO XXX': 'item type'},
                                                     'XXX TODO XXX': 'True | False | array-like'},
                                                    {'type': 'boolean'}],
                                          'default': False,
                                          'description': 'Whether to use a precomputed Gram matrix to speed up '
                                                         'calculations'},
                           'max_iter': {'type': 'integer',
                                        'minimumForOptimizer': 10,
                                        'maximumForOptimizer': 1000,
                                        'distribution': 'uniform',
                                        'default': 1000,
                                        'description': 'The maximum number of iterations'},
                           'copy_X': {'type': 'boolean',
                                      'default': True,
                                      'description': 'If ``True``, X will be copied; else, it may be overwritten.'},
                           'tol': {'type': 'number',
                                   'minimumForOptimizer': 1e-08,
                                   'maximumForOptimizer': 0.01,
                                   'distribution': 'loguniform',
                                   'default': 0.0001,
                                   'description': 'The tolerance for the optimization: if the updates are smaller than '
                                                  '``tol``, the optimization code checks the dual gap for optimality '
                                                  'and continues until it is smaller than ``tol``.'},
                           'warm_start': {'type': 'boolean',
                                          'default': False,
                                          'description': 'When set to ``True``, reuse the solution of the previous '
                                                         'call to fit as initialization, otherwise, just erase the '
                                                         'previous solution'},
                           'positive': {'type': 'boolean',
                                        'default': False,
                                        'description': 'When set to ``True``, forces the coefficients to be positive.'},
                           'random_state': {'anyOf': [{'type': 'integer'},
                                                      {'laleType': 'numpy.random.RandomState'},
                                                      {'enum': [None]}],
                                            'default': None,
                                            'description': 'The seed of the pseudo random number generator that '
                                                           'selects a random feature to update'},
                           'selection': {'enum': ['random', 'cyclic'],
                                         'default': 'cyclic',
                                         'description': "If set to 'random', a random coefficient is updated every "
                                                        'iteration rather than looping over features sequentially by '
                                                        'default'}}}]}
