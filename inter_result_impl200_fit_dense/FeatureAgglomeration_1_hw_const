{'description': 'Agglomerate features.',
 'allOf': [{'type': 'object',
            'required': ['memory', 'compute_full_tree', 'pooling_func'],
            'relevantToOptimizer': ['affinity', 'compute_full_tree', 'linkage'],
            'additionalProperties': False,
            'properties': {'n_clusters': {'default': 2,
                                          'description': 'The number of clusters to find.',
                                          'forOptimizer': False,
                                          'anyOf': [{'type': 'integer',
                                                     'minimumForOptimizer': 2,
                                                     'maximumForOptimizer': 8,
                                                     'laleMaximum': 'X/maxItems'},
                                                    {'forOptimizer': False, 'enum': [None]}]},
                           'affinity': {'anyOf': [{'enum': ['euclidean',
                                                            'l1',
                                                            'l2',
                                                            'manhattan',
                                                            'cosine',
                                                            'precomputed']},
                                                  {'forOptimizer': False, 'laleType': 'callable'}],
                                        'default': 'euclidean',
                                        'description': 'Metric used to compute the linkage.'},
                           'memory': {'anyOf': [{'description': 'Path to the caching directory.', 'type': 'string'},
                                                {'description': 'Object with the joblib.Memory interface',
                                                 'type': 'object',
                                                 'forOptimizer': False},
                                                {'description': 'No caching.', 'enum': [None]}],
                                      'default': None,
                                      'description': 'Used to cache the output of the computation of the tree.'},
                           'connectivity': {'anyOf': [{'type': 'array',
                                                       'items': {'type': 'array', 'items': {'type': 'number'}}},
                                                      {'laleType': 'callable',
                                                       'forOptimizer': False,
                                                       'description': 'A callable that transforms the data into a '
                                                                      'connectivity matrix, such as derived from '
                                                                      'kneighbors_graph.'},
                                                      {'enum': [None]}],
                                            'default': None,
                                            'description': 'Connectivity matrix. Defines for each feature the '
                                                           'neighboring features following a given structure of the '
                                                           'data.'},
                           'compute_full_tree': {'anyOf': [{'type': 'boolean'}, {'enum': ['auto']}],
                                                 'default': 'auto',
                                                 'description': 'Stop early the construction of the tree at '
                                                                'n_clusters.'},
                           'linkage': {'enum': ['ward', 'complete', 'average', 'single'],
                                       'default': 'ward',
                                       'description': 'Which linkage criterion to use. The linkage criterion '
                                                      'determines which distance to use between sets of features.'},
                           'pooling_func': {'description': 'This combines the values of agglomerated features into a '
                                                           'single value, and should accept an array of shape [M, N] '
                                                           'and the keyword argument axis=1, and reduce it to an array '
                                                           'of size [M].',
                                            'laleType': 'callable',
                                            'default': <function mean at 0x000002345F2D30D0>},
                           'distance_threshold': {'default': None,
                                                  'description': 'The linkage distance threshold above which, clusters '
                                                                 'will not be merged.',
                                                  'anyOf': [{'type': 'number'}, {'enum': [None]}]},
                           'compute_distances': {'default': False,
                                                 'description': 'Computes distances between clusters even if '
                                                                'distance_threshold is not used. This can be used to '
                                                                'make dendrogram visualization, but introduces a '
                                                                'computational and memory overhead.',
                                                 'forOptimizer': False,
                                                 'type': 'boolean'}}},
           {'description': 'affinity, if linkage is "ward", only "euclidean" is accepted',
            'anyOf': [{'type': 'object', 'properties': {'affinity': {'enum': ['euclidean']}}},
                      {'type': 'object', 'properties': {'linkage': {'not': {'enum': ['ward']}}}}]},
           {'description': 'n_clusters must be None if distance_threshold is not None.',
            'anyOf': [{'type': 'object', 'properties': {'n_clusters': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'distance_threshold': {'enum': [None]}}}]},
           {'description': 'compute_full_tree must be True if distance_threshold is not None.',
            'anyOf': [{'type': 'object', 'properties': {'compute_full_tree': {'enum': ['True']}}},
                      {'type': 'object', 'properties': {'distance_threshold': {'enum': [None]}}}]}]}
