{'allOf': [{'type': 'object',
            'required': ['l1_ratio',
                         'eps',
                         'n_alphas',
                         'alphas',
                         'fit_intercept',
                         'normalize',
                         'precompute',
                         'max_iter',
                         'tol',
                         'cv',
                         'copy_X',
                         'verbose',
                         'n_jobs',
                         'positive',
                         'random_state',
                         'selection'],
            'relevantToOptimizer': ['l1_ratio',
                                    'eps',
                                    'n_alphas',
                                    'alpha',
                                    'fit_intercept',
                                    'normalize',
                                    'precompute',
                                    'max_iter',
                                    'tol',
                                    'cv',
                                    'copy_X',
                                    'positive',
                                    'selection'],
            'additionalProperties': False,
            'properties': {'l1_ratio': {'XXX TODO XXX': 'float or array of floats, optional',
                                        'description': 'float between 0 and 1 passed to ElasticNet (scaling between l1 '
                                                       'and l2 penalties)',
                                        'type': 'number',
                                        'minimumForOptimizer': 0.0,
                                        'maximumForOptimizer': 1.0,
                                        'distribution': 'uniform',
                                        'default': 0.5},
                           'eps': {'type': 'number',
                                   'minimumForOptimizer': 0.001,
                                   'maximumForOptimizer': 0.1,
                                   'distribution': 'loguniform',
                                   'default': 0.001,
                                   'description': 'Length of the path'},
                           'n_alphas': {'type': 'integer',
                                        'minimumForOptimizer': 100,
                                        'maximumForOptimizer': 101,
                                        'distribution': 'uniform',
                                        'default': 100,
                                        'description': 'Number of alphas along the regularization path, used for each '
                                                       'l1_ratio.'},
                           'alphas': {'anyOf': [{'type': 'array',
                                                 'items': {'laleType': 'Any', 'XXX TODO XXX': 'item type'},
                                                 'XXX TODO XXX': 'numpy array, optional'},
                                                {'enum': [None]}],
                                      'default': None,
                                      'description': 'List of alphas where to compute the models'},
                           'fit_intercept': {'type': 'boolean',
                                             'default': True,
                                             'description': 'whether to calculate the intercept for this model'},
                           'normalize': {'type': 'boolean',
                                         'default': False,
                                         'description': 'This parameter is ignored when ``fit_intercept`` is set to '
                                                        'False'},
                           'precompute': {'anyOf': [{'type': 'array',
                                                     'items': {'laleType': 'Any', 'XXX TODO XXX': 'item type'},
                                                     'XXX TODO XXX': "True | False | 'auto' | array-like",
                                                     'forOptimizer': False},
                                                    {'enum': ['auto']}],
                                          'default': 'auto',
                                          'description': 'Whether to use a precomputed Gram matrix to speed up '
                                                         'calculations'},
                           'max_iter': {'type': 'integer',
                                        'minimumForOptimizer': 10,
                                        'maximumForOptimizer': 1000,
                                        'distribution': 'uniform',
                                        'default': 1000,
                                        'description': 'The maximum number of iterations'},
                           'tol': {'type': 'number',
                                   'minimumForOptimizer': 1e-08,
                                   'maximumForOptimizer': 0.01,
                                   'distribution': 'loguniform',
                                   'default': 0.0001,
                                   'description': 'The tolerance for the optimization: if the updates are smaller than '
                                                  '``tol``, the optimization code checks the dual gap for optimality '
                                                  'and continues until it is smaller than ``tol``.'},
                           'cv': {'description': 'Cross-validation as integer or as object that has a split function.\n'
                                                 '                        The fit method performs cross validation on '
                                                 'the input dataset for per\n'
                                                 '                        trial, and uses the mean cross validation '
                                                 'performance for optimization.\n'
                                                 '                        This behavior is also impacted by '
                                                 'handle_cv_failure flag.\n'
                                                 '                        If integer: number of folds in '
                                                 'sklearn.model_selection.StratifiedKFold.\n'
                                                 '                        If object with split function: generator '
                                                 'yielding (train, test) splits\n'
                                                 '                        as arrays of indices. Can use any of the '
                                                 'iterators from\n'
                                                 '                        '
                                                 'https://scikit-learn.org/stable/modules/cross_validation.html#cross-validation-iterators.',
                                  'anyOf': [{'type': 'integer',
                                             'minimum': 1,
                                             'default': 5,
                                             'minimumForOptimizer': 3,
                                             'maximumForOptimizer': 4,
                                             'distribution': 'uniform'},
                                            {'laleType': 'Any', 'forOptimizer': False}]},
                           'copy_X': {'type': 'boolean',
                                      'default': True,
                                      'description': 'If ``True``, X will be copied; else, it may be overwritten.'},
                           'verbose': {'anyOf': [{'type': 'boolean'}, {'type': 'integer'}],
                                       'default': 0,
                                       'description': 'Amount of verbosity.'},
                           'n_jobs': {'anyOf': [{'type': 'integer'}, {'enum': [None]}],
                                      'default': 1,
                                      'description': 'Number of CPUs to use during the cross validation'},
                           'positive': {'type': 'boolean',
                                        'default': False,
                                        'description': 'When set to ``True``, forces the coefficients to be positive.'},
                           'random_state': {'anyOf': [{'type': 'integer'},
                                                      {'laleType': 'numpy.random.RandomState'},
                                                      {'enum': [None]}],
                                            'default': None,
                                            'description': 'The seed of the pseudo random number generator that '
                                                           'selects a random feature to update'},
                           'selection': {'enum': ['random', 'cyclic'],
                                         'default': 'cyclic',
                                         'description': "If set to 'random', a random coefficient is updated every "
                                                        'iteration rather than looping over features sequentially by '
                                                        'default'}}}]}
