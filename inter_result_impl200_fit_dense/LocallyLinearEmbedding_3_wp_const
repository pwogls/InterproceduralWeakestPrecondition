{'allOf': [{'type': 'object',
            'required': ['n_neighbors', 'n_components', 'reg', 'eigen_solver', 'tol', 'max_iter', 'method', 'hessian_tol', 'modified_tol', 'neighbors_algorithm', 'random_state', 'n_jobs'],
            'relevantToOptimizer': ['n_neighbors', 'eigen_solver', 'tol', 'max_iter', 'method', 'neighbors_algorithm'],
            'additionalProperties': False,
            'properties': {'n_neighbors': {'type': 'integer', 'minimumForOptimizer': 5, 'maximumForOptimizer': 20, 'distribution': 'uniform', 'default': 5, 'description': 'number of neighbors to consider for each point.'},
                           'n_components': {'type': 'integer', 'minimumForOptimizer': 2, 'maximumForOptimizer': 256, 'distribution': 'uniform', 'default': 2, 'description': 'number of coordinates for the manifold'},
                           'reg': {'type': 'number', 'default': 0.001, 'description': 'regularization constant, multiplies the trace of the local covariance matrix of the distances.'},
                           'eigen_solver': {'enum': ['auto', 'arpack', 'dense'], 'default': 'auto', 'description': 'auto : algorithm will attempt to choose the best method for input data  arpack : use arnoldi iteration in shift-invert mode'},
                           'tol': {'type': 'number', 'minimumForOptimizer': 1e-08, 'maximumForOptimizer': 0.01, 'distribution': 'loguniform', 'default': 1e-06, 'description': "Tolerance for 'arpack' method Not used if eigen_solver=='dense'."},
                           'max_iter': {'type': 'integer', 'minimumForOptimizer': 10, 'maximumForOptimizer': 1000, 'distribution': 'uniform', 'default': 100, 'description': 'maximum number of iterations for the arpack solver'},
                           'method': {'XXX TODO XXX': "string ('standard', 'hessian', 'modified' or 'ltsa')", 'description': 'standard : use the standard locally linear embedding algorithm', 'enum': ['ltsa', 'modified', 'standard', 'hessian'], 'default': 'standard'},
                           'hessian_tol': {'type': 'number', 'default': 0.0001, 'description': 'Tolerance for Hessian eigenmapping method'},
                           'modified_tol': {'type': 'number', 'default': 1e-12, 'description': 'Tolerance for modified LLE method'},
                           'neighbors_algorithm': {'enum': ['auto', 'brute', 'kd_tree', 'ball_tree'], 'default': 'auto', 'description': 'algorithm to use for nearest neighbors search, passed to neighbors.NearestNeighbors instance'},
                           'random_state': {'anyOf': [{'type': 'integer'}, {'laleType': 'numpy.random.RandomState'}, {'enum': [None]}], 'default': None, 'description': 'If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`'},
                           'n_jobs': {'anyOf': [{'type': 'integer'}, {'enum': [None]}], 'default': 1, 'description': 'The number of parallel jobs to run'}}},
           {'description': "From /utils/validation.py:None:check_random_state, Exception: raise ValueError(     '%r cannot be used to seed a numpy.random.RandomState instance' % seed) ", 'anyOf': [{'type': 'object', 'properties': {'random_state': {'enum': [None]}}}, {'XXX TODO XXX': 'self.random_state is np.random'}, {'XXX TODO XXX': 'isinstance(self.random_state, np.random.RandomState)'}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'X.sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "X.sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X, 'dtype')"}, {'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "not hasattr(X.dtype, 'kind')"}, {'XXX TODO XXX': "X.dtype.kind != 'c'"}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for float in list(X.dtypes)))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=float), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=float).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=float).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=float).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=float), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=float).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=float).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=float).dtype.kind != 'c'"}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': 'all((False for float in list(X.dtypes)))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=float), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=float).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=float).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=float).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=float), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=float).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=float).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=float).dtype.kind != 'c'"}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=float), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=float).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=float).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=float).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=float), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=float).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=float).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=float).dtype.kind != 'c'"}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                       {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                       {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for float in list(X.dtypes)))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=float), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=float).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=float).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=float).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=float), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=float).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=float).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=float).dtype.kind != 'c'"}]}]}]},
                                                                  {'anyOf': [{'XXX TODO XXX': 'all((False for float in list(X.dtypes)))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=float), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=float).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=float).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=float).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=float), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=float).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=float).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=float).dtype.kind != 'c'"}]}]}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=float), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=float).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=float).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=float).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=float), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=float).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=float).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=float).dtype.kind != 'c'"}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'type': 'object', 'laleNot': 'X/isSparse'},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=float, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=float, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=float), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=float).fit)'}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, False, dtype=float, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, False, dtype=float, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=float), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=float).fit)'}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                 {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                 {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=float, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=float, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=float), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=float).fit)'}]}]}]},
                                            {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, False, dtype=float, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, False, dtype=float, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=float), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=float).fit)'}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Pandas DataFrame with mixed sparse extension arrays generated a sparse matrix with object dtype which can not be converted to a scipy sparse matrix.Sparse extension arrays should all have the same numeric type.'     ) ", 'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=float).ndim < 3'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=float).ndim < 3'}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=float).ndim < 3'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=float).ndim < 3'}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=float, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=float)) >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, False, dtype=float, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=float)) >= 1'}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=float, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=float)) >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, False, dtype=float, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=float)) >= 1'}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), False, dtype=float, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=float).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, False, dtype=float, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=float).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                      {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), False, dtype=float, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=float).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, False, dtype=float, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=float).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo().dtype.kind != 'c'"}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtype is None'}, {'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtype, 'kind')"}, {'XXX TODO XXX': "NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(FLOAT_DTYPES, np.dtype) for FLOAT_DTYPES in list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) is None'},
                                                                                                                                                          {'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) not in FLOAT_DTYPES'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) in FLOAT_DTYPES'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(FLOAT_DTYPES, np.dtype) for FLOAT_DTYPES in list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                        {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(FLOAT_DTYPES, np.dtype) for FLOAT_DTYPES in list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) is None'},
                                                                                                                                                          {'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) not in FLOAT_DTYPES'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) in FLOAT_DTYPES'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(FLOAT_DTYPES, np.dtype) for FLOAT_DTYPES in list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is None"},
                                                                                                                                                          {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) not in FLOAT_DTYPES"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) in FLOAT_DTYPES"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                        {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is None"},
                                                                                                                                    {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) not in FLOAT_DTYPES"},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) in FLOAT_DTYPES"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                        {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64).fit)'}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).fit)'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=FLOAT_DTYPES, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=FLOAT_DTYPES, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=FLOAT_DTYPES, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=FLOAT_DTYPES, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).fit)'}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                        {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64).fit)'}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).fit)'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) not in FLOAT_DTYPES"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, None, False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).astype(np.float64).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).fit)'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, None, False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).astype(np.float64).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) in FLOAT_DTYPES"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).fit)'}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64).fit)'}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=FLOAT_DTYPES, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=FLOAT_DTYPES, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=FLOAT_DTYPES, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=FLOAT_DTYPES, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).fit)'}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError(     "Unable to convert array of bytes/strings into decimal numbers with dtype=\'numeric\'"     ) from e ',
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(FLOAT_DTYPES, np.dtype) for FLOAT_DTYPES in list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) is None'},
                                                                                                                                                          {'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) not in FLOAT_DTYPES'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) in FLOAT_DTYPES'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(FLOAT_DTYPES, np.dtype) for FLOAT_DTYPES in list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                        {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(FLOAT_DTYPES, np.dtype) for FLOAT_DTYPES in list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) is None'},
                                                                                                                                                          {'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) not in FLOAT_DTYPES'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) in FLOAT_DTYPES'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(FLOAT_DTYPES, np.dtype) for FLOAT_DTYPES in list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is None"},
                                                                                                                                                          {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) not in FLOAT_DTYPES"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) in FLOAT_DTYPES"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                        {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is None"},
                                                                                                                                    {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) not in FLOAT_DTYPES"},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) in FLOAT_DTYPES"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                        {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                        {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                        {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).ndim < 3'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                    {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                    {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                    {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).ndim < 3"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                    {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).ndim < 3"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).ndim < 3'}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                        {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                        {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                        {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).ndim < 3'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) not in FLOAT_DTYPES"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).ndim < 3'}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) in FLOAT_DTYPES"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                    {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).ndim < 3"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                    {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).ndim < 3"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).ndim < 3'}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                        {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=np.float64, False, True, True)) >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=FLOAT_DTYPES, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64)) >= 1"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64)) >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES)) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=FLOAT_DTYPES, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64)) >= 1"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES)) >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                        {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=np.float64, False, True, True)) >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) not in FLOAT_DTYPES"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, None, False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None)) >= 1'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, None, False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None)) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) in FLOAT_DTYPES"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64)) >= 1'}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=FLOAT_DTYPES, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64)) >= 1"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64)) >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES)) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=FLOAT_DTYPES, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64)) >= 1"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES)) >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                        {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=FLOAT_DTYPES, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=FLOAT_DTYPES, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                        {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) not in FLOAT_DTYPES"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) in FLOAT_DTYPES"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=FLOAT_DTYPES, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=FLOAT_DTYPES, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo().dtype.kind != 'c'"}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtype is None'}, {'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtype, 'kind')"}, {'XXX TODO XXX': "NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(FLOAT_DTYPES, np.dtype) for FLOAT_DTYPES in list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) is None'},
                                                                                                                                                          {'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) not in FLOAT_DTYPES'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) in FLOAT_DTYPES'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(FLOAT_DTYPES, np.dtype) for FLOAT_DTYPES in list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                        {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(FLOAT_DTYPES, np.dtype) for FLOAT_DTYPES in list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) is None'},
                                                                                                                                                          {'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) not in FLOAT_DTYPES'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) in FLOAT_DTYPES'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(FLOAT_DTYPES, np.dtype) for FLOAT_DTYPES in list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is None"},
                                                                                                                                                          {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) not in FLOAT_DTYPES"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) in FLOAT_DTYPES"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                        {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is None"},
                                                                                                                                    {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) not in FLOAT_DTYPES"},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) in FLOAT_DTYPES"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                        {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64).fit)'}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).fit)'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=FLOAT_DTYPES, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=FLOAT_DTYPES, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=FLOAT_DTYPES, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=FLOAT_DTYPES, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).fit)'}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                        {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64).fit)'}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).fit)'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) not in FLOAT_DTYPES"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, None, False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).astype(np.float64).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).fit)'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, None, False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).astype(np.float64).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) in FLOAT_DTYPES"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).fit)'}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=dtype[0], False, True, True).fit)'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64).fit)'}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=FLOAT_DTYPES, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=FLOAT_DTYPES, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).fit)'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=FLOAT_DTYPES, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=FLOAT_DTYPES, False, True, True).fit)'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).fit)"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).fit)"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64).fit)'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).fit)'}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError(     "Unable to convert array of bytes/strings into decimal numbers with dtype=\'numeric\'"     ) from e ',
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(FLOAT_DTYPES, np.dtype) for FLOAT_DTYPES in list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) is None'},
                                                                                                                                                          {'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) not in FLOAT_DTYPES'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) in FLOAT_DTYPES'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(FLOAT_DTYPES, np.dtype) for FLOAT_DTYPES in list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                        {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((isinstance(FLOAT_DTYPES, np.dtype) for FLOAT_DTYPES in list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) is None'},
                                                                                                                                                          {'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) not in FLOAT_DTYPES'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)) in FLOAT_DTYPES'}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((isinstance(FLOAT_DTYPES, np.dtype) for FLOAT_DTYPES in list(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                                              {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is None"},
                                                                                                                                                          {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) not in FLOAT_DTYPES"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) in FLOAT_DTYPES"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                                                {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                                                {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                                        {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is None"},
                                                                                                                                    {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) not in FLOAT_DTYPES"},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) in FLOAT_DTYPES"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                                          {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                                          {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                        {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                        {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                        {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).ndim < 3'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                    {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                    {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                    {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).ndim < 3"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                    {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).ndim < 3"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).ndim < 3'}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                        {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                        {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                        {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).ndim < 3'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) not in FLOAT_DTYPES"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).ndim < 3'}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) in FLOAT_DTYPES"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim < 3"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                    {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).ndim < 3"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).ndim < 3'}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                    {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).ndim < 3"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).ndim < 3"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).ndim < 3'}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                        {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=np.float64, False, True, True)) >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=FLOAT_DTYPES, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64)) >= 1"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64)) >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES)) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=FLOAT_DTYPES, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64)) >= 1"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES)) >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                        {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=np.float64, False, True, True)) >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) not in FLOAT_DTYPES"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, None, False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None)) >= 1'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, None, False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None)) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) in FLOAT_DTYPES"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64)) >= 1'}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=dtype[0], False, True, True)) >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64)) >= 1"}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0])) >= 1'}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=FLOAT_DTYPES, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64)) >= 1"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64)) >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES)) >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=FLOAT_DTYPES, False, True, True)) >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64)) >= 1"}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False)) >= 1"}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64)) >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES)) >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                        {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=FLOAT_DTYPES, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=FLOAT_DTYPES, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtypes')"}, {'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}},
                                                                  {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                        {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                   {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is None"},
                                                                                                              {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) not in FLOAT_DTYPES"},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'dtype', None) in FLOAT_DTYPES"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                               {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                                          {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'},
                                                                                                                                                                                {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]},
                                                                                                                                                                                {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                                           {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'isinstance(FLOAT_DTYPES, [list, tuple])'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim <= 1'},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), False, dtype=FLOAT_DTYPES, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None).astype(FLOAT_DTYPES, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).sparse.to_coo(), None, dtype=FLOAT_DTYPES).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), 'sparse')"}, {'XXX TODO XXX': 'NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs).ndim > 1'}]},
                                                                                                              {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), False, dtype=FLOAT_DTYPES, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                         {'anyOf': [{'XXX TODO XXX': 'sp.issparse(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs))'},
                                                                                                                                    {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': [None]}}},
                                                                                                                                                          {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind not in 'iu'"},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).astype(np.float64).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None).astype(FLOAT_DTYPES, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "np.dtype(FLOAT_DTYPES).kind in 'iu'"}]},
                                                                                                                                                          {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'not': {'enum': ['numeric']}}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]},
                                                                                                                                                                     {'anyOf': [{'allOf': [{'type': 'object', 'properties': {'FLOAT_DTYPES': {'type': 'string'}}}, {'type': 'object', 'properties': {'FLOAT_DTYPES': {'enum': ['numeric']}}}, {'XXX TODO XXX': "np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).dtype.kind in 'OUSV'"}]}, {'XXX TODO XXX': 'np.asarray(NearestNeighbors(n_neighbors=self.n_neighbors + 1, n_jobs=self.n_jobs), None, dtype=FLOAT_DTYPES).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo().dtype.kind != 'c'"}]},
                                 {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtype')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].dtype is None'}, {'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtype, 'kind')"}, {'XXX TODO XXX': "knn.kneighbors(X, return_distance=False)[[:, 1:]].dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for int in list(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]])'}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for int in list(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]])'}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtypes')"}, {'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]])'}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype.kind != 'c'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for int in list(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]])'}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for int in list(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]])'}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtypes')"}, {'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]])'}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).dtype.kind != 'c'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtypes')"}, {'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), False, dtype=int, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), False, dtype=int, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).fit)"}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(knn.kneighbors(X, return_distance=False)[[:, 1:]], False, dtype=int, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(knn.kneighbors(X, return_distance=False)[[:, 1:]], False, dtype=int, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]])'}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).fit)"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtypes')"}, {'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), False, dtype=int, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), False, dtype=int, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).fit)"}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(knn.kneighbors(X, return_distance=False)[[:, 1:]], False, dtype=int, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(knn.kneighbors(X, return_distance=False)[[:, 1:]], False, dtype=int, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]])'}, {'XXX TODO XXX': "not hasattr(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).fit)"}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]])'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtypes')"}, {'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]])'}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).ndim < 3"}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtypes')"}, {'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]])'}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).ndim < 3"}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtypes')"}, {'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), False, dtype=int, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo())'}, {'XXX TODO XXX': "_num_samples(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False)) >= 1"}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(knn.kneighbors(X, return_distance=False)[[:, 1:]], False, dtype=int, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]])'}, {'XXX TODO XXX': "_num_samples(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False)) >= 1"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtypes')"}, {'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), False, dtype=int, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo())'}, {'XXX TODO XXX': "_num_samples(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False)) >= 1"}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(knn.kneighbors(X, return_distance=False)[[:, 1:]], False, dtype=int, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]])'}, {'XXX TODO XXX': "_num_samples(np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False)) >= 1"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'method': {'not': {'enum': ['standard']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtypes')"}, {'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), False, dtype=int, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(knn.kneighbors(X, return_distance=False)[[:, 1:]], False, dtype=int, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]])'}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'dtypes')"}, {'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]].dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), False, dtype=int, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]].sparse.to_coo(), None).astype(int, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(knn.kneighbors(X, return_distance=False)[[:, 1:]], 'sparse')"}, {'XXX TODO XXX': 'knn.kneighbors(X, return_distance=False)[[:, 1:]].ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(knn.kneighbors(X, return_distance=False)[[:, 1:]], False, dtype=int, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(knn.kneighbors(X, return_distance=False)[[:, 1:]])'}, {'XXX TODO XXX': "np.asarray(knn.kneighbors(X, return_distance=False)[[:, 1:]], None).astype(int, casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_random_state, Exception: raise ValueError(     '%r cannot be used to seed a numpy.random.RandomState instance' % seed) ", 'allOf': [{'anyOf': [{'type': 'object', 'properties': {'eigen_solver': {'not': {'enum': ['auto']}}}}, {'XXX TODO XXX': 'M.shape[0] <= 200'}, {'XXX TODO XXX': 'self.n_components + 1 >= 10'}, {'XXX TODO XXX': 'check_random_state(self.random_state) is None'}, {'XXX TODO XXX': 'check_random_state(self.random_state) is np.random'}, {'XXX TODO XXX': 'isinstance(check_random_state(self.random_state), np.random.RandomState)'}]}, {'anyOf': [{'type': 'object', 'properties': {'eigen_solver': {'enum': ['auto']}}}, {'type': 'object', 'properties': {'eigen_solver': {'not': {'enum': ['arpack']}}}}, {'XXX TODO XXX': 'check_random_state(self.random_state) is None'}, {'XXX TODO XXX': 'check_random_state(self.random_state) is np.random'}, {'XXX TODO XXX': 'isinstance(check_random_state(self.random_state), np.random.RandomState)'}]}]},
           {'description': 'From /manifold/_locally_linear.py:None:null_space, Exception: raise ValueError(     "Error in determining null-space with ARPACK. Error message: \'%s\'. Note that eigen_solver=\'arpack\' can fail when the weight matrix is singular or otherwise ill-behaved. In that case, eigen_solver=\'dense\' is recommended. See online documentation for more information."      % e) from e ', 'allOf': [{'anyOf': [{'type': 'object', 'properties': {'eigen_solver': {'not': {'enum': ['auto']}}}}, {'XXX TODO XXX': 'M.shape[0] <= 200'}, {'XXX TODO XXX': 'self.n_components + 1 >= 10'}]}, {'anyOf': [{'type': 'object', 'properties': {'eigen_solver': {'enum': ['auto']}}}, {'type': 'object', 'properties': {'eigen_solver': {'not': {'enum': ['arpack']}}}}]}]},
           {'description': 'From /manifold/_locally_linear.py:None:null_space, Exception: raise ValueError("Unrecognized eigen_solver \'%s\'" % eigen_solver) ', 'anyOf': [{'type': 'object', 'properties': {'eigen_solver': {'enum': ['auto']}}}, {'type': 'object', 'properties': {'eigen_solver': {'enum': ['arpack']}}}, {'type': 'object', 'properties': {'eigen_solver': {'enum': ['dense']}}}]},
           {'description': 'From /manifold/_locally_linear.py:None:locally_linear_embedding, Exception: raise ValueError("unrecognized eigen_solver \'%s\'" % eigen_solver) ', 'type': 'object', 'properties': {'eigen_solver': {'enum': ['auto', 'arpack', 'dense']}}},
           {'description': 'From /manifold/_locally_linear.py:None:locally_linear_embedding, Exception: raise ValueError("unrecognized method \'%s\'" % method) ', 'type': 'object', 'properties': {'method': {'enum': ['standard', 'hessian', 'modified', 'ltsa']}}},
           {'description': "From /manifold/_locally_linear.py:None:locally_linear_embedding, Exception: raise ValueError(     'output dimension must be less than or equal to input dimension') ", 'type': 'object', 'properties': {'n_components': {'laleMaximum': 'X/items/maxItems'}}},
           {'description': "From /manifold/_locally_linear.py:None:locally_linear_embedding, Exception: raise ValueError(     'Expected n_neighbors <= n_samples,  but n_samples = %d, n_neighbors = %d'      % (N, n_neighbors)) ", 'type': 'object', 'properties': {'n_neighbors': {'laleMaximum': 'X/maxItems'}}},
           {'description': "From /manifold/_locally_linear.py:None:locally_linear_embedding, Exception: raise ValueError('n_neighbors must be positive') ", 'type': 'object', 'properties': {'n_neighbors': {'type': 'number', 'minimum': 0, 'exclusiveMinimum': True}}},
           {'description': 'From /manifold/_locally_linear.py:None:locally_linear_embedding, Exception: raise ValueError(     "for method=\'hessian\', n_neighbors must be greater than [n_components * (n_components + 3) / 2]"     ) ', 'anyOf': [{'type': 'object', 'properties': {'method': {'enum': ['standard']}}}, {'type': 'object', 'properties': {'method': {'not': {'enum': ['hessian']}}}}, {'XXX TODO XXX': 'self.n_neighbors > self.n_components + self.n_components * (self.n_components + 1) // 2'}]},
           {'description': "From /manifold/_locally_linear.py:None:locally_linear_embedding, Exception: raise ValueError('modified LLE requires n_neighbors >= n_components') ", 'anyOf': [{'type': 'object', 'properties': {'method': {'enum': ['standard']}}}, {'type': 'object', 'properties': {'method': {'enum': ['hessian']}}}, {'type': 'object', 'properties': {'method': {'not': {'enum': ['modified']}}}}, {'XXX TODO XXX': 'self.n_neighbors >= self.n_components'}]}]}
