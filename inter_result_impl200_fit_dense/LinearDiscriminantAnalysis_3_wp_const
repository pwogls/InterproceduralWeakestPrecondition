{'allOf': [{'type': 'object',
            'required': ['solver', 'shrinkage', 'priors', 'n_components', 'store_covariance', 'tol', 'covariance_estimator'],
            'relevantToOptimizer': ['solver', 'n_components', 'tol', 'shrinkage'],
            'additionalProperties': False,
            'properties': {'solver': {'enum': ['eigen', 'lsqr', 'svd'], 'default': 'svd', 'description': "Solver to use, possible values:   - 'svd': Singular value decomposition (default)"},
                           'shrinkage': {'anyOf': [{'enum': ['auto']}, {'type': 'number', 'minimumForOptimizer': 0, 'maximumForOptimizer': 1, 'minimum': 0, 'maximum': 1, 'exclusiveMinimum': True, 'exclusiveMaximum': True, 'distribution': 'uniform'}, {'enum': [None]}], 'default': None, 'description': 'Shrinkage parameter, possible values:   - None: no shrinkage (default)'},
                           'priors': {'XXX TODO XXX': 'array, optional, shape (n_classes,)', 'description': 'Class priors.', 'enum': [None], 'default': None},
                           'n_components': {'anyOf': [{'type': 'integer', 'minimumForOptimizer': 2, 'maximumForOptimizer': 256, 'distribution': 'uniform'}, {'enum': [None]}], 'default': None, 'description': 'Number of components (< n_classes - 1) for dimensionality reduction.'},
                           'store_covariance': {'type': 'boolean', 'default': False, 'description': "Additionally compute class covariance matrix (default False), used only in 'svd' solver"},
                           'tol': {'type': 'number', 'minimumForOptimizer': 1e-08, 'maximumForOptimizer': 0.01, 'distribution': 'loguniform', 'default': 0.0001, 'description': 'Threshold used for rank estimation in SVD solver'},
                           'covariance_estimator': {'anyOf': [{'type': 'string', 'forOptimizer': False}, {'enum': [None]}], 'default': None, 'description': 'type of (covariance estimator). Estimate the covariance matrices instead of relying on the empirical covariance estimator (with potential shrinkage)'}}},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'X.sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "X.sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X, 'dtype')"}, {'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "not hasattr(X.dtype, 'kind')"}, {'XXX TODO XXX': "X.dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in [np.float64, np.float32]'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in [np.float64, np.float32]'}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in [np.float64, np.float32]'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in [np.float64, np.float32]'}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                  {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), False, None, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, None).fit)'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, False, None, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, None).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Pandas DataFrame with mixed sparse extension arrays generated a sparse matrix with object dtype which can not be converted to a scipy sparse matrix.Sparse extension arrays should all have the same numeric type.'     ) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not self._get_tags()['requires_y']"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                                                  {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'enum': [None]}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'type': 'string'}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'type': 'string'}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]},
                                                       {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                                                  {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                                        {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'enum': [None]}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'type': 'string'}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'type': 'string'}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'enum': [None]}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'type': 'string'}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'type': 'string'}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "self._get_tags()['requires_y']"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                                                  {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'enum': [None]}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'type': 'string'}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'type': 'string'}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]},
                                                       {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                                                  {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                                        {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'enum': [None]}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'type': 'string'}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'type': 'string'}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'enum': [None]}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'type': 'string'}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'type': 'string'}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim < 3'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim < 3'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 2"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 2'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 2"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 2'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), False, None, False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, None)) >= 2'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, False, None, False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, None)) >= 2'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 2"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 2'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 2"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 2'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), False, None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, False, None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'X.sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "X.sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X, 'dtype')"}, {'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "not hasattr(X.dtype, 'kind')"}, {'XXX TODO XXX': "X.dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in [np.float64, np.float32]'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in [np.float64, np.float32]'}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in [np.float64, np.float32]'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in [np.float64, np.float32]'}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                  {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), False, None, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, None).fit)'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, False, None, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, None).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Pandas DataFrame with mixed sparse extension arrays generated a sparse matrix with object dtype which can not be converted to a scipy sparse matrix.Sparse extension arrays should all have the same numeric type.'     ) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'enum': [None]}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'type': 'string'}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'type': 'string'}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                  {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'enum': [None]}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'type': 'string'}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'type': 'string'}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'enum': [None]}}}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'type': 'string'}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'type': 'string'}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}, {'anyOf': [{'type': 'object', 'properties': {'self': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': "X.sparse.to_coo().dtype != np.dtype('object')"}, {'XXX TODO XXX': 'len(set([dt.subtype.name for dt in X.dtypes])) <= 1'}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}}, {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim < 3'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim < 3'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 2"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 2'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 2"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 2'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), False, None, False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, None)) >= 2'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, False, None, False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, None)) >= 2'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 2"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 2'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 2"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 2'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'type': 'object', 'properties': {'y': {'not': {'type': 'string'}}}},
                      {'type': 'object', 'properties': {'y': {'not': {'enum': ['no_validation']}}}},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), False, None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, False, None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'X.sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(X.sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "X.sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(X, 'dtype')"}, {'XXX TODO XXX': 'X.dtype is None'}, {'XXX TODO XXX': "not hasattr(X.dtype, 'kind')"}, {'XXX TODO XXX': "X.dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in [np.float64, np.float32]'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in [np.float64, np.float32]'}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(X.dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': 'not all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) not in [np.float64, np.float32]'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) is not None'}, {'XXX TODO XXX': 'np.result_type(*list(X.dtypes)) in [np.float64, np.float32]'}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'all((False for [np.float64, np.float32] in list(X.dtypes)))'},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                                                    {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                                               {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                                                    {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                                                    {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, None).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, None).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, None).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                                              {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]},
                                                                                                                         {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]},
                                                                                                              {'XXX TODO XXX': 'sp.issparse(X)'},
                                                                                                              {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'dtype')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype is None"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(X, None, dtype=dtype[0]).dtype.kind != 'c'"}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"},
                                                                  {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), False, None, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, None).fit)'}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, False, None, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, False, None, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, None), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, None).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"},
                                                                                        {'XXX TODO XXX': 'X.ndim <= 1'},
                                                                                        {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).fit)'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None).astype(dtype[0], casting='unsafe', False), 'fit')"}, {'XXX TODO XXX': "not callable(np.asarray(X, None).astype(dtype[0], casting='unsafe', False).fit)"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': "not hasattr(np.asarray(X, None, dtype=dtype[0]), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(X, None, dtype=dtype[0]).fit)'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim < 3'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim < 3'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim < 3'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim < 3"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim < 3'}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 2"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 2'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 2"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 2'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), False, None, False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, None)) >= 2'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, False, None, False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, None)) >= 2'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False)) >= 2"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X.sparse.to_coo(), None, dtype=dtype[0])) >= 2'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True)) >= 2'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "_num_samples(np.asarray(X, None).astype(dtype[0], casting='unsafe', False)) >= 2"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': '_num_samples(np.asarray(X, None, dtype=dtype[0])) >= 2'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}},
                      {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(X, 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(X, 'dtypes')"}, {'XXX TODO XXX': "hasattr(X.dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) not in [np.float64, np.float32]"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), False, None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, False, None, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'XXX TODO XXX': 'np.asarray(X, None, None).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "getattr(X, 'dtype', None) is not None"}, {'XXX TODO XXX': "getattr(X, 'dtype', None) in [np.float64, np.float32]"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X.sparse.to_coo(), False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X.sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X.sparse.to_coo(), None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X.sparse.to_coo(), None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(X, 'sparse')"}, {'XXX TODO XXX': 'X.ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(X, False, dtype=dtype[0], False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(X)'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': 'dtype[0] is None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind not in 'iu'"}, {'XXX TODO XXX': "np.asarray(X, None).astype(dtype[0], casting='unsafe', False).ndim != 2"}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': 'dtype[0] is not None'}, {'XXX TODO XXX': "np.dtype(dtype[0]).kind in 'iu'"}]}, {'XXX TODO XXX': 'np.asarray(X, None, dtype=dtype[0]).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:_assert_all_finite, Exception: raise ValueError(msg_err.format(type_err, msg_dtype if msg_dtype is not     None else X.dtype)) ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'XXX TODO XXX': "_get_config()['assume_finite']"}, {'allOf': [{'XXX TODO XXX': "y.dtype.kind in 'fc'"}, {'XXX TODO XXX': 'np.isfinite(_safe_accumulator_op(np.sum, y))'}]}, {'XXX TODO XXX': "y.dtype.kind not in 'fc'"}, {'XXX TODO XXX': 'np.isfinite(y).all()'}]},
           {'description': "From /utils/validation.py:None:_assert_all_finite, Exception: raise ValueError('Input contains NaN') ", 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'XXX TODO XXX': "_get_config()['assume_finite']"}, {'allOf': [{'XXX TODO XXX': "y.dtype.kind in 'fc'"}, {'XXX TODO XXX': 'np.isfinite(_safe_accumulator_op(np.sum, y))'}]}, {'XXX TODO XXX': "y.dtype.kind in 'fc'"}, {'XXX TODO XXX': "y.dtype != np.dtype('object')"}, {'XXX TODO XXX': 'not _object_dtype_isnan(y).any()'}]},
           {'description': "From /utils/validation.py:None:column_or_1d, Exception: raise ValueError('y should be a 1d array, got an array of shape {} instead.'     .format(shape)) ", 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'XXX TODO XXX': "not hasattr(X, 'fit')"}, {'XXX TODO XXX': 'not callable(X.fit)'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': "hasattr(X, '__array__')"}]},
           {'description': "From /utils/validation.py:None:_num_samples, Exception: raise TypeError(     'Singleton array %r cannot be considered a valid collection.' % x) ", 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is None'}, {'XXX TODO XXX': 'len(np.asarray(X).shape) != 0'}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is None'}, {'XXX TODO XXX': 'len(X.shape) != 0'}]}]}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) from type_error ', 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(X, '__len__')"}, {'XXX TODO XXX': "hasattr(X, 'shape')"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(np.asarray(X), 'shape')"}, {'XXX TODO XXX': 'np.asarray(X).shape is not None'}]}]}, {'anyOf': [{'XXX TODO XXX': "hasattr(X, '__array__')"}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}]}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "not hasattr(X, '__len__')"}, {'XXX TODO XXX': "not hasattr(X, 'shape')"}]}, {'allOf': [{'XXX TODO XXX': "hasattr(X, 'shape')"}, {'XXX TODO XXX': 'X.shape is not None'}]}]}, {'XXX TODO XXX': 'isinstance(x.shape[0], numbers.Integral)'}]}]},
           {'description': "From /utils/validation.py:None:check_consistent_length, Exception: raise ValueError(     'Found input variables with inconsistent numbers of samples: %r' % [int     (l) for l in lengths]) ", 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'allOf': [{'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}, {'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'XXX TODO XXX': 'len(np.unique([_num_samples(X) for X in arrays if X is not None])) <= 1'}]}]}]},
           {'description': "From /utils/validation.py:None:check_X_y, Exception: raise ValueError('y cannot be None') ", 'anyOf': [{'type': 'object', 'properties': {'y': {'enum': [None]}}}, {'allOf': [{'type': 'object', 'properties': {'y': {'type': 'string'}}}, {'type': 'object', 'properties': {'y': {'enum': ['no_validation']}}}]}, {'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}}]},
           {'description': "From /base.py:BaseEstimator:_validate_data, Exception: raise ValueError(     f'This {self.__class__.__name__} estimator requires y to be passed, but the target y is None.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'y': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "not self._get_tags()['requires_y']"}]},
           {'description': 'From /utils/validation.py:None:_assert_all_finite, Exception: raise ValueError(msg_err.format(type_err, msg_dtype if msg_dtype is not     None else X.dtype)) ', 'anyOf': [{'XXX TODO XXX': 'is_multilabel(x)'}, {'XXX TODO XXX': 'x.ndim > 2'}, {'allOf': [{'XXX TODO XXX': 'x.dtype == object'}, {'XXX TODO XXX': 'len(x)'}, {'XXX TODO XXX': 'isinstance(y.flat[0], str)'}]}, {'allOf': [{'XXX TODO XXX': 'x.ndim == 2'}, {'XXX TODO XXX': 'y.shape[1] == 0'}]}, {'XXX TODO XXX': "x.dtype.kind != 'f'"}, {'XXX TODO XXX': 'not np.any(x != x.astype(int))'}, {'XXX TODO XXX': "_get_config()['assume_finite']"}, {'allOf': [{'XXX TODO XXX': "x.dtype.kind in 'fc'"}, {'XXX TODO XXX': 'np.isfinite(_safe_accumulator_op(np.sum, x))'}]}, {'XXX TODO XXX': "x.dtype.kind not in 'fc'"}, {'XXX TODO XXX': 'np.isfinite(x).all()'}]},
           {'description': "From /utils/validation.py:None:_assert_all_finite, Exception: raise ValueError('Input contains NaN') ", 'anyOf': [{'XXX TODO XXX': 'is_multilabel(x)'}, {'XXX TODO XXX': 'x.ndim > 2'}, {'allOf': [{'XXX TODO XXX': 'x.dtype == object'}, {'XXX TODO XXX': 'len(x)'}, {'XXX TODO XXX': 'isinstance(y.flat[0], str)'}]}, {'allOf': [{'XXX TODO XXX': 'x.ndim == 2'}, {'XXX TODO XXX': 'y.shape[1] == 0'}]}, {'XXX TODO XXX': "x.dtype.kind != 'f'"}, {'XXX TODO XXX': 'not np.any(x != x.astype(int))'}, {'XXX TODO XXX': "_get_config()['assume_finite']"}, {'allOf': [{'XXX TODO XXX': "x.dtype.kind in 'fc'"}, {'XXX TODO XXX': 'np.isfinite(_safe_accumulator_op(np.sum, x))'}]}, {'XXX TODO XXX': "x.dtype.kind in 'fc'"}, {'XXX TODO XXX': "x.dtype != np.dtype('object')"}, {'XXX TODO XXX': 'not _object_dtype_isnan(x).any()'}]},
           {'description': "From /utils/multiclass.py:None:type_of_target, Exception: raise ValueError(     'Expected array-like (array or non-string sequence), got %r' % y) ", 'allOf': [{'anyOf': [{'XXX TODO XXX': 'isinstance(x, [Sequence, spmatrix])'}, {'XXX TODO XXX': "hasattr(x, '__array__')"}]}, {'type': 'object', 'properties': {'x': {'not': {'type': 'string'}}}}]},
           {'description': 'From /utils/multiclass.py:None:type_of_target, Exception: raise ValueError("y cannot be class \'SparseSeries\' or \'SparseArray\'") ', 'XXX TODO XXX': "x.__class__.__name__ not in ['SparseSeries', 'SparseArray']"},
           {'description': "From /utils/multiclass.py:None:type_of_target, Exception: raise ValueError(     'You appear to be using a legacy multi-label data representation. Sequence of sequences are no longer supported; use a binary array or sparse matrix instead - the MultiLabelBinarizer transformer can convert to this format.'     ) ", 'anyOf': [{'XXX TODO XXX': 'is_multilabel(x)'}, {'XXX TODO XXX': "hasattr(y[0], '__array__')"}, {'XXX TODO XXX': 'isinstance(y[0], Sequence)'}, {'XXX TODO XXX': 'isinstance(y[0], str)'}]},
           {'description': "From /utils/multiclass.py:None:unique_labels, Exception: raise ValueError('No argument has been passed.') ", 'type': 'object', 'properties': {'ys': {'enum': [True]}}},
           {'description': "From /utils/multiclass.py:None:unique_labels, Exception: raise ValueError('Mix type of y not allowed, got types %s' % ys_types) ", 'anyOf': [{'XXX TODO XXX': "set((type_of_target(x) for x in ys)) == {'binary', 'multiclass'}"}, {'XXX TODO XXX': 'len(set((type_of_target(x) for x in ys))) <= 1'}]},
           {'description': "From /utils/multiclass.py:None:unique_labels, Exception: raise ValueError(     'Multi-label binary indicator input with different numbers of labels') ", 'anyOf': [{'XXX TODO XXX': "set((type_of_target(x) for x in ys)) == {'binary', 'multiclass'}"}, {'XXX TODO XXX': "set((type_of_target(x) for x in ys)).pop() != 'multilabel-indicator'"}, {'XXX TODO XXX': "len(set((check_array(y, accept_sparse=['csr', 'csc', 'coo']).shape[1] for y in ys))) <= 1"}]},
           {'description': "From /utils/multiclass.py:None:unique_labels, Exception: raise ValueError('Unknown label type: %s' % repr(ys)) ", 'allOf': [{'anyOf': [{'XXX TODO XXX': "set((type_of_target(x) for x in ys)) != {'binary', 'multiclass'}"}, {'XXX TODO XXX': "_FN_UNIQUE_LABELS.get({'multiclass'}.pop(), None)"}]}, {'anyOf': [{'XXX TODO XXX': "set((type_of_target(x) for x in ys)) == {'binary', 'multiclass'}"}, {'XXX TODO XXX': '_FN_UNIQUE_LABELS.get(set((type_of_target(x) for x in ys)).pop(), None)'}]}]},
           {'description': "From /utils/multiclass.py:None:unique_labels, Exception: raise ValueError('Mix of label input types (string and number)') ", 'allOf': [{'anyOf': [{'XXX TODO XXX': "set((type_of_target(x) for x in ys)) != {'binary', 'multiclass'}"}, {'XXX TODO XXX': "len(set((isinstance(label, str) for label in set(chain.from_iterable((_FN_UNIQUE_LABELS.get({'multiclass'}.pop(), None)(y) for y in ys)))))) <= 1"}]}, {'anyOf': [{'XXX TODO XXX': "set((type_of_target(x) for x in ys)) == {'binary', 'multiclass'}"}, {'XXX TODO XXX': 'len(set((isinstance(label, str) for label in set(chain.from_iterable((_FN_UNIQUE_LABELS.get(set((type_of_target(x) for x in ys)).pop(), None)(y) for y in ys)))))) <= 1'}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['lsqr']}}}},
                      {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "empirical_covariance(X[[y == group, :]]).sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'dtype')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).dtype is None'}, {'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]).dtype, 'kind')"}, {'XXX TODO XXX': "empirical_covariance(X[[y == group, :]]).dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['lsqr']}}}},
                      {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(empirical_covariance(X[[y == group, :]]).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(empirical_covariance(X[[y == group, :]]).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(empirical_covariance(X[[y == group, :]]).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(empirical_covariance(X[[y == group, :]]).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['lsqr']}}}}, {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'}, {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"}, {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['lsqr']}}}},
                      {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"},
                                                                  {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).fit)'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"},
                                                                  {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).fit)'}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['lsqr']}}}}, {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'}, {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"}, {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError(     "Unable to convert array of bytes/strings into decimal numbers with dtype=\'numeric\'"     ) from e ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['lsqr']}}}},
                      {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(empirical_covariance(X[[y == group, :]]).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(empirical_covariance(X[[y == group, :]]).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(empirical_covariance(X[[y == group, :]]).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(empirical_covariance(X[[y == group, :]]).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['lsqr']}}}},
                      {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).ndim < 3'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).ndim < 3'}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['lsqr']}}}},
                      {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['lsqr']}}}},
                      {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"},
                                                                  {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(empirical_covariance(X[[y == group, :]]), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"},
                                                                  {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(empirical_covariance(X[[y == group, :]]), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]},
           {'description': "From /discriminant_analysis.py:None:_cov, Exception: raise ValueError('unknown shrinkage parameter') ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['lsqr']}}}}, {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'}, {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"}, {'XXX TODO XXX': "('empirical' if self.shrinkage is None else self.shrinkage) == 'auto'"}, {'XXX TODO XXX': "('empirical' if self.shrinkage is None else self.shrinkage) == 'empirical'"}]},
           {'description': "From /discriminant_analysis.py:None:_cov, Exception: raise ValueError('shrinkage parameter must be between 0 and 1') ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['lsqr']}}}}, {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'}, {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"}, {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]}, {'allOf': [{'XXX TODO XXX': "('empirical' if self.shrinkage is None else self.shrinkage) >= 0"}, {'XXX TODO XXX': "('empirical' if self.shrinkage is None else self.shrinkage) <= 1"}]}]},
           {'description': "From /discriminant_analysis.py:None:_cov, Exception: raise TypeError('shrinkage must be a float or a string') ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['lsqr']}}}}, {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'}, {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
           {'description': "From /discriminant_analysis.py:None:_cov, Exception: raise ValueError(     'covariance_estimator and shrinkage parameters are not None. Only one of the two can be set.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['lsqr']}}}}, {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'}, {'type': 'object', 'properties': {'covariance_estimator': {'enum': [None]}}}, {'type': 'object', 'properties': {'shrinkage': {'enum': [None]}}}, {'type': 'object', 'properties': {'shrinkage': {'enum': [0]}}}]},
           {'description': "From /discriminant_analysis.py:None:_cov, Exception: raise ValueError('%s does not have a covariance_ attribute' %     covariance_estimator.__class__.__name__) ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['lsqr']}}}}, {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'}, {'type': 'object', 'properties': {'covariance_estimator': {'enum': [None]}}}, {'XXX TODO XXX': "hasattr(self.covariance_estimator, 'covariance_')"}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}},
                      {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "empirical_covariance(X[[y == group, :]]).sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'dtype')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).dtype is None'}, {'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]).dtype, 'kind')"}, {'XXX TODO XXX': "empirical_covariance(X[[y == group, :]]).dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}},
                      {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(empirical_covariance(X[[y == group, :]]).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(empirical_covariance(X[[y == group, :]]).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(empirical_covariance(X[[y == group, :]]).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(empirical_covariance(X[[y == group, :]]).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}}, {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'}, {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"}, {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}},
                      {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"},
                                                                  {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).fit)'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"},
                                                                  {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).fit)'}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}},
                      {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError(     "Unable to convert array of bytes/strings into decimal numbers with dtype=\'numeric\'"     ) from e ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}},
                      {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(empirical_covariance(X[[y == group, :]]).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(empirical_covariance(X[[y == group, :]]).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(empirical_covariance(X[[y == group, :]]).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(empirical_covariance(X[[y == group, :]]).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}},
                      {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).ndim < 3'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).ndim < 3'}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}},
                      {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(empirical_covariance(X[[y == group, :]]), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}},
                      {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"},
                                                                  {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(empirical_covariance(X[[y == group, :]]), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X[[y == group, :]]), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"},
                                                                  {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]).sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X[[y == group, :]]), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X[[y == group, :]]).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(empirical_covariance(X[[y == group, :]]), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X[[y == group, :]]))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X[[y == group, :]]), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]},
           {'description': "From /discriminant_analysis.py:None:_cov, Exception: raise ValueError('unknown shrinkage parameter') ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}}, {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'}, {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"}, {'XXX TODO XXX': "('empirical' if self.shrinkage is None else self.shrinkage) == 'auto'"}, {'XXX TODO XXX': "('empirical' if self.shrinkage is None else self.shrinkage) == 'empirical'"}]},
           {'description': "From /discriminant_analysis.py:None:_cov, Exception: raise ValueError('shrinkage parameter must be between 0 and 1') ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}}, {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'}, {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"}, {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]}, {'allOf': [{'XXX TODO XXX': "('empirical' if self.shrinkage is None else self.shrinkage) >= 0"}, {'XXX TODO XXX': "('empirical' if self.shrinkage is None else self.shrinkage) <= 1"}]}]},
           {'description': "From /discriminant_analysis.py:None:_cov, Exception: raise TypeError('shrinkage must be a float or a string') ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}}, {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'}, {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
           {'description': "From /discriminant_analysis.py:None:_cov, Exception: raise ValueError(     'covariance_estimator and shrinkage parameters are not None. Only one of the two can be set.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}}, {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'}, {'type': 'object', 'properties': {'covariance_estimator': {'enum': [None]}}}, {'type': 'object', 'properties': {'shrinkage': {'enum': [None]}}}, {'type': 'object', 'properties': {'shrinkage': {'enum': [0]}}}]},
           {'description': "From /discriminant_analysis.py:None:_cov, Exception: raise ValueError('%s does not have a covariance_ attribute' %     covariance_estimator.__class__.__name__) ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}}, {'XXX TODO XXX': '[idx, group] not in enumerate(np.unique(y))'}, {'type': 'object', 'properties': {'covariance_estimator': {'enum': [None]}}}, {'XXX TODO XXX': "hasattr(self.covariance_estimator, 'covariance_')"}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(empirical_covariance(X).sparse.to_coo(), 'dtype')"}, {'XXX TODO XXX': 'empirical_covariance(X).sparse.to_coo().dtype is None'}, {'XXX TODO XXX': "not hasattr(empirical_covariance(X).sparse.to_coo().dtype, 'kind')"}, {'XXX TODO XXX': "empirical_covariance(X).sparse.to_coo().dtype.kind != 'c'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'dtype')"}, {'XXX TODO XXX': 'empirical_covariance(X).dtype is None'}, {'XXX TODO XXX': "not hasattr(empirical_covariance(X).dtype, 'kind')"}, {'XXX TODO XXX': "empirical_covariance(X).dtype.kind != 'c'"}]}]}]},
           {'description': 'From /utils/validation.py:None:_ensure_no_complex_data, Exception: raise ValueError("""Complex data not supported {} """.format(array)) ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(empirical_covariance(X).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(empirical_covariance(X).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(empirical_covariance(X).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(empirical_covariance(X).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(empirical_covariance(X).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(empirical_covariance(X).dtypes)))"},
                                                                                        {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                                                   {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X).dtypes, '__array__')"}]},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind != 'c'"}]},
                                                                             {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X), None, dtype=np.float64), 'dtype')"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype is None'}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype, 'kind')"}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind != 'c'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:_ensure_sparse_format, Exception: raise TypeError(     'A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}}, {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"}, {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]}, {'type': 'object', 'laleNot': 'X/isSparse'}]},
           {'description': 'From /utils/validation.py:None:_num_samples, Exception: raise TypeError(message) ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"},
                                                                  {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(empirical_covariance(X).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(empirical_covariance(X).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(empirical_covariance(X), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(empirical_covariance(X), False, dtype=np.float64, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X), None, dtype=np.float64).fit)'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"},
                                                                  {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(empirical_covariance(X).sparse.to_coo(), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(empirical_covariance(X).sparse.to_coo(), False, dtype=np.float64, False, True, True).fit)'}]},
                                                                             {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).fit)'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]},
                                                                  {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': "not hasattr(_ensure_sparse_format(empirical_covariance(X), False, dtype=np.float64, False, True, True), 'fit')"}, {'XXX TODO XXX': 'not callable(_ensure_sparse_format(empirical_covariance(X), False, dtype=np.float64, False, True, True).fit)'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X), None, dtype=np.float64).astype(np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X), None, dtype=np.float64).astype(np.float64).fit)'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': "not hasattr(np.asarray(empirical_covariance(X), None, dtype=np.float64), 'fit')"}, {'XXX TODO XXX': 'not callable(np.asarray(empirical_covariance(X), None, dtype=np.float64).fit)'}]}]}]}]}]}]}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError("""Complex data not supported {} """.format(array)     ) from complex_warning ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}}, {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"}, {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}]}]}]},
           {'description': 'From /utils/validation.py:None:check_array, Exception: raise ValueError(     "Unable to convert array of bytes/strings into decimal numbers with dtype=\'numeric\'"     ) from e ',
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(empirical_covariance(X).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(empirical_covariance(X).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(empirical_covariance(X).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X).dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X), 'dtype', None), 'kind')"},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'dtypes')"},
                                                                  {'XXX TODO XXX': "not hasattr(empirical_covariance(X).dtypes, '__array__')"},
                                                                  {'allOf': [{'anyOf': [{'XXX TODO XXX': "not all((False for 'numeric' in list(empirical_covariance(X).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]},
                                                                             {'anyOf': [{'XXX TODO XXX': "all((False for 'numeric' in list(empirical_covariance(X).dtypes)))"}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X).dtypes, '__array__')"}]}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}, {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind not in 'OUSV'"}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim,     estimator_name)) ",
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X), None, dtype=np.float64).ndim < 3'}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).ndim < 3'}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X), None, dtype=np.float64).astype(np.float64).ndim < 3'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X), None, dtype=np.float64).ndim < 3'}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.'      % (n_samples, array.shape, ensure_min_samples, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(empirical_covariance(X).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(empirical_covariance(X), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X), None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(empirical_covariance(X).sparse.to_coo(), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64)) >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_num_samples(_ensure_sparse_format(empirical_covariance(X), False, dtype=np.float64, False, True, True)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X), None, dtype=np.float64).astype(np.float64)) >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': '_num_samples(np.asarray(empirical_covariance(X), None, dtype=np.float64)) >= 1'}]}]}]}]}]}]}]}]}]},
           {'description': "From /utils/validation.py:None:check_array, Exception: raise ValueError(     'Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.'      % (n_features, array.shape, ensure_min_features, context)) ",
            'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}},
                      {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}},
                      {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}},
                      {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}},
                      {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"},
                      {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
                      {'allOf': [{'anyOf': [{'XXX TODO XXX': "hasattr(getattr(empirical_covariance(X), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(empirical_covariance(X).sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(empirical_covariance(X), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]},
                                 {'anyOf': [{'XXX TODO XXX': "not hasattr(getattr(empirical_covariance(X), 'dtype', None), 'kind')"},
                                            {'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'dtypes')"}, {'XXX TODO XXX': "hasattr(empirical_covariance(X).dtypes, '__array__')"}]},
                                            {'allOf': [{'anyOf': [{'XXX TODO XXX': "not hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim <= 1'}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(empirical_covariance(X).sparse.to_coo(), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X).sparse.to_coo())'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X).sparse.to_coo(), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]},
                                                       {'anyOf': [{'allOf': [{'XXX TODO XXX': "hasattr(empirical_covariance(X), 'sparse')"}, {'XXX TODO XXX': 'empirical_covariance(X).ndim > 1'}]}, {'allOf': [{'anyOf': [{'type': 'object', 'laleNot': 'X/isSparse'}, {'XXX TODO XXX': '_ensure_sparse_format(empirical_covariance(X), False, dtype=np.float64, False, True, True).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': 'sp.issparse(empirical_covariance(X))'}, {'allOf': [{'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind not in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X), None, dtype=np.float64).astype(np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}, {'anyOf': [{'XXX TODO XXX': "np.asarray(empirical_covariance(X), None, dtype=np.float64).dtype.kind in 'OUSV'"}, {'XXX TODO XXX': 'np.asarray(empirical_covariance(X), None, dtype=np.float64).ndim != 2'}, {'XXX TODO XXX': 'array.shape[1] >= 1'}]}]}]}]}]}]}]}]}]},
           {'description': "From /discriminant_analysis.py:None:_cov, Exception: raise ValueError('unknown shrinkage parameter') ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}}, {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"}, {'XXX TODO XXX': "('empirical' if self.shrinkage is None else self.shrinkage) == 'auto'"}, {'XXX TODO XXX': "('empirical' if self.shrinkage is None else self.shrinkage) == 'empirical'"}]},
           {'description': "From /discriminant_analysis.py:None:_cov, Exception: raise ValueError('shrinkage parameter must be between 0 and 1') ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}}, {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"}, {'allOf': [{'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]}, {'allOf': [{'XXX TODO XXX': "('empirical' if self.shrinkage is None else self.shrinkage) >= 0"}, {'XXX TODO XXX': "('empirical' if self.shrinkage is None else self.shrinkage) <= 1"}]}]},
           {'description': "From /discriminant_analysis.py:None:_cov, Exception: raise TypeError('shrinkage must be a float or a string') ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}}, {'type': 'object', 'properties': {'covariance_estimator': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, str)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, float)"}, {'XXX TODO XXX': "isinstance('empirical' if self.shrinkage is None else self.shrinkage, int)"}]},
           {'description': "From /discriminant_analysis.py:None:_cov, Exception: raise ValueError(     'covariance_estimator and shrinkage parameters are not None. Only one of the two can be set.'     ) ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}}, {'type': 'object', 'properties': {'covariance_estimator': {'enum': [None]}}}, {'type': 'object', 'properties': {'shrinkage': {'enum': [None]}}}, {'type': 'object', 'properties': {'shrinkage': {'enum': [0]}}}]},
           {'description': "From /discriminant_analysis.py:None:_cov, Exception: raise ValueError('%s does not have a covariance_ attribute' %     covariance_estimator.__class__.__name__) ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'not': {'enum': ['eigen']}}}}, {'type': 'object', 'properties': {'covariance_estimator': {'enum': [None]}}}, {'XXX TODO XXX': "hasattr(self.covariance_estimator, 'covariance_')"}]},
           {'description': "From /discriminant_analysis.py:LinearDiscriminantAnalysis:fit, Exception: raise ValueError(     'The number of samples must be more than the number of classes.') ", 'XXX TODO XXX': 'X.shape[0] != len(unique_labels(y))'},
           {'description': "From /discriminant_analysis.py:LinearDiscriminantAnalysis:fit, Exception: raise ValueError('priors must be non-negative') ", 'allOf': [{'anyOf': [{'type': 'object', 'properties': {'priors': {'not': {'enum': [None]}}}}, {'XXX TODO XXX': 'not (np.bincount(np.unique(y, return_inverse=True)[1]) / float(len(y)) < 0).any()'}]}, {'anyOf': [{'type': 'object', 'properties': {'priors': {'enum': [None]}}}, {'XXX TODO XXX': 'not (np.asarray(self.priors) < 0).any()'}]}]},
           {'description': "From /discriminant_analysis.py:LinearDiscriminantAnalysis:fit, Exception: raise ValueError(     'n_components cannot be larger than min(n_features, n_classes - 1).') ", 'anyOf': [{'type': 'object', 'properties': {'n_components': {'enum': [None]}}}, {'allOf': [{'XXX TODO XXX': 'self.n_components <= len(unique_labels(y)) - 1'}, {'type': 'object', 'properties': {'n_components': {'laleMaximum': 'X/items/maxItems'}}}]}]},
           {'description': "From /discriminant_analysis.py:LinearDiscriminantAnalysis:fit, Exception: raise NotImplementedError('shrinkage not supported') ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['svd']}}}}, {'type': 'object', 'properties': {'shrinkage': {'enum': [None]}}}]},
           {'description': "From /discriminant_analysis.py:LinearDiscriminantAnalysis:fit, Exception: raise ValueError(     'covariance estimator is not supported with svd solver. Try another solver'     ) ", 'anyOf': [{'type': 'object', 'properties': {'solver': {'not': {'enum': ['svd']}}}}, {'type': 'object', 'properties': {'covariance_estimator': {'enum': [None]}}}]},
           {'description': 'From /discriminant_analysis.py:LinearDiscriminantAnalysis:fit, Exception: raise ValueError(     "unknown solver {} (valid solvers are \'svd\', \'lsqr\', and \'eigen\').".     format(self.solver)) ', 'anyOf': [{'type': 'object', 'properties': {'solver': {'enum': ['svd']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['lsqr']}}}, {'type': 'object', 'properties': {'solver': {'enum': ['eigen']}}}]}]}
