{'allOf': [{'type': 'object',
            'required': ['nu',
                         'kernel',
                         'degree',
                         'gamma',
                         'coef0',
                         'shrinking',
                         'probability',
                         'tol',
                         'cache_size',
                         'class_weight',
                         'verbose',
                         'max_iter',
                         'decision_function_shape',
                         'break_ties',
                         'random_state'],
            'relevantToOptimizer': ['kernel',
                                    'degree',
                                    'gamma',
                                    'shrinking',
                                    'probability',
                                    'tol',
                                    'cache_size',
                                    'max_iter',
                                    'decision_function_shape',
                                    'break_ties'],
            'additionalProperties': False,
            'properties': {'nu': {'type': 'number',
                                  'default': 0.5,
                                  'description': 'An upper bound on the fraction of training errors and a lower bound '
                                                 'of the fraction of support vectors'},
                           'kernel': {'enum': ['linear', 'poly', 'precomputed', 'sigmoid', 'rbf'],
                                      'default': 'rbf',
                                      'description': 'Specifies the kernel type to be used in the algorithm'},
                           'degree': {'type': 'integer',
                                      'minimumForOptimizer': 2,
                                      'maximumForOptimizer': 3,
                                      'distribution': 'uniform',
                                      'default': 3,
                                      'description': "Degree of the polynomial kernel function ('poly')"},
                           'gamma': {'anyOf': [{'type': 'number', 'forOptimizer': False}, {'enum': ['scale', 'auto']}],
                                     'default': 'scale',
                                     'description': "Kernel coefficient for 'rbf', 'poly' and 'sigmoid'"},
                           'coef0': {'type': 'number',
                                     'default': 0.0,
                                     'description': 'Independent term in kernel function'},
                           'shrinking': {'type': 'boolean',
                                         'default': True,
                                         'description': 'Whether to use the shrinking heuristic.'},
                           'probability': {'type': 'boolean',
                                           'default': False,
                                           'description': 'Whether to enable probability estimates'},
                           'tol': {'type': 'number',
                                   'minimumForOptimizer': 1e-08,
                                   'maximumForOptimizer': 0.01,
                                   'distribution': 'loguniform',
                                   'default': 0.001,
                                   'description': 'Tolerance for stopping criterion.'},
                           'cache_size': {'type': 'number',
                                          'minimumForOptimizer': 0.0,
                                          'maximumForOptimizer': 1.0,
                                          'distribution': 'uniform',
                                          'default': 200,
                                          'description': 'Specify the size of the kernel cache (in MB).'},
                           'class_weight': {'enum': ['dict', 'balanced'],
                                            'default': 'balanced',
                                            'description': 'Set the parameter C of class i to class_weight[i]*C for '
                                                           'SVC'},
                           'verbose': {'type': 'boolean', 'default': False, 'description': 'Enable verbose output'},
                           'max_iter': {'XXX TODO XXX': 'int, optional (default=-1)',
                                        'description': 'Hard limit on iterations within solver, or -1 for no limit.',
                                        'type': 'integer',
                                        'minimumForOptimizer': 10,
                                        'maximumForOptimizer': 1000,
                                        'distribution': 'uniform',
                                        'default': -1},
                           'decision_function_shape': {'XXX TODO XXX': "'ovo', 'ovr', default='ovr'",
                                                       'description': "Whether to return a one-vs-rest ('ovr') "
                                                                      'decision function of shape (n_samples, '
                                                                      'n_classes) as all other classifiers, or the '
                                                                      "original one-vs-one ('ovo') decision function "
                                                                      'of libsvm which has shape (n_samples, n_classes '
                                                                      '* (n_classes - 1) / 2)',
                                                       'enum': ['ovr', 'ovo'],
                                                       'default': 'ovr'},
                           'break_ties': {'type': 'boolean',
                                          'default': False,
                                          'description': "If true, decision_function_shape='ovr', and number of "
                                                         'classes > 2, predict will break ties according to the '
                                                         'confidence values of decision_function; otherwise the first '
                                                         'class among the tied classes is returned.'},
                           'random_state': {'anyOf': [{'type': 'integer'},
                                                      {'laleType': 'numpy.random.RandomState'},
                                                      {'enum': [None]}],
                                            'default': None,
                                            'description': 'The seed of the pseudo random number generator used when '
                                                           'shuffling the data for probability estimates'}}},
           {'XXX TODO XXX': "Parameter: coef0 > only significant in 'poly' and 'sigmoid'"}]}
