{'allOf': [{'type': 'object',
            'required': ['n_neighbors',
                         'n_components',
                         'reg',
                         'eigen_solver',
                         'tol',
                         'max_iter',
                         'method',
                         'hessian_tol',
                         'modified_tol',
                         'neighbors_algorithm',
                         'random_state',
                         'n_jobs'],
            'relevantToOptimizer': ['n_neighbors', 'eigen_solver', 'tol', 'max_iter', 'method', 'neighbors_algorithm'],
            'additionalProperties': False,
            'properties': {'n_neighbors': {'type': 'integer',
                                           'minimumForOptimizer': 5,
                                           'maximumForOptimizer': 20,
                                           'distribution': 'uniform',
                                           'default': 5,
                                           'description': 'number of neighbors to consider for each point.'},
                           'n_components': {'type': 'integer',
                                            'minimumForOptimizer': 2,
                                            'maximumForOptimizer': 256,
                                            'distribution': 'uniform',
                                            'default': 2,
                                            'description': 'number of coordinates for the manifold'},
                           'reg': {'type': 'number',
                                   'default': 0.001,
                                   'description': 'regularization constant, multiplies the trace of the local '
                                                  'covariance matrix of the distances.'},
                           'eigen_solver': {'enum': ['auto', 'arpack', 'dense'],
                                            'default': 'auto',
                                            'description': 'auto : algorithm will attempt to choose the best method '
                                                           'for input data  arpack : use arnoldi iteration in '
                                                           'shift-invert mode'},
                           'tol': {'type': 'number',
                                   'minimumForOptimizer': 1e-08,
                                   'maximumForOptimizer': 0.01,
                                   'distribution': 'loguniform',
                                   'default': 1e-06,
                                   'description': "Tolerance for 'arpack' method Not used if eigen_solver=='dense'."},
                           'max_iter': {'type': 'integer',
                                        'minimumForOptimizer': 10,
                                        'maximumForOptimizer': 1000,
                                        'distribution': 'uniform',
                                        'default': 100,
                                        'description': 'maximum number of iterations for the arpack solver'},
                           'method': {'XXX TODO XXX': "string ('standard', 'hessian', 'modified' or 'ltsa')",
                                      'description': 'standard : use the standard locally linear embedding algorithm',
                                      'enum': ['ltsa', 'modified', 'standard', 'hessian'],
                                      'default': 'standard'},
                           'hessian_tol': {'type': 'number',
                                           'default': 0.0001,
                                           'description': 'Tolerance for Hessian eigenmapping method'},
                           'modified_tol': {'type': 'number',
                                            'default': 1e-12,
                                            'description': 'Tolerance for modified LLE method'},
                           'neighbors_algorithm': {'enum': ['auto', 'brute', 'kd_tree', 'ball_tree'],
                                                   'default': 'auto',
                                                   'description': 'algorithm to use for nearest neighbors search, '
                                                                  'passed to neighbors.NearestNeighbors instance'},
                           'random_state': {'anyOf': [{'type': 'integer'},
                                                      {'laleType': 'numpy.random.RandomState'},
                                                      {'enum': [None]}],
                                            'default': None,
                                            'description': 'If int, random_state is the seed used by the random number '
                                                           'generator; If RandomState instance, random_state is the '
                                                           'random number generator; If None, the random number '
                                                           'generator is the RandomState instance used by `np.random`'},
                           'n_jobs': {'anyOf': [{'type': 'integer'}, {'enum': [None]}],
                                      'default': 1,
                                      'description': 'The number of parallel jobs to run'}}},
           {'description': "hessian_tol, only used if method == 'hessian'",
            'anyOf': [{'type': 'object', 'properties': {'hessian_tol': {'enum': [0.0001]}}},
                      {'type': 'object', 'properties': {'method': {'enum': ['hessian']}}}]},
           {'description': "modified_tol, only used if method == 'modified'",
            'anyOf': [{'type': 'object', 'properties': {'modified_tol': {'enum': [1e-12]}}},
                      {'type': 'object', 'properties': {'method': {'enum': ['modified']}}}]}]}
