{'allOf': [{'type': 'object',
            'required': ['n_components',
                         'alpha',
                         'ridge_alpha',
                         'max_iter',
                         'tol',
                         'method',
                         'n_jobs',
                         'U_init',
                         'V_init',
                         'verbose',
                         'random_state'],
            'relevantToOptimizer': ['n_components', 'alpha', 'max_iter', 'tol', 'method'],
            'additionalProperties': False,
            'properties': {'n_components': {'anyOf': [{'type': 'integer',
                                                       'minimumForOptimizer': 2,
                                                       'maximumForOptimizer': 256,
                                                       'distribution': 'uniform'},
                                                      {'enum': [None]}],
                                            'default': None,
                                            'description': 'Number of sparse atoms to extract.'},
                           'alpha': {'type': 'number',
                                     'minimumForOptimizer': 1e-10,
                                     'maximumForOptimizer': 1.0,
                                     'distribution': 'loguniform',
                                     'default': 1,
                                     'description': 'Sparsity controlling parameter'},
                           'ridge_alpha': {'type': 'number',
                                           'default': 0.01,
                                           'description': 'Amount of ridge shrinkage to apply in order to improve '
                                                          'conditioning when calling the transform method.'},
                           'max_iter': {'type': 'integer',
                                        'minimumForOptimizer': 10,
                                        'maximumForOptimizer': 1000,
                                        'distribution': 'uniform',
                                        'default': 1000,
                                        'description': 'Maximum number of iterations to perform.'},
                           'tol': {'type': 'number',
                                   'minimumForOptimizer': 1e-08,
                                   'maximumForOptimizer': 0.01,
                                   'distribution': 'loguniform',
                                   'default': 1e-08,
                                   'description': 'Tolerance for the stopping condition.'},
                           'method': {'enum': ['lars', 'cd'],
                                      'default': 'lars',
                                      'description': 'lars: uses the least angle regression method to solve the lasso '
                                                     'problem (linear_model.lars_path) cd: uses the coordinate descent '
                                                     'method to compute the Lasso solution (linear_model.Lasso)'},
                           'n_jobs': {'anyOf': [{'type': 'integer'}, {'enum': [None]}],
                                      'default': 1,
                                      'description': 'Number of parallel jobs to run'},
                           'U_init': {'anyOf': [{'type': 'array',
                                                 'items': {'type': 'array', 'items': {'type': 'number'}}},
                                                {'enum': [None]}],
                                      'default': None,
                                      'description': 'Initial values for the loadings for warm restart scenarios.'},
                           'V_init': {'anyOf': [{'type': 'array',
                                                 'items': {'type': 'array', 'items': {'type': 'number'}}},
                                                {'enum': [None]}],
                                      'default': None,
                                      'description': 'Initial values for the components for warm restart scenarios.'},
                           'verbose': {'anyOf': [{'type': 'integer'}, {'type': 'boolean'}],
                                       'default': False,
                                       'description': 'Controls the verbosity; the higher, the more messages'},
                           'random_state': {'anyOf': [{'type': 'integer'},
                                                      {'laleType': 'numpy.random.RandomState'},
                                                      {'enum': [None]}],
                                            'default': None,
                                            'description': 'If int, random_state is the seed used by the random number '
                                                           'generator; If RandomState instance, random_state is the '
                                                           'random number generator; If None, the random number '
                                                           'generator is the RandomState instance used by '
                                                           '`np.random`.'}}}]}
