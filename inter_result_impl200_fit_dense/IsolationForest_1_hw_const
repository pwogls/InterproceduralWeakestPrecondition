{'description': 'Isolation Forest Algorithm.\n'
                'Return the anomaly score of each sample using the IsolationForest algorithm.\n'
                'The IsolationForest ‘isolates’ observations by randomly selecting a feature and then randomly '
                'selecting a split value between the maximum and minimum values of the selected feature.\n'
                'Since recursive partitioning can be represented by a tree structure,\n'
                'the number of splittings required to isolate a sample is equivalent to the path length from the root '
                'node to the terminating node.\n'
                'This path length, averaged over a forest of such random trees, is a measure of normality and our '
                'decision function.\n'
                'Random partitioning produces noticeably shorter paths for anomalies. Hence, when a forest of random '
                'trees collectively\n'
                'produce shorter path lengths for particular samples, they are highly likely to be anomalies.',
 'allOf': [{'type': 'object',
            'required': ['n_estimators',
                         'max_samples',
                         'contamination',
                         'max_features',
                         'bootstrap',
                         'n_jobs',
                         'random_state',
                         'verbose',
                         'warm_start'],
            'relevantToOptimizer': ['n_estimators', 'max_samples', 'max_features', 'bootstrap'],
            'additionalProperties': False,
            'properties': {'n_estimators': {'type': 'integer',
                                            'minimumForOptimizer': 10,
                                            'maximumForOptimizer': 100,
                                            'distribution': 'uniform',
                                            'default': 100,
                                            'description': 'The number of base estimators in the ensemble.'},
                           'max_samples': {'description': 'The number of samples to draw from X to train each base '
                                                          'estimator.',
                                           'anyOf': [{'description': 'Draw max_samples samples.',
                                                      'type': 'integer',
                                                      'minimum': 2,
                                                      'laleMaximum': 'X/maxItems',
                                                      'forOptimizer': False},
                                                     {'description': 'Draw max_samples * X.shape[0] samples.',
                                                      'type': 'number',
                                                      'minimum': 0.0,
                                                      'exclusiveMinimum': True,
                                                      'maximum': 1.0,
                                                      'minimumForOptimizer': 0.2,
                                                      'maximumForOptimizer': 1.0},
                                                     {'description': 'Draw max_samples=min(256, n_samples) samples.',
                                                      'enum': ['auto']}],
                                           'default': 'auto'},
                           'contamination': {'description': 'The amount of contamination of the data set, i.e. the '
                                                            'proportion of outliers in the data set.\n'
                                                            'Used when fitting to define the threshold on the scores '
                                                            'of the samples.',
                                             'anyOf': [{'type': 'number', 'minimum': 0.0, 'maximum': 0.5},
                                                       {'enum': ['auto']}],
                                             'default': 'auto'},
                           'max_features': {'description': 'The number of features to draw from X to train each base '
                                                           'estimator.',
                                            'anyOf': [{'description': 'Draw max_features features.',
                                                       'type': 'integer',
                                                       'minimum': 2,
                                                       'laleMaximum': 'X/items/maxItems',
                                                       'forOptimizer': False},
                                                      {'description': 'Draw max_samples * X.shape[1] features.',
                                                       'type': 'number',
                                                       'minimum': 0.0,
                                                       'exclusiveMinimum': True,
                                                       'maximum': 1.0,
                                                       'minimumForOptimizer': 0.01,
                                                       'maximumForOptimizer': 1.0}],
                                            'default': 1.0},
                           'bootstrap': {'type': 'boolean',
                                         'default': True,
                                         'description': 'Whether samples are drawn with (True) or without (False) '
                                                        'replacement.'},
                           'n_jobs': {'description': 'The number of jobs to run in parallel for both `fit` and '
                                                     '`predict`.',
                                      'anyOf': [{'description': '1 unless in joblib.parallel_backend context.',
                                                 'enum': [None]},
                                                {'description': 'Use all processors.', 'enum': [-1]},
                                                {'description': 'Number of CPU cores.',
                                                 'type': 'integer',
                                                 'minimum': 1}],
                                      'default': None},
                           'random_state': {'anyOf': [{'type': 'integer'},
                                                      {'laleType': 'numpy.random.RandomState'},
                                                      {'enum': [None]}],
                                            'default': None,
                                            'description': 'Controls the pseudo-randomness of the selection of the '
                                                           'feature and split values for each branching step and each '
                                                           'tree in the forest.\n'
                                                           'If int, random_state is the seed used by the random number '
                                                           'generator'},
                           'verbose': {'type': 'integer',
                                       'default': 0,
                                       'description': 'Controls the verbosity of the tree building process.'},
                           'warm_start': {'type': 'boolean',
                                          'default': False,
                                          'description': 'When set to True, reuse the solution of the previous call to '
                                                         'fit and add more estimators to the ensemble, otherwise, just '
                                                         'fit a whole new ensemble.'}}}]}
