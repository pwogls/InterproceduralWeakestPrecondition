{'description': 'A Bagging classifier.',
 'allOf': [{'type': 'object',
            'required': ['base_estimator',
                         'n_estimators',
                         'max_samples',
                         'max_features',
                         'bootstrap',
                         'bootstrap_features',
                         'oob_score',
                         'warm_start',
                         'n_jobs',
                         'random_state',
                         'verbose'],
            'relevantToOptimizer': ['n_estimators', 'bootstrap'],
            'additionalProperties': False,
            'properties': {'base_estimator': {'anyOf': [{'laleType': 'operator'}, {'enum': [None]}],
                                              'default': None,
                                              'description': 'The base estimator to fit on random subsets of the '
                                                             'dataset.'},
                           'n_estimators': {'type': 'integer',
                                            'minimumForOptimizer': 10,
                                            'maximumForOptimizer': 100,
                                            'distribution': 'uniform',
                                            'default': 10,
                                            'description': 'The number of base estimators in the ensemble.'},
                           'max_samples': {'description': 'The number of samples to draw from X to train each base '
                                                          'estimator.',
                                           'anyOf': [{'description': 'Draw max_samples samples.',
                                                      'type': 'integer',
                                                      'minimum': 2,
                                                      'laleMaximum': 'X/maxItems',
                                                      'forOptimizer': False},
                                                     {'description': 'Draw max_samples * X.shape[0] samples.',
                                                      'type': 'number',
                                                      'minimum': 0.0,
                                                      'exclusiveMinimum': True,
                                                      'maximum': 1.0}],
                                           'default': 1.0},
                           'max_features': {'description': 'The number of features to draw from X to train each base '
                                                           'estimator.',
                                            'anyOf': [{'description': 'Draw max_features features.',
                                                       'type': 'integer',
                                                       'minimum': 2,
                                                       'laleMaximum': 'X/items/maxItems',
                                                       'forOptimizer': False},
                                                      {'description': 'Draw max_samples * X.shape[1] features.',
                                                       'type': 'number',
                                                       'minimum': 0.0,
                                                       'exclusiveMinimum': True,
                                                       'maximum': 1.0}],
                                            'default': 1.0},
                           'bootstrap': {'type': 'boolean',
                                         'default': True,
                                         'description': 'Whether samples are drawn with (True) or without (False) '
                                                        'replacement.'},
                           'bootstrap_features': {'type': 'boolean',
                                                  'default': False,
                                                  'description': 'Whether features are drawn with replacement.'},
                           'oob_score': {'type': 'boolean',
                                         'default': False,
                                         'description': 'Whether to use out-of-bag samples to estimate'},
                           'warm_start': {'type': 'boolean',
                                          'default': False,
                                          'description': 'When set to True, reuse the solution of the previous call to '
                                                         'fit and add more estimators to the ensemble, otherwise, just '
                                                         'fit a whole new ensemble.'},
                           'n_jobs': {'description': 'The number of jobs to run in parallel for both `fit` and '
                                                     '`predict`.',
                                      'anyOf': [{'description': '1 unless in joblib.parallel_backend context.',
                                                 'enum': [None]},
                                                {'description': 'Use all processors.', 'enum': [-1]},
                                                {'description': 'Number of CPU cores.',
                                                 'type': 'integer',
                                                 'minimum': 1}],
                                      'default': None},
                           'random_state': {'anyOf': [{'type': 'integer'},
                                                      {'laleType': 'numpy.random.RandomState'},
                                                      {'enum': [None]}],
                                            'default': None,
                                            'description': 'If int, random_state is the seed used by the random number '
                                                           'generator;'},
                           'verbose': {'type': 'integer',
                                       'default': 0,
                                       'description': 'Controls the verbosity when fitting and predicting.'}}}]}
