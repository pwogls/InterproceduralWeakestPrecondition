{'allOf': [{'type': 'object',
            'additionalProperties': False,
            'required': ['penalty',
                         'loss',
                         'dual',
                         'tol',
                         'C',
                         'multi_class',
                         'fit_intercept',
                         'intercept_scaling',
                         'class_weight',
                         'verbose',
                         'random_state',
                         'max_iter'],
            'relevantToOptimizer': ['C',
                                    'dual',
                                    'fit_intercept',
                                    'intercept_scaling',
                                    'loss',
                                    'max_iter',
                                    'multi_class',
                                    'penalty',
                                    'tol'],
            'properties': {'penalty': {'description': 'Norm used in the penalization.',
                                       'enum': ['l1', 'l2'],
                                       'default': 'l2'},
                           'loss': {'description': 'Loss function.',
                                    'enum': ['hinge', 'squared_hinge'],
                                    'default': 'squared_hinge'},
                           'dual': {'type': 'boolean',
                                    'default': True,
                                    'description': 'Select the algorithm to either solve the dual or primal '
                                                   'optimization problem.'},
                           'tol': {'type': 'number',
                                   'distribution': 'loguniform',
                                   'minimum': 0.0,
                                   'exclusiveMinimum': True,
                                   'maximumForOptimizer': 0.01,
                                   'default': 0.0001,
                                   'description': 'Tolerance for stopping criteria.'},
                           'C': {'description': 'Penalty parameter C of the error term.',
                                 'type': 'number',
                                 'distribution': 'loguniform',
                                 'minimum': 0.0,
                                 'exclusiveMinimum': True,
                                 'default': 1.0,
                                 'minimumForOptimizer': 0.03125,
                                 'maximumForOptimizer': 32768},
                           'multi_class': {'description': 'Determines the multi-class strategy if `y` contains more '
                                                          'than two classes.',
                                           'enum': ['ovr', 'crammer_singer'],
                                           'default': 'ovr'},
                           'fit_intercept': {'type': 'boolean',
                                             'default': True,
                                             'description': 'Whether to calculate the intercept for this model.'},
                           'intercept_scaling': {'type': 'number',
                                                 'description': 'Append a constant feature with constant value '
                                                                'intercept_scaling to the instance vector.',
                                                 'minimum': 0.0,
                                                 'exclusiveMinimum': True,
                                                 'maximumForOptimizer': 1.0,
                                                 'default': 1.0},
                           'class_weight': {'anyOf': [{'description': 'By default, all classes have weight 1.',
                                                       'enum': [None]},
                                                      {'description': 'Adjust weights by inverse frequency.',
                                                       'enum': ['balanced']},
                                                      {'description': 'Dictionary mapping class labels to weights.',
                                                       'type': 'object',
                                                       'additionalProperties': {'type': 'number'},
                                                       'forOptimizer': False}],
                                            'default': None},
                           'verbose': {'type': 'integer', 'default': 0, 'description': 'Enable verbose output.'},
                           'random_state': {'description': 'Seed of pseudo-random number generator.',
                                            'anyOf': [{'laleType': 'numpy.random.RandomState'},
                                                      {'description': 'RandomState used by np.random', 'enum': [None]},
                                                      {'description': 'Explicit seed.', 'type': 'integer'}],
                                            'default': None},
                           'max_iter': {'type': 'integer',
                                        'minimum': 1,
                                        'minimumForOptimizer': 10,
                                        'maximumForOptimizer': 1000,
                                        'default': 1000,
                                        'description': 'The maximum number of iterations to be run.'}}}]}
